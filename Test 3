{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMeojbD3ZSVp585xRsfhVZL",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/VedikaJoshi25/Test/blob/main/Test%203\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**EC2005 Data Analytics and Modelling Assignment**"
      ],
      "metadata": {
        "id": "vgPqDd3zuHOH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**(1) Part A: Data Preparation**"
      ],
      "metadata": {
        "id": "qiLuhMCnIM-D"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kmiXLnwQ_ThX",
        "outputId": "1e9120d6-7663-4b68-c8b2-dd78ad65d5b8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting stargazer\n",
            "  Downloading stargazer-0.0.7-py3-none-any.whl.metadata (6.3 kB)\n",
            "Downloading stargazer-0.0.7-py3-none-any.whl (15 kB)\n",
            "Installing collected packages: stargazer\n",
            "Successfully installed stargazer-0.0.7\n"
          ]
        }
      ],
      "source": [
        "#Importing Python Packages\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "!pip install stargazer\n",
        "from stargazer.stargazer import Stargazer"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Loading the dataset\n",
        "loans = pd.read_csv(\"loans_dataset.csv\")"
      ],
      "metadata": {
        "id": "4p39N1UX_nUf"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking if the dataset has loaded correctly\n",
        "loans.head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 342
        },
        "id": "5VJFg1Qo_5Zw",
        "outputId": "618b6372-6443-4e8b-9e44-5056949b9186"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 emp_title  emp_length state homeownership  annual_income  \\\n",
              "0  global config engineer          3.0    NJ      MORTGAGE        90000.0   \n",
              "1   warehouse office clerk        10.0    HI          RENT        40000.0   \n",
              "2                 assembly         3.0    WI          RENT        40000.0   \n",
              "3         customer service         1.0    PA          RENT        30000.0   \n",
              "4     security supervisor         10.0    CA          RENT        35000.0   \n",
              "\n",
              "   verified_income  debt_to_income  annual_income_joint  \\\n",
              "0         Verified           18.01                  NaN   \n",
              "1     Not Verified            5.04                  NaN   \n",
              "2  Source Verified           21.15                  NaN   \n",
              "3     Not Verified           10.16                  NaN   \n",
              "4         Verified           57.96              57000.0   \n",
              "\n",
              "  verification_income_joint  debt_to_income_joint  ...  sub_grade  \\\n",
              "0                       NaN                   NaN  ...         C3   \n",
              "1                       NaN                   NaN  ...         C1   \n",
              "2                       NaN                   NaN  ...         D1   \n",
              "3                       NaN                   NaN  ...         A3   \n",
              "4                  Verified                 37.66  ...         C3   \n",
              "\n",
              "   issue_month  loan_status  initial_listing_status  disbursement_method  \\\n",
              "0     Mar-2018      Current                   whole                 Cash   \n",
              "1     Feb-2018      Current                   whole                 Cash   \n",
              "2     Feb-2018      Current              fractional                 Cash   \n",
              "3     Jan-2018      Current                   whole                 Cash   \n",
              "4     Mar-2018      Current                   whole                 Cash   \n",
              "\n",
              "    balance  paid_total  paid_principal  paid_interest  paid_late_fees  \n",
              "0  27015.86     1999.33          984.14        1015.19             0.0  \n",
              "1   4651.37      499.12          348.63         150.49             0.0  \n",
              "2   1824.63      281.80          175.37         106.43             0.0  \n",
              "3  18853.26     3312.89         2746.74         566.15             0.0  \n",
              "4  21430.15     2324.65         1569.85         754.80             0.0  \n",
              "\n",
              "[5 rows x 55 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4345e383-a21d-4e97-b48c-d5a60960503e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>emp_title</th>\n",
              "      <th>emp_length</th>\n",
              "      <th>state</th>\n",
              "      <th>homeownership</th>\n",
              "      <th>annual_income</th>\n",
              "      <th>verified_income</th>\n",
              "      <th>debt_to_income</th>\n",
              "      <th>annual_income_joint</th>\n",
              "      <th>verification_income_joint</th>\n",
              "      <th>debt_to_income_joint</th>\n",
              "      <th>...</th>\n",
              "      <th>sub_grade</th>\n",
              "      <th>issue_month</th>\n",
              "      <th>loan_status</th>\n",
              "      <th>initial_listing_status</th>\n",
              "      <th>disbursement_method</th>\n",
              "      <th>balance</th>\n",
              "      <th>paid_total</th>\n",
              "      <th>paid_principal</th>\n",
              "      <th>paid_interest</th>\n",
              "      <th>paid_late_fees</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>global config engineer</td>\n",
              "      <td>3.0</td>\n",
              "      <td>NJ</td>\n",
              "      <td>MORTGAGE</td>\n",
              "      <td>90000.0</td>\n",
              "      <td>Verified</td>\n",
              "      <td>18.01</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>C3</td>\n",
              "      <td>Mar-2018</td>\n",
              "      <td>Current</td>\n",
              "      <td>whole</td>\n",
              "      <td>Cash</td>\n",
              "      <td>27015.86</td>\n",
              "      <td>1999.33</td>\n",
              "      <td>984.14</td>\n",
              "      <td>1015.19</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>warehouse office clerk</td>\n",
              "      <td>10.0</td>\n",
              "      <td>HI</td>\n",
              "      <td>RENT</td>\n",
              "      <td>40000.0</td>\n",
              "      <td>Not Verified</td>\n",
              "      <td>5.04</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>C1</td>\n",
              "      <td>Feb-2018</td>\n",
              "      <td>Current</td>\n",
              "      <td>whole</td>\n",
              "      <td>Cash</td>\n",
              "      <td>4651.37</td>\n",
              "      <td>499.12</td>\n",
              "      <td>348.63</td>\n",
              "      <td>150.49</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>assembly</td>\n",
              "      <td>3.0</td>\n",
              "      <td>WI</td>\n",
              "      <td>RENT</td>\n",
              "      <td>40000.0</td>\n",
              "      <td>Source Verified</td>\n",
              "      <td>21.15</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>D1</td>\n",
              "      <td>Feb-2018</td>\n",
              "      <td>Current</td>\n",
              "      <td>fractional</td>\n",
              "      <td>Cash</td>\n",
              "      <td>1824.63</td>\n",
              "      <td>281.80</td>\n",
              "      <td>175.37</td>\n",
              "      <td>106.43</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>customer service</td>\n",
              "      <td>1.0</td>\n",
              "      <td>PA</td>\n",
              "      <td>RENT</td>\n",
              "      <td>30000.0</td>\n",
              "      <td>Not Verified</td>\n",
              "      <td>10.16</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>A3</td>\n",
              "      <td>Jan-2018</td>\n",
              "      <td>Current</td>\n",
              "      <td>whole</td>\n",
              "      <td>Cash</td>\n",
              "      <td>18853.26</td>\n",
              "      <td>3312.89</td>\n",
              "      <td>2746.74</td>\n",
              "      <td>566.15</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>security supervisor</td>\n",
              "      <td>10.0</td>\n",
              "      <td>CA</td>\n",
              "      <td>RENT</td>\n",
              "      <td>35000.0</td>\n",
              "      <td>Verified</td>\n",
              "      <td>57.96</td>\n",
              "      <td>57000.0</td>\n",
              "      <td>Verified</td>\n",
              "      <td>37.66</td>\n",
              "      <td>...</td>\n",
              "      <td>C3</td>\n",
              "      <td>Mar-2018</td>\n",
              "      <td>Current</td>\n",
              "      <td>whole</td>\n",
              "      <td>Cash</td>\n",
              "      <td>21430.15</td>\n",
              "      <td>2324.65</td>\n",
              "      <td>1569.85</td>\n",
              "      <td>754.80</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 55 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4345e383-a21d-4e97-b48c-d5a60960503e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4345e383-a21d-4e97-b48c-d5a60960503e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4345e383-a21d-4e97-b48c-d5a60960503e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-28b662f0-25c1-4ab3-8c7a-ae9104d8b63f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-28b662f0-25c1-4ab3-8c7a-ae9104d8b63f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-28b662f0-25c1-4ab3-8c7a-ae9104d8b63f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "loans"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking if all the columns before renaming and cleaning data\n",
        "print(loans.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tdmqvrpJKdpi",
        "outputId": "2f11ea1c-49a4-4746-919d-6440aa8e0898"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['emp_title', 'emp_length', 'state', 'homeownership', 'annual_income',\n",
            "       'verified_income', 'debt_to_income', 'annual_income_joint',\n",
            "       'verification_income_joint', 'debt_to_income_joint', 'delinq_2y',\n",
            "       'months_since_last_delinq', 'earliest_credit_line',\n",
            "       'inquiries_last_12m', 'total_credit_lines', 'open_credit_lines',\n",
            "       'total_credit_limit', 'total_credit_utilized',\n",
            "       'num_collections_last_12m', 'num_historical_failed_to_pay',\n",
            "       'months_since_90d_late', 'current_accounts_delinq',\n",
            "       'total_collection_amount_ever', 'current_installment_accounts',\n",
            "       'accounts_opened_24m', 'months_since_last_credit_inquiry',\n",
            "       'num_satisfactory_accounts', 'num_accounts_120d_past_due',\n",
            "       'num_accounts_30d_past_due', 'num_active_debit_accounts',\n",
            "       'total_debit_limit', 'num_total_cc_accounts', 'num_open_cc_accounts',\n",
            "       'num_cc_carrying_balance', 'num_mort_accounts',\n",
            "       'account_never_delinq_percent', 'tax_liens', 'public_record_bankrupt',\n",
            "       'loan_purpose', 'application_type', 'loan_amount', 'term',\n",
            "       'interest_rate', 'installment', 'grade', 'sub_grade', 'issue_month',\n",
            "       'loan_status', 'initial_listing_status', 'disbursement_method',\n",
            "       'balance', 'paid_total', 'paid_principal', 'paid_interest',\n",
            "       'paid_late_fees'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Describing the dataset numerical values\n",
        "print(\"Summary Of Loans Data Before Cleaning:\")\n",
        "loans.describe()\n",
        "# Save as CSV"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 367
        },
        "id": "O8FdHIKsACkS",
        "outputId": "4e27ed66-1f16-4e78-e918-8e95bc7006fe"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Summary Of Loans Data Before Cleaning:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        emp_length  annual_income  debt_to_income  annual_income_joint  \\\n",
              "count  9183.000000   1.000000e+04     9976.000000         1.495000e+03   \n",
              "mean      5.930306   7.922215e+04       19.308192         1.279146e+05   \n",
              "std       3.703734   6.473429e+04       15.004851         7.016838e+04   \n",
              "min       0.000000   0.000000e+00        0.000000         1.920000e+04   \n",
              "25%       2.000000   4.500000e+04       11.057500         8.683350e+04   \n",
              "50%       6.000000   6.500000e+04       17.570000         1.130000e+05   \n",
              "75%      10.000000   9.500000e+04       25.002500         1.515455e+05   \n",
              "max      10.000000   2.300000e+06      469.090000         1.100000e+06   \n",
              "\n",
              "       debt_to_income_joint    delinq_2y  months_since_last_delinq  \\\n",
              "count           1495.000000  10000.00000               4342.000000   \n",
              "mean              19.979304      0.21600                 36.760709   \n",
              "std                8.054781      0.68366                 21.634939   \n",
              "min                0.320000      0.00000                  1.000000   \n",
              "25%               14.160000      0.00000                 19.000000   \n",
              "50%               19.720000      0.00000                 34.000000   \n",
              "75%               25.500000      0.00000                 53.000000   \n",
              "max               39.980000     13.00000                118.000000   \n",
              "\n",
              "       earliest_credit_line  inquiries_last_12m  total_credit_lines  ...  \\\n",
              "count           10000.00000         10000.00000        10000.000000  ...   \n",
              "mean             2001.29000             1.95820           22.679600  ...   \n",
              "std                 7.79551             2.38013           11.885439  ...   \n",
              "min              1963.00000             0.00000            2.000000  ...   \n",
              "25%              1997.00000             0.00000           14.000000  ...   \n",
              "50%              2003.00000             1.00000           21.000000  ...   \n",
              "75%              2006.00000             3.00000           29.000000  ...   \n",
              "max              2015.00000            29.00000           87.000000  ...   \n",
              "\n",
              "       public_record_bankrupt   loan_amount          term  interest_rate  \\\n",
              "count            10000.000000  10000.000000  10000.000000   10000.000000   \n",
              "mean                 0.123800  16361.922500     43.272000      12.427524   \n",
              "std                  0.337172  10301.956759     11.029877       5.001105   \n",
              "min                  0.000000   1000.000000     36.000000       5.310000   \n",
              "25%                  0.000000   8000.000000     36.000000       9.430000   \n",
              "50%                  0.000000  14500.000000     36.000000      11.980000   \n",
              "75%                  0.000000  24000.000000     60.000000      15.050000   \n",
              "max                  3.000000  40000.000000     60.000000      30.940000   \n",
              "\n",
              "        installment       balance    paid_total  paid_principal  \\\n",
              "count  10000.000000  10000.000000  10000.000000    10000.000000   \n",
              "mean     476.205323  14458.916610   2494.234773     1894.448466   \n",
              "std      294.851627   9964.561865   3958.230365     3884.407175   \n",
              "min       30.750000      0.000000      0.000000        0.000000   \n",
              "25%      256.040000   6679.065000    928.700000      587.100000   \n",
              "50%      398.420000  12379.495000   1563.300000      984.990000   \n",
              "75%      644.690000  20690.182500   2616.005000     1694.555000   \n",
              "max     1566.590000  40000.000000  41630.443684    40000.000000   \n",
              "\n",
              "       paid_interest  paid_late_fees  \n",
              "count   10000.000000    10000.000000  \n",
              "mean      599.666781        0.119516  \n",
              "std       517.328062        1.813468  \n",
              "min         0.000000        0.000000  \n",
              "25%       221.757500        0.000000  \n",
              "50%       446.140000        0.000000  \n",
              "75%       825.420000        0.000000  \n",
              "max      4216.440000       52.980000  \n",
              "\n",
              "[8 rows x 42 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7e8f747a-d16f-4176-91ba-f55a4862a76a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>emp_length</th>\n",
              "      <th>annual_income</th>\n",
              "      <th>debt_to_income</th>\n",
              "      <th>annual_income_joint</th>\n",
              "      <th>debt_to_income_joint</th>\n",
              "      <th>delinq_2y</th>\n",
              "      <th>months_since_last_delinq</th>\n",
              "      <th>earliest_credit_line</th>\n",
              "      <th>inquiries_last_12m</th>\n",
              "      <th>total_credit_lines</th>\n",
              "      <th>...</th>\n",
              "      <th>public_record_bankrupt</th>\n",
              "      <th>loan_amount</th>\n",
              "      <th>term</th>\n",
              "      <th>interest_rate</th>\n",
              "      <th>installment</th>\n",
              "      <th>balance</th>\n",
              "      <th>paid_total</th>\n",
              "      <th>paid_principal</th>\n",
              "      <th>paid_interest</th>\n",
              "      <th>paid_late_fees</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>9183.000000</td>\n",
              "      <td>1.000000e+04</td>\n",
              "      <td>9976.000000</td>\n",
              "      <td>1.495000e+03</td>\n",
              "      <td>1495.000000</td>\n",
              "      <td>10000.00000</td>\n",
              "      <td>4342.000000</td>\n",
              "      <td>10000.00000</td>\n",
              "      <td>10000.00000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>5.930306</td>\n",
              "      <td>7.922215e+04</td>\n",
              "      <td>19.308192</td>\n",
              "      <td>1.279146e+05</td>\n",
              "      <td>19.979304</td>\n",
              "      <td>0.21600</td>\n",
              "      <td>36.760709</td>\n",
              "      <td>2001.29000</td>\n",
              "      <td>1.95820</td>\n",
              "      <td>22.679600</td>\n",
              "      <td>...</td>\n",
              "      <td>0.123800</td>\n",
              "      <td>16361.922500</td>\n",
              "      <td>43.272000</td>\n",
              "      <td>12.427524</td>\n",
              "      <td>476.205323</td>\n",
              "      <td>14458.916610</td>\n",
              "      <td>2494.234773</td>\n",
              "      <td>1894.448466</td>\n",
              "      <td>599.666781</td>\n",
              "      <td>0.119516</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3.703734</td>\n",
              "      <td>6.473429e+04</td>\n",
              "      <td>15.004851</td>\n",
              "      <td>7.016838e+04</td>\n",
              "      <td>8.054781</td>\n",
              "      <td>0.68366</td>\n",
              "      <td>21.634939</td>\n",
              "      <td>7.79551</td>\n",
              "      <td>2.38013</td>\n",
              "      <td>11.885439</td>\n",
              "      <td>...</td>\n",
              "      <td>0.337172</td>\n",
              "      <td>10301.956759</td>\n",
              "      <td>11.029877</td>\n",
              "      <td>5.001105</td>\n",
              "      <td>294.851627</td>\n",
              "      <td>9964.561865</td>\n",
              "      <td>3958.230365</td>\n",
              "      <td>3884.407175</td>\n",
              "      <td>517.328062</td>\n",
              "      <td>1.813468</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.920000e+04</td>\n",
              "      <td>0.320000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1963.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>36.000000</td>\n",
              "      <td>5.310000</td>\n",
              "      <td>30.750000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2.000000</td>\n",
              "      <td>4.500000e+04</td>\n",
              "      <td>11.057500</td>\n",
              "      <td>8.683350e+04</td>\n",
              "      <td>14.160000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>19.000000</td>\n",
              "      <td>1997.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>8000.000000</td>\n",
              "      <td>36.000000</td>\n",
              "      <td>9.430000</td>\n",
              "      <td>256.040000</td>\n",
              "      <td>6679.065000</td>\n",
              "      <td>928.700000</td>\n",
              "      <td>587.100000</td>\n",
              "      <td>221.757500</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>6.000000</td>\n",
              "      <td>6.500000e+04</td>\n",
              "      <td>17.570000</td>\n",
              "      <td>1.130000e+05</td>\n",
              "      <td>19.720000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>34.000000</td>\n",
              "      <td>2003.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>14500.000000</td>\n",
              "      <td>36.000000</td>\n",
              "      <td>11.980000</td>\n",
              "      <td>398.420000</td>\n",
              "      <td>12379.495000</td>\n",
              "      <td>1563.300000</td>\n",
              "      <td>984.990000</td>\n",
              "      <td>446.140000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>10.000000</td>\n",
              "      <td>9.500000e+04</td>\n",
              "      <td>25.002500</td>\n",
              "      <td>1.515455e+05</td>\n",
              "      <td>25.500000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>53.000000</td>\n",
              "      <td>2006.00000</td>\n",
              "      <td>3.00000</td>\n",
              "      <td>29.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>24000.000000</td>\n",
              "      <td>60.000000</td>\n",
              "      <td>15.050000</td>\n",
              "      <td>644.690000</td>\n",
              "      <td>20690.182500</td>\n",
              "      <td>2616.005000</td>\n",
              "      <td>1694.555000</td>\n",
              "      <td>825.420000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>10.000000</td>\n",
              "      <td>2.300000e+06</td>\n",
              "      <td>469.090000</td>\n",
              "      <td>1.100000e+06</td>\n",
              "      <td>39.980000</td>\n",
              "      <td>13.00000</td>\n",
              "      <td>118.000000</td>\n",
              "      <td>2015.00000</td>\n",
              "      <td>29.00000</td>\n",
              "      <td>87.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>40000.000000</td>\n",
              "      <td>60.000000</td>\n",
              "      <td>30.940000</td>\n",
              "      <td>1566.590000</td>\n",
              "      <td>40000.000000</td>\n",
              "      <td>41630.443684</td>\n",
              "      <td>40000.000000</td>\n",
              "      <td>4216.440000</td>\n",
              "      <td>52.980000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows × 42 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7e8f747a-d16f-4176-91ba-f55a4862a76a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7e8f747a-d16f-4176-91ba-f55a4862a76a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7e8f747a-d16f-4176-91ba-f55a4862a76a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-1af77afa-5775-445d-8d44-5ca2de0f0522\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1af77afa-5775-445d-8d44-5ca2de0f0522')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-1af77afa-5775-445d-8d44-5ca2de0f0522 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# PART A: Data Preparation\n",
        "# (1.1a) Filtering the dataset for only the required variables\n",
        "variables_to_keep = [\n",
        "    \"interest_rate\", \"verified_income\", \"debt_to_income\", \"total_credit_utilized\",\n",
        "    \"total_credit_limit\", \"public_record_bankrupt\", \"loan_purpose\", \"term\",\n",
        "    \"inquiries_last_12m\", \"issue_month\", \"annual_income\", \"loan_amount\",\n",
        "    \"grade\", \"emp_length\", \"homeownership\"\n",
        "]"
      ],
      "metadata": {
        "id": "_9UQb0ax_wo6"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating a data cleaned filter\n",
        "loans_cleaned=loans[variables_to_keep]"
      ],
      "metadata": {
        "id": "dcPvgbuGBLUW"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# (1.1b) Renaming the variable to'inquiries_last_12m' to 'credit_checks' after filtering\n",
        "loans_cleaned = loans_cleaned.rename(columns={\"inquiries_last_12m\": \"credit_checks\"})"
      ],
      "metadata": {
        "id": "h4NWALqOBTId"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking if variable has been renamed - should be true if it has been changed\n",
        "\"credit_checks\"in loans_cleaned.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SGwFKnjOCFlR",
        "outputId": "2e5e4a0b-5238-42d4-d60b-6536f876398c"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Printing loans_cleaned columns to see if 'inquiries_last_12m' to 'credit_checks' has been renamed correctly\n",
        "print(loans_cleaned.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WX4dYfvXB_nq",
        "outputId": "ab2d3bc2-77f9-4beb-8fa4-8c047de3b6e7"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['interest_rate', 'verified_income', 'debt_to_income',\n",
            "       'total_credit_utilized', 'total_credit_limit', 'public_record_bankrupt',\n",
            "       'loan_purpose', 'term', 'credit_checks', 'issue_month', 'annual_income',\n",
            "       'loan_amount', 'grade', 'emp_length', 'homeownership'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#(1.1c - first bullet point question) Number of Observations before and after cleaning\n",
        "Observations_before = len(loans)\n",
        "Observations_after = len(loans_cleaned)\n",
        "print(\"Number of Observations_before_cleaning:\", Observations_before)\n",
        "print(\"Number of Observations_after_cleaning:\", Observations_after)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p02SaWAkDt2i",
        "outputId": "165ffc04-9b36-4422-f51f-de6cfe951dc3"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of Observations_before_cleaning: 10000\n",
            "Number of Observations_after_cleaning: 10000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#(1.1c second bullet point question) Summary statistics of cleaned dataset numerical variables\n",
        "print(\"Summary Statistics of Cleaned Dataset - Numerical Values:\")\n",
        "loans_cleaned.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 337
        },
        "id": "9vLFLWkPEDrp",
        "outputId": "5421451c-ca1e-4597-d201-a0ad7c612e9b"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Summary Statistics of Cleaned Dataset - Numerical Values:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       interest_rate  debt_to_income  total_credit_utilized  \\\n",
              "count   10000.000000     9976.000000           10000.000000   \n",
              "mean       12.427524       19.308192           51049.063100   \n",
              "std         5.001105       15.004851           53636.731172   \n",
              "min         5.310000        0.000000               0.000000   \n",
              "25%         9.430000       11.057500           19185.500000   \n",
              "50%        11.980000       17.570000           36927.000000   \n",
              "75%        15.050000       25.002500           65421.000000   \n",
              "max        30.940000      469.090000          942456.000000   \n",
              "\n",
              "       total_credit_limit  public_record_bankrupt          term  \\\n",
              "count        1.000000e+04            10000.000000  10000.000000   \n",
              "mean         1.836062e+05                0.123800     43.272000   \n",
              "std          1.876327e+05                0.337172     11.029877   \n",
              "min          0.000000e+00                0.000000     36.000000   \n",
              "25%          5.159375e+04                0.000000     36.000000   \n",
              "50%          1.146670e+05                0.000000     36.000000   \n",
              "75%          2.675500e+05                0.000000     60.000000   \n",
              "max          3.386034e+06                3.000000     60.000000   \n",
              "\n",
              "       credit_checks  annual_income   loan_amount   emp_length  \n",
              "count    10000.00000   1.000000e+04  10000.000000  9183.000000  \n",
              "mean         1.95820   7.922215e+04  16361.922500     5.930306  \n",
              "std          2.38013   6.473429e+04  10301.956759     3.703734  \n",
              "min          0.00000   0.000000e+00   1000.000000     0.000000  \n",
              "25%          0.00000   4.500000e+04   8000.000000     2.000000  \n",
              "50%          1.00000   6.500000e+04  14500.000000     6.000000  \n",
              "75%          3.00000   9.500000e+04  24000.000000    10.000000  \n",
              "max         29.00000   2.300000e+06  40000.000000    10.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3149f47a-d2bb-47a7-bd69-5ae42cb2188c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>interest_rate</th>\n",
              "      <th>debt_to_income</th>\n",
              "      <th>total_credit_utilized</th>\n",
              "      <th>total_credit_limit</th>\n",
              "      <th>public_record_bankrupt</th>\n",
              "      <th>term</th>\n",
              "      <th>credit_checks</th>\n",
              "      <th>annual_income</th>\n",
              "      <th>loan_amount</th>\n",
              "      <th>emp_length</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>10000.000000</td>\n",
              "      <td>9976.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>1.000000e+04</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.00000</td>\n",
              "      <td>1.000000e+04</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>9183.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>12.427524</td>\n",
              "      <td>19.308192</td>\n",
              "      <td>51049.063100</td>\n",
              "      <td>1.836062e+05</td>\n",
              "      <td>0.123800</td>\n",
              "      <td>43.272000</td>\n",
              "      <td>1.95820</td>\n",
              "      <td>7.922215e+04</td>\n",
              "      <td>16361.922500</td>\n",
              "      <td>5.930306</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>5.001105</td>\n",
              "      <td>15.004851</td>\n",
              "      <td>53636.731172</td>\n",
              "      <td>1.876327e+05</td>\n",
              "      <td>0.337172</td>\n",
              "      <td>11.029877</td>\n",
              "      <td>2.38013</td>\n",
              "      <td>6.473429e+04</td>\n",
              "      <td>10301.956759</td>\n",
              "      <td>3.703734</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>5.310000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>36.000000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>9.430000</td>\n",
              "      <td>11.057500</td>\n",
              "      <td>19185.500000</td>\n",
              "      <td>5.159375e+04</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>36.000000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>4.500000e+04</td>\n",
              "      <td>8000.000000</td>\n",
              "      <td>2.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>11.980000</td>\n",
              "      <td>17.570000</td>\n",
              "      <td>36927.000000</td>\n",
              "      <td>1.146670e+05</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>36.000000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>6.500000e+04</td>\n",
              "      <td>14500.000000</td>\n",
              "      <td>6.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>15.050000</td>\n",
              "      <td>25.002500</td>\n",
              "      <td>65421.000000</td>\n",
              "      <td>2.675500e+05</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>60.000000</td>\n",
              "      <td>3.00000</td>\n",
              "      <td>9.500000e+04</td>\n",
              "      <td>24000.000000</td>\n",
              "      <td>10.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>30.940000</td>\n",
              "      <td>469.090000</td>\n",
              "      <td>942456.000000</td>\n",
              "      <td>3.386034e+06</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>60.000000</td>\n",
              "      <td>29.00000</td>\n",
              "      <td>2.300000e+06</td>\n",
              "      <td>40000.000000</td>\n",
              "      <td>10.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3149f47a-d2bb-47a7-bd69-5ae42cb2188c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3149f47a-d2bb-47a7-bd69-5ae42cb2188c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3149f47a-d2bb-47a7-bd69-5ae42cb2188c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b26e67e4-f4ab-4ffd-971b-350bc2edd1e9\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b26e67e4-f4ab-4ffd-971b-350bc2edd1e9')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b26e67e4-f4ab-4ffd-971b-350bc2edd1e9 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"loans_cleaned\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"interest_rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3530.9905871976193,\n        \"min\": 5.001104881366526,\n        \"max\": 10000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.427524,\n          11.98,\n          10000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"debt_to_income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3502.533314670008,\n        \"min\": 0.0,\n        \"max\": 9976.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          19.30819165998396,\n          17.57,\n          9976.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_credit_utilized\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 322082.1502404345,\n        \"min\": 0.0,\n        \"max\": 942456.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          51049.0631,\n          36927.0,\n          10000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_credit_limit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1159772.0803841627,\n        \"min\": 0.0,\n        \"max\": 3386034.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          183606.2304,\n          114667.0,\n          10000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"public_record_bankrupt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3535.3592503213345,\n        \"min\": 0.0,\n        \"max\": 10000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.1238,\n          3.0,\n          0.33717195686007057\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"term\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3521.3099356125863,\n        \"min\": 11.029876781640894,\n        \"max\": 10000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          43.272,\n          60.0,\n          11.029876781640894\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"credit_checks\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3533.6614035681587,\n        \"min\": 0.0,\n        \"max\": 10000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          10000.0,\n          1.9582,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"annual_income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 795710.4201517042,\n        \"min\": 0.0,\n        \"max\": 2300000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          79222.148412,\n          65000.0,\n          10000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"loan_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11940.382901706602,\n        \"min\": 1000.0,\n        \"max\": 40000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          16361.9225,\n          14500.0,\n          10000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"emp_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3244.781885132454,\n        \"min\": 0.0,\n        \"max\": 9183.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          9183.0,\n          5.930306000217794,\n          6.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# (1.1c second bullet point question) Summary Statisitcs for all variable - including non numerical one\n",
        "summary_stats = loans_cleaned.describe(include=\"all\")\n",
        "summary_stats = summary_stats.round(2)\n",
        "print(\"Summary Statistics of Cleaned Dataset All Values:\")\n",
        "summary_stats"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 431
        },
        "id": "ldrYwlkvF-AH",
        "outputId": "d1ae3a66-2ffd-4223-a9a9-28179b10179c"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Summary Statistics of Cleaned Dataset All Values:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        interest_rate  verified_income  debt_to_income  total_credit_utilized  \\\n",
              "count        10000.00            10000         9976.00               10000.00   \n",
              "unique            NaN                3             NaN                    NaN   \n",
              "top               NaN  Source Verified             NaN                    NaN   \n",
              "freq              NaN             4116             NaN                    NaN   \n",
              "mean            12.43              NaN           19.31               51049.06   \n",
              "std              5.00              NaN           15.00               53636.73   \n",
              "min              5.31              NaN            0.00                   0.00   \n",
              "25%              9.43              NaN           11.06               19185.50   \n",
              "50%             11.98              NaN           17.57               36927.00   \n",
              "75%             15.05              NaN           25.00               65421.00   \n",
              "max             30.94              NaN          469.09              942456.00   \n",
              "\n",
              "        total_credit_limit  public_record_bankrupt        loan_purpose  \\\n",
              "count             10000.00                10000.00               10000   \n",
              "unique                 NaN                     NaN                  12   \n",
              "top                    NaN                     NaN  debt_consolidation   \n",
              "freq                   NaN                     NaN                5144   \n",
              "mean             183606.23                    0.12                 NaN   \n",
              "std              187632.71                    0.34                 NaN   \n",
              "min                   0.00                    0.00                 NaN   \n",
              "25%               51593.75                    0.00                 NaN   \n",
              "50%              114667.00                    0.00                 NaN   \n",
              "75%              267550.00                    0.00                 NaN   \n",
              "max             3386034.00                    3.00                 NaN   \n",
              "\n",
              "            term  credit_checks issue_month  annual_income  loan_amount  \\\n",
              "count   10000.00       10000.00       10000       10000.00     10000.00   \n",
              "unique       NaN            NaN           3            NaN          NaN   \n",
              "top          NaN            NaN    Mar-2018            NaN          NaN   \n",
              "freq         NaN            NaN        3617            NaN          NaN   \n",
              "mean       43.27           1.96         NaN       79222.15     16361.92   \n",
              "std        11.03           2.38         NaN       64734.29     10301.96   \n",
              "min        36.00           0.00         NaN           0.00      1000.00   \n",
              "25%        36.00           0.00         NaN       45000.00      8000.00   \n",
              "50%        36.00           1.00         NaN       65000.00     14500.00   \n",
              "75%        60.00           3.00         NaN       95000.00     24000.00   \n",
              "max        60.00          29.00         NaN     2300000.00     40000.00   \n",
              "\n",
              "        grade  emp_length homeownership  \n",
              "count   10000     9183.00         10000  \n",
              "unique      7         NaN             3  \n",
              "top         B         NaN      MORTGAGE  \n",
              "freq     3037         NaN          4789  \n",
              "mean      NaN        5.93           NaN  \n",
              "std       NaN        3.70           NaN  \n",
              "min       NaN        0.00           NaN  \n",
              "25%       NaN        2.00           NaN  \n",
              "50%       NaN        6.00           NaN  \n",
              "75%       NaN       10.00           NaN  \n",
              "max       NaN       10.00           NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7b9afdb0-6f60-4b3c-90b0-533518301563\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>interest_rate</th>\n",
              "      <th>verified_income</th>\n",
              "      <th>debt_to_income</th>\n",
              "      <th>total_credit_utilized</th>\n",
              "      <th>total_credit_limit</th>\n",
              "      <th>public_record_bankrupt</th>\n",
              "      <th>loan_purpose</th>\n",
              "      <th>term</th>\n",
              "      <th>credit_checks</th>\n",
              "      <th>issue_month</th>\n",
              "      <th>annual_income</th>\n",
              "      <th>loan_amount</th>\n",
              "      <th>grade</th>\n",
              "      <th>emp_length</th>\n",
              "      <th>homeownership</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>10000.00</td>\n",
              "      <td>10000</td>\n",
              "      <td>9976.00</td>\n",
              "      <td>10000.00</td>\n",
              "      <td>10000.00</td>\n",
              "      <td>10000.00</td>\n",
              "      <td>10000</td>\n",
              "      <td>10000.00</td>\n",
              "      <td>10000.00</td>\n",
              "      <td>10000</td>\n",
              "      <td>10000.00</td>\n",
              "      <td>10000.00</td>\n",
              "      <td>10000</td>\n",
              "      <td>9183.00</td>\n",
              "      <td>10000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>NaN</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>12</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Source Verified</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>debt_consolidation</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Mar-2018</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>B</td>\n",
              "      <td>NaN</td>\n",
              "      <td>MORTGAGE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>NaN</td>\n",
              "      <td>4116</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5144</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3617</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3037</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4789</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>12.43</td>\n",
              "      <td>NaN</td>\n",
              "      <td>19.31</td>\n",
              "      <td>51049.06</td>\n",
              "      <td>183606.23</td>\n",
              "      <td>0.12</td>\n",
              "      <td>NaN</td>\n",
              "      <td>43.27</td>\n",
              "      <td>1.96</td>\n",
              "      <td>NaN</td>\n",
              "      <td>79222.15</td>\n",
              "      <td>16361.92</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.93</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>5.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>15.00</td>\n",
              "      <td>53636.73</td>\n",
              "      <td>187632.71</td>\n",
              "      <td>0.34</td>\n",
              "      <td>NaN</td>\n",
              "      <td>11.03</td>\n",
              "      <td>2.38</td>\n",
              "      <td>NaN</td>\n",
              "      <td>64734.29</td>\n",
              "      <td>10301.96</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.70</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>5.31</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>36.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1000.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.00</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>9.43</td>\n",
              "      <td>NaN</td>\n",
              "      <td>11.06</td>\n",
              "      <td>19185.50</td>\n",
              "      <td>51593.75</td>\n",
              "      <td>0.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>36.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>45000.00</td>\n",
              "      <td>8000.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.00</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>11.98</td>\n",
              "      <td>NaN</td>\n",
              "      <td>17.57</td>\n",
              "      <td>36927.00</td>\n",
              "      <td>114667.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>36.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>65000.00</td>\n",
              "      <td>14500.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6.00</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>15.05</td>\n",
              "      <td>NaN</td>\n",
              "      <td>25.00</td>\n",
              "      <td>65421.00</td>\n",
              "      <td>267550.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>60.00</td>\n",
              "      <td>3.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>95000.00</td>\n",
              "      <td>24000.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>10.00</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>30.94</td>\n",
              "      <td>NaN</td>\n",
              "      <td>469.09</td>\n",
              "      <td>942456.00</td>\n",
              "      <td>3386034.00</td>\n",
              "      <td>3.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>60.00</td>\n",
              "      <td>29.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2300000.00</td>\n",
              "      <td>40000.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>10.00</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7b9afdb0-6f60-4b3c-90b0-533518301563')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7b9afdb0-6f60-4b3c-90b0-533518301563 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7b9afdb0-6f60-4b3c-90b0-533518301563');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b12b0402-2d83-4216-ac7d-402e948dcc19\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b12b0402-2d83-4216-ac7d-402e948dcc19')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b12b0402-2d83-4216-ac7d-402e948dcc19 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_7c2ae9f0-7e31-4e1e-b148-fbb6e123da2e\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('summary_stats')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_7c2ae9f0-7e31-4e1e-b148-fbb6e123da2e button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('summary_stats');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "summary_stats",
              "summary": "{\n  \"name\": \"summary_stats\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"interest_rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3530.990518253038,\n        \"min\": 5.0,\n        \"max\": 10000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.43,\n          11.98,\n          10000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"verified_income\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          \"4116\",\n          \"10000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"debt_to_income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3502.53347511458,\n        \"min\": 0.0,\n        \"max\": 9976.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          19.31,\n          17.57,\n          9976.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_credit_utilized\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 322082.15042154194,\n        \"min\": 0.0,\n        \"max\": 942456.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          51049.06,\n          36927.0,\n          10000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_credit_limit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1159772.0803085663,\n        \"min\": 0.0,\n        \"max\": 3386034.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          183606.23,\n          114667.0,\n          10000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"public_record_bankrupt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3535.3592994519554,\n        \"min\": 0.0,\n        \"max\": 10000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.12,\n          3.0,\n          0.34\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"loan_purpose\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          12,\n          \"5144\",\n          \"10000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"term\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3521.310030018252,\n        \"min\": 11.03,\n        \"max\": 10000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          43.27,\n          60.0,\n          11.03\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"credit_checks\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3533.661318995397,\n        \"min\": 0.0,\n        \"max\": 10000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          10000.0,\n          1.96,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"issue_month\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1970-01-01 00:00:00.000000003\",\n        \"max\": \"2018-03-01 00:00:00\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          \"3617\",\n          \"10000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"annual_income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 795710.420103161,\n        \"min\": 0.0,\n        \"max\": 2300000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          79222.15,\n          65000.0,\n          10000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"loan_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11940.382674211074,\n        \"min\": 1000.0,\n        \"max\": 40000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          16361.92,\n          14500.0,\n          10000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"grade\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          7,\n          \"3037\",\n          \"10000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"emp_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3244.7820894319257,\n        \"min\": 0.0,\n        \"max\": 9183.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          9183.0,\n          5.93,\n          6.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"homeownership\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          \"4789\",\n          \"10000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**(2) Part B: Exploratory Data Analysis (EDA)**"
      ],
      "metadata": {
        "id": "_UIx3O0BLsFP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#(2.1a) Calculating mean, median, standard deviation, minimum, and maximum\n",
        "selected_variables = [\"interest_rate\", \"annual_income\", \"debt_to_income\", \"loan_amount\"]\n",
        "summary_stats = loans_cleaned[selected_variables].describe().round(2)\n",
        "print(\"Summary Statistics for Selected Variables:\")\n",
        "summary_stats"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "02_niYzyL470",
        "outputId": "7e3ad3a0-8bf1-4bdb-c4c2-5225ccc6bad9"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Summary Statistics for Selected Variables:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       interest_rate  annual_income  debt_to_income  loan_amount\n",
              "count       10000.00       10000.00         9976.00     10000.00\n",
              "mean           12.43       79222.15           19.31     16361.92\n",
              "std             5.00       64734.29           15.00     10301.96\n",
              "min             5.31           0.00            0.00      1000.00\n",
              "25%             9.43       45000.00           11.06      8000.00\n",
              "50%            11.98       65000.00           17.57     14500.00\n",
              "75%            15.05       95000.00           25.00     24000.00\n",
              "max            30.94     2300000.00          469.09     40000.00"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7e360843-ba7d-4a10-b90a-b51dad75d177\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>interest_rate</th>\n",
              "      <th>annual_income</th>\n",
              "      <th>debt_to_income</th>\n",
              "      <th>loan_amount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>10000.00</td>\n",
              "      <td>10000.00</td>\n",
              "      <td>9976.00</td>\n",
              "      <td>10000.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>12.43</td>\n",
              "      <td>79222.15</td>\n",
              "      <td>19.31</td>\n",
              "      <td>16361.92</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>5.00</td>\n",
              "      <td>64734.29</td>\n",
              "      <td>15.00</td>\n",
              "      <td>10301.96</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>5.31</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1000.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>9.43</td>\n",
              "      <td>45000.00</td>\n",
              "      <td>11.06</td>\n",
              "      <td>8000.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>11.98</td>\n",
              "      <td>65000.00</td>\n",
              "      <td>17.57</td>\n",
              "      <td>14500.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>15.05</td>\n",
              "      <td>95000.00</td>\n",
              "      <td>25.00</td>\n",
              "      <td>24000.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>30.94</td>\n",
              "      <td>2300000.00</td>\n",
              "      <td>469.09</td>\n",
              "      <td>40000.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7e360843-ba7d-4a10-b90a-b51dad75d177')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7e360843-ba7d-4a10-b90a-b51dad75d177 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7e360843-ba7d-4a10-b90a-b51dad75d177');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-cfd8e7be-a9ac-4a0f-b9c3-90844509bc41\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cfd8e7be-a9ac-4a0f-b9c3-90844509bc41')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-cfd8e7be-a9ac-4a0f-b9c3-90844509bc41 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_c6303486-bc13-4d0b-be71-d77ccb55d081\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('summary_stats')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c6303486-bc13-4d0b-be71-d77ccb55d081 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('summary_stats');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "summary_stats",
              "summary": "{\n  \"name\": \"summary_stats\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"interest_rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3530.990518253038,\n        \"min\": 5.0,\n        \"max\": 10000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.43,\n          11.98,\n          10000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"annual_income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 795710.420103161,\n        \"min\": 0.0,\n        \"max\": 2300000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          79222.15,\n          65000.0,\n          10000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"debt_to_income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3502.53347511458,\n        \"min\": 0.0,\n        \"max\": 9976.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          19.31,\n          17.57,\n          9976.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"loan_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11940.382674211074,\n        \"min\": 1000.0,\n        \"max\": 40000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          16361.92,\n          14500.0,\n          10000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Count, Unique Values and Frequencies for Grade:\n",
        "print(\"\\nGrade - Value Counts and Frequencies:\")\n",
        "grade_counts = loans_cleaned[\"grade\"].value_counts(dropna=False).sort_index().to_frame().T\n",
        "print(grade_counts)\n",
        "\n",
        "print(\"\\nGrade - Summary Statistics:\")\n",
        "grade_stats = loans_cleaned[\"grade\"].describe().round(2)\n",
        "grade_stats.to_frame().T"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 185
        },
        "id": "8uaQwo4K_Rwo",
        "outputId": "fb7e41bd-f008-41aa-a6b3-2254a8534520"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Grade - Value Counts and Frequencies:\n",
            "grade     A     B     C     D    E   F   G\n",
            "count  2459  3037  2653  1446  335  58  12\n",
            "\n",
            "Grade - Summary Statistics:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       count unique top  freq\n",
              "grade  10000      7   B  3037"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e6b7caea-7873-4ec6-a5db-653ddc5e26b6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>unique</th>\n",
              "      <th>top</th>\n",
              "      <th>freq</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>grade</th>\n",
              "      <td>10000</td>\n",
              "      <td>7</td>\n",
              "      <td>B</td>\n",
              "      <td>3037</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e6b7caea-7873-4ec6-a5db-653ddc5e26b6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e6b7caea-7873-4ec6-a5db-653ddc5e26b6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e6b7caea-7873-4ec6-a5db-653ddc5e26b6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"grade_stats\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"10000\",\n        \"max\": \"10000\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"10000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unique\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 7,\n        \"max\": 7,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"top\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"B\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"freq\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"3037\",\n        \"max\": \"3037\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"3037\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Count, Unique Values and Frequencies for Verified Income:\n",
        "print(\"\\nVerified Income - Value Counts and Frequencies:\")\n",
        "verified_income_counts = loans_cleaned[\"verified_income\"].value_counts(dropna=False).sort_index().to_frame().T\n",
        "print(verified_income_counts)\n",
        "\n",
        "print(\"\\nVerified Income - Summary Statistics:\")\n",
        "verified_income_stats = loans_cleaned[\"verified_income\"].describe().round(2)\n",
        "verified_income_stats.to_frame().T"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 185
        },
        "id": "VA_q4NZ1Bdka",
        "outputId": "7b0cdcdd-49b6-43cc-97e9-7299f4fa9c22"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Verified Income - Value Counts and Frequencies:\n",
            "verified_income  Not Verified  Source Verified  Verified\n",
            "count                    3594             4116      2290\n",
            "\n",
            "Verified Income - Summary Statistics:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 count unique              top  freq\n",
              "verified_income  10000      3  Source Verified  4116"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4cf466f1-72ae-4fc6-b6b8-93615a542bd7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>unique</th>\n",
              "      <th>top</th>\n",
              "      <th>freq</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>verified_income</th>\n",
              "      <td>10000</td>\n",
              "      <td>3</td>\n",
              "      <td>Source Verified</td>\n",
              "      <td>4116</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4cf466f1-72ae-4fc6-b6b8-93615a542bd7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4cf466f1-72ae-4fc6-b6b8-93615a542bd7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4cf466f1-72ae-4fc6-b6b8-93615a542bd7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"verified_income_stats\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"10000\",\n        \"max\": \"10000\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"10000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unique\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 3,\n        \"max\": 3,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"top\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Source Verified\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"freq\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"4116\",\n        \"max\": \"4116\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"4116\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Count, Unique Values and Frequencies for Homeownership:\n",
        "print(\"\\nHomeownership - Value Counts and Frequencies:\")\n",
        "homeownership_counts = loans_cleaned[\"homeownership\"].value_counts(dropna=False).sort_index().to_frame().T\n",
        "print(homeownership_counts)\n",
        "\n",
        "print(\"\\nHomeownership - Summary Statistics:\")\n",
        "homeownership_stats = loans_cleaned[\"homeownership\"].describe().round(2)\n",
        "homeownership_stats.to_frame().T"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 185
        },
        "id": "n8Y0RCsRI-Yb",
        "outputId": "2662ee6d-3db9-4c7b-a756-f1937d2f5ba1"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Homeownership - Value Counts and Frequencies:\n",
            "homeownership  MORTGAGE   OWN  RENT\n",
            "count              4789  1353  3858\n",
            "\n",
            "Homeownership - Summary Statistics:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               count unique       top  freq\n",
              "homeownership  10000      3  MORTGAGE  4789"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-eb9b90dd-5f8f-44bf-8033-21dd07db1eff\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>unique</th>\n",
              "      <th>top</th>\n",
              "      <th>freq</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>homeownership</th>\n",
              "      <td>10000</td>\n",
              "      <td>3</td>\n",
              "      <td>MORTGAGE</td>\n",
              "      <td>4789</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eb9b90dd-5f8f-44bf-8033-21dd07db1eff')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-eb9b90dd-5f8f-44bf-8033-21dd07db1eff button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-eb9b90dd-5f8f-44bf-8033-21dd07db1eff');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"homeownership_stats\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"10000\",\n        \"max\": \"10000\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"10000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unique\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 3,\n        \"max\": 3,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"top\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"MORTGAGE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"freq\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"4789\",\n        \"max\": \"4789\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"4789\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#(2.1b) (b) Count, unique values and frequencies\n",
        "\n",
        "selected_variables_2 = [\"grade\", \"verified_income\", \"homeownership\"]\n",
        "summary_stats = loans_cleaned[selected_variables_2].describe().round(2)\n",
        "\n",
        "# Select only the 'count', 'unique', and 'freq'\n",
        "summary_stats_cleaned = summary_stats.loc[[\"count\", \"unique\", \"freq\"]]\n",
        "\n",
        "# Print the cleaned summary stat\n",
        "print(\"Summary Statistics for Selected Variables 2:\")\n",
        "summary_stats_cleaned.T"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 160
        },
        "id": "MmVBpn37Tu_l",
        "outputId": "14feb952-ef73-455b-e868-c90482f2e9a0"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Summary Statistics for Selected Variables 2:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 count unique  freq\n",
              "grade            10000      7  3037\n",
              "verified_income  10000      3  4116\n",
              "homeownership    10000      3  4789"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0933bf5e-2d92-4cf8-8bd7-993371fe7971\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>unique</th>\n",
              "      <th>freq</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>grade</th>\n",
              "      <td>10000</td>\n",
              "      <td>7</td>\n",
              "      <td>3037</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>verified_income</th>\n",
              "      <td>10000</td>\n",
              "      <td>3</td>\n",
              "      <td>4116</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>homeownership</th>\n",
              "      <td>10000</td>\n",
              "      <td>3</td>\n",
              "      <td>4789</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0933bf5e-2d92-4cf8-8bd7-993371fe7971')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0933bf5e-2d92-4cf8-8bd7-993371fe7971 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0933bf5e-2d92-4cf8-8bd7-993371fe7971');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-d9041c1f-5e90-4677-8644-1e290c574cc3\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d9041c1f-5e90-4677-8644-1e290c574cc3')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-d9041c1f-5e90-4677-8644-1e290c574cc3 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"summary_stats_cleaned\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"10000\",\n        \"max\": \"10000\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"10000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unique\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 3,\n        \"max\": 7,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"freq\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"3037\",\n        \"max\": \"4789\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"3037\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#(2.2a) Visualisation\n",
        "plt.figure(figsize=(8, 6))\n",
        "# (a) Histograms 1\n",
        "# 1. Distribution of interest rate\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.histplot(data=loans_cleaned, x=\"interest_rate\", kde=True, bins=44, color=\"darkblue\")\n",
        "plt.title(\"Distribution of Interest Rate\")\n",
        "plt.xlabel(\"Interest Rate (%)\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.grid(True)\n",
        "plt.savefig(\"Distribution of Intrest Rate\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 581
        },
        "id": "_vmcHayGXo7K",
        "outputId": "6b155dfb-7b16-4b96-9522-e61c7f6e41c4"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#(2.2) Visualisation\n",
        "plt.figure(figsize=(8, 6))\n",
        "# (a) Histograms 2\n",
        "# 2. Distribution of annual income\n",
        "sns.histplot(loans_cleaned[\"annual_income\"], kde=True, bins=44)\n",
        "plt.title(\"Distribution of Annual Income\")\n",
        "plt.xlabel(\"Annual Income\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.grid(True)\n",
        "plt.savefig(\"Distribution of Annual Income\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "CAb4Oiqcbt6L",
        "outputId": "c7b50ade-b972-4b31-c345-af3e7f5cd681"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#(2.2) Visualisation\n",
        "# (b) Scatterplot 1\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.scatterplot(\n",
        "    data=loans_cleaned,\n",
        "    x=\"annual_income\",\n",
        "    y=\"interest_rate\",\n",
        "    hue=\"annual_income\",  # Color points based on annual income\n",
        "    palette=\"coolwarm\",\n",
        "    alpha=0.6,\n",
        "    s=40\n",
        ")\n",
        "# Add titles and axis labels\n",
        "plt.title(\"Interest Rate vs. Annual Income\")\n",
        "plt.xlabel(\"Annual Income (£)\")\n",
        "plt.ylabel(\"Interest Rate (%)\")\n",
        "\n",
        "plt.xticks(ticks=[0, 500000, 1000000, 1500000, 2000000, 2300000])  # Max for annual income set to 2,300,000\n",
        "plt.yticks(ticks=[0, 5, 10, 15, 20, 25, 30])  # Max for interest rate set to 30\n",
        "# Improve readability\n",
        "plt.grid(True, linestyle=\"--\", alpha=0.5)\n",
        "plt.tight_layout()\n",
        "plt.savefig(\"Interest Rate Vs Annual Income\")\n",
        "# Display plot\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "-N3eruZpgRHc",
        "outputId": "361e94f6-d994-4b14-c3c3-d4fcf8e2e5bd"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#(2.2) Visualisation\n",
        "# (b) Scatterplot 2\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.lmplot(\n",
        "    data=loans_cleaned,\n",
        "    x=\"debt_to_income\",\n",
        "    y=\"interest_rate\",\n",
        "    height=6,\n",
        "    aspect=1.33,  # Gives 8x6 inches plot\n",
        "    scatter_kws={\n",
        "        \"color\": \"navy\",\n",
        "        \"alpha\": 0.4,\n",
        "        \"s\": 30\n",
        "    },\n",
        "    line_kws={\n",
        "        \"color\": \"red\",       # Regression line color\n",
        "        \"linewidth\": 2\n",
        "    },\n",
        "    ci=65\n",
        ")\n",
        "\n",
        "# Add titles and axis labels\n",
        "plt.title(\"Interest Rate vs. Debt-to-Income Ratio\")\n",
        "plt.xlabel(\"Debt-to-Income Ratio (%)\")\n",
        "plt.ylabel(\"Interest Rate (%)\")\n",
        "\n",
        "# Custom ticks\n",
        "plt.xticks(ticks=range(0, 500, 50))  # Setting ticks for x-axis (Debt-to-Income)\n",
        "plt.yticks(ticks=range(0, 35, 5))    # Setting ticks for y-axis (Interest Rate)\n",
        "# Grid & layout\n",
        "plt.grid(True, linestyle=\"--\", alpha=0.5)\n",
        "plt.tight_layout()\n",
        "\n",
        "# Save figure\n",
        "plt.savefig(\"Interest_Rate_vs_Debt_to_Income\")\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 624
        },
        "id": "I3itl1h0wCOe",
        "outputId": "33ecd6aa-41bd-46f5-868b-1a319b60d880"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 798x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAxQAAAJOCAYAAAAu4UG0AAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQABAABJREFUeJzs3Xl8VPW9P/7XOWfWzCSTnbAESEIAQTRABUXcrdQ9VsW6AbXWLmpra+vtaqu36s/b9ra9trXf3lpFvNYqolbU2ipoVariEgXDJiQQAkkmmWT27Zzz+f3xyUxmMp+sJLMk7+fjwUNzMsvnvGbJvOecz/sjMcYYCCGEEEIIIWQU5EwPgBBCCCGEEJK7qKAghBBCCCGEjBoVFIQQQgghhJBRo4KCEEIIIYQQMmpUUBBCCCGEEEJGjQoKQgghhBBCyKhRQUEIIYQQQggZNSooCCGEEEIIIaNGBQUhhBBCCCFk1KigIIQQkpV++tOfQpIkdHZ2ZnooJAfEni+EkPSjgoIQAgB45JFHIEkS3nvvvRFfNxAI4Kc//Slee+21sR/YGPv973+PRx55ZNiXlyQp6V9BQQHOOOMMvPDCC6Mew+OPP45f//rXo75+Nol9iIv9y8vLw8yZM3HxxRfj4YcfRjgcTss47r33Xjz77LPDvvyLL76In/70p+MyljPPPBPHH3/8uNx2Lom9p8T+GQwGTJ8+HevWrUNra+uobjOX3msImUyooCCEHLNAIIC77rorJ/7Ij7SgAIDPfvaz2LBhAx599FHccccd+PTTT3HxxRfj5ZdfHtUYJlJBEfPggw9iw4YNeOCBB3DjjTfC5XLhhhtuwLJly9DS0jLu9z+aguKuu+4avwGRuLvvvhsbNmzAH/7wB5x//vl47LHHcMYZZyAUCo34tgZ7r/nRj36EYDA4BiMmhIyUIdMDIISQgfj9fthstkwPA3PnzsV1110X//nyyy/HggUL8Jvf/AarVq3K4MiyxxVXXIHS0tL4z3feeSf+7//+D2vWrMGVV16Jt99+O4OjI5l0/vnn4zOf+QwA4MYbb0RpaSnuv/9+/O1vf8Pq1avH7H4MBgMMBvpYQ0gm0BEKQsiA1q1bB7vdjtbWVtTX18Nut6OsrAzf+c53oGkaAKC5uRllZWUAgLvuuit+ekPi6SS7d+/GFVdcgeLiYlgsFnzmM5/B3/72t6T7ip0e8frrr+PrX/86ysvLMWPGjPjvX3rpJZx22mmw2WzIz8/HhRdeiE8++STpNtra2vDFL34RM2bMgNlsxtSpU3HppZeiubkZADB79mx88skneP311+PjPPPMM0ecy3HHHYfS0lLs378/aftzzz2HCy+8ENOmTYPZbEZNTQ3+8z//M54VwE+HeeGFF3Dw4MH4GGbPnh3/fTgcxk9+8hPMmTMHZrMZlZWVuOOOO4Y8deiWW26B3W5HIBBI+d3VV1+NioqK+Djee+89rFq1CqWlpbBaraiqqsINN9ww4hyGcu211+LGG2/EO++8g3/+859Jv3vnnXfwuc99Dg6HA3l5eTjjjDPw1ltvCW+ns7MTq1evRkFBAUpKSvDNb34z6dttSZLg9/uxfv36eKbr1q0bcFzr1q3D7373u/h1Y/9i/H4/br/9dlRWVsJsNmPevHn4xS9+AcbYqLOQJAm33HILnn32WRx//PEwm81YuHAh/v73v6dctrW1FV/60pfiz6Oqqip87WtfQyQSiV/mwIEDuPLKK1FcXIy8vDycfPLJKafhvfbaa5AkCU8++STuuusuTJ8+Hfn5+bjiiivgdrsRDodx2223oby8HHa7HV/84heFz7PHHnsMS5cuhdVqRXFxMb7whS8c01Gn0047DQCSXj+RSAR33nknli5dCofDAZvNhtNOOw1bt26NX2ao9xrRHApVVfGf//mfqKmpgdlsxuzZs/GDH/wgbafiETJZUClPCBmUpmlYtWoVli9fjl/84hd45ZVX8Mtf/hI1NTX42te+hrKyMjz44IP42te+hssuuwyf//znAQAnnHACAOCTTz7BqaeeiunTp+N73/sebDYbnnzySdTX1+Ppp5/GZZddlnR/X//611FWVoY777wTfr8fALBhwwasXbsWq1atwv33349AIIAHH3wQK1euxIcffhj/QH755Zfjk08+wa233orZs2ejo6MD//znP3Ho0CHMnj0bv/71r3HrrbfCbrfjhz/8IQBgypQpI87E7Xaju7sbNTU1SdsfeeQR2O12fPvb34bdbseWLVtw5513wuPx4Oc//zkA4Ic//CHcbjcOHz6MX/3qVwAAu90OANB1HZdccgnefPNN3HTTTTjuuOOwY8cO/OpXv8LevXsHPaXnqquuwu9+9zu88MILuPLKK+PbA4EAnn/+eaxbtw6KoqCjowPnnXceysrK8L3vfQ+FhYVobm7Gpk2bRpzDcFx//fX44x//iH/84x/47Gc/CwDYsmULzj//fCxduhQ/+clPIMsyHn74YZx99tl44403sGzZsqTbWL16NWbPno377rsPb7/9Nv7nf/4H3d3dePTRRwHw58eNN96IZcuW4aabbgKAlMcm0Ve+8hUcOXIE//znP7Fhw4ak3zHGcMkll2Dr1q340pe+hLq6Orz88sv47ne/i9bW1vhjNhpvvvkmNm3ahK9//evIz8/H//zP/+Dyyy/HoUOHUFJSAgA4cuQIli1bhp6eHtx0002YP38+WltbsXHjRgQCAZhMJrS3t2PFihUIBAL4xje+gZKSEqxfvx6XXHIJNm7cmPKauu+++2C1WvG9730Pn376KR544AEYjUbIsozu7m789Kc/xdtvv41HHnkEVVVVuPPOO+PXveeee/DjH/8Yq1evxo033gin04kHHngAp59+Oj788EMUFhaOOIdYgV9UVBTf5vF48Kc//QlXX301vvzlL8Pr9eKhhx7CqlWr8O6776Kurm7I9xqRG2+8EevXr8cVV1yB22+/He+88w7uu+8+7Nq1C88888yIx04IGQAjhBDG2MMPP8wAsO3bt8e3rV27lgFgd999d9JlFy9ezJYuXRr/2el0MgDsJz/5ScrtnnPOOWzRokUsFArFt+m6zlasWMFqa2tT7n/lypVMVdX4dq/XywoLC9mXv/zlpNtta2tjDocjvr27u5sBYD//+c8H3c+FCxeyM844Y9DLJALAvvSlLzGn08k6OjrYe++9xz73uc8J7ysQCKRc/ytf+QrLy8tL2v8LL7yQzZo1K+WyGzZsYLIsszfeeCNp+x/+8AcGgL311lsDjlPXdTZ9+nR2+eWXJ21/8sknGQD2r3/9izHG2DPPPJPyOB+Ln/zkJwwAczqdwt/HHpfLLrssPs7a2lq2atUqput6/HKBQIBVVVWxz372sym3fckllyTd5te//nUGgH300UfxbTabja1du3bY47755puZ6E/gs88+ywCwn/3sZ0nbr7jiCiZJEvv000+HvO0zzjiDLVy4MGkbAGYymZKu/9FHHzEA7IEHHohvW7NmDZNlWfj4xPK67bbbGICk54nX62VVVVVs9uzZTNM0xhhjW7duZQDY8ccfzyKRSPyyV199NZMkiZ1//vlJt3/KKackPS+bm5uZoijsnnvuSbrcjh07mMFgSNneX+w1/corrzCn08laWlrYxo0bWVlZGTObzaylpSV+WVVVWTgcTrp+d3c3mzJlCrvhhhvi2wZ7r4k9X2IaGhoYAHbjjTcmXe473/kOA8C2bNky6PgJIcNHpzwRQob01a9+Nenn0047DQcOHBjyei6XC1u2bMHq1avh9XrR2dmJzs5OdHV1YdWqVdi3b19Kt5cvf/nLUBQl/vM///lP9PT04Oqrr45fv7OzE4qiYPny5fFTIqxWK0wmE1577TV0d3ePwV73eeihh1BWVoby8nJ85jOfwauvvoo77rgD3/72t5MuZ7Va4/8f29/TTjsNgUAAu3fvHvJ+nnrqKRx33HGYP39+0r6effbZAJB0+kd/kiThyiuvxIsvvgifzxff/te//hXTp0/HypUrASD+jfLmzZsRjUaHncFoxY6+eL1eAEBDQwP27duHa665Bl1dXfF99Pv9OOecc/Cvf/0Luq4n3cbNN9+c9POtt94KgE+sHmsvvvgiFEXBN77xjaTtt99+OxhjeOmll0Z92+eee27SkZMTTjgBBQUF8deSrut49tlncfHFF8fnHCSKnc7z4osvYtmyZfHHFOA533TTTWhubkZjY2PS9dasWQOj0Rj/efny5WCMpZzmtnz5crS0tEBVVQDApk2boOs6Vq9enfR8rKioQG1t7aDPx/77XVZWhsrKSlxxxRWw2Wz429/+lnRKo6IoMJlM8RxcLhdUVcVnPvMZfPDBB8O6n/5iz4/+r9Pbb78dAI6pUxshJBmd8kQIGZTFYomftxxTVFQ0rA/tn376KRhj+PGPf4wf//jHwst0dHRg+vTp8Z+rqqqSfr9v3z4AiH+o7q+goAAAYDabcf/99+P222/HlClTcPLJJ+Oiiy7CmjVrUFFRMeRYB3PppZfilltuQSQSwfbt23HvvfciEAhAlpO/k/nkk0/wox/9CFu2bIHH40n6ndvtHvJ+9u3bh127dqXkHdPR0THo9a+66ir8+te/xt/+9jdcc8018Pl8ePHFF/GVr3wl/mH0jDPOwOWXX4677roLv/rVr3DmmWeivr4e11xzDcxm85BjHKlYcZOfnw+g7/Fcu3btgNdxu91Jp8PU1tYm/b6mpgayLMdPnRlIJBKBy+VK2lZWVpZUsPZ38OBBTJs2LT7emOOOOy7+e4DvV2LhpijKgI9bzMyZM1O2Jb6WnE4nPB7PkC1nDx48iOXLl6dsTxxj4m30v1+HwwEAqKysTNmu6zrcbjdKSkqwb98+MMZS8o9JLFIG87vf/Q5z586F2+3Gn//8Z/zrX/8SPtfWr1+PX/7yl9i9e3dSsdv/PWG4Dh48CFmWMWfOnKTtFRUVKCwsjD+WhJBjRwUFIWRQg334Gkrsm+bvfOc7A3ZD6v/HPvFb/sTb2LBhg7AwSOzqctttt+Hiiy/Gs88+i5dffhk//vGPcd9992HLli1YvHjxqPdjxowZOPfccwEAF1xwAUpLS3HLLbfgrLPOip/H3dPTgzPOOAMFBQW4++67UVNTA4vFgg8++AD/8R//kfKtu4iu61i0aBH++7//W/j7/h8A+zv55JMxe/ZsPPnkk7jmmmvw/PPPIxgM4qqrropfRpIkbNy4EW+//Taef/55vPzyy7jhhhvwy1/+Em+//Xb8iMJY2blzJ4C+xzmWw89//nPU1dUJrzPUGIa7eNm2bdtw1llnJW1rampKmgQ/Wr/4xS+S2s7OmjVryAJnoNcSO4bJ3sMx0P0ONR5d1yFJEl566SXhZYf7XFm2bFn8iEt9fT1WrlyJa665Bnv27InfxmOPPYZ169ahvr4e3/3ud1FeXg5FUXDfffelND8YKVrsjpDxRwUFIeSYDfQHu7q6GgD/JjP2gXykYqeIlJeXD+s2ampqcPvtt+P222/Hvn37UFdXh1/+8pd47LHHBh3rSHzlK1/Br371K/zoRz/CZZddBkmS8Nprr6GrqwubNm3C6aefHr9sU1NTyvUHGkNNTQ0++ugjnHPOOaMe5+rVq/Gb3/wGHo8Hf/3rXzF79mycfPLJKZc7+eSTcfLJJ+Oee+7B448/jmuvvRZPPPEEbrzxxlHd70Bik55jBWXs8SwoKBj2c2Lfvn1J31J/+umn0HU9qTAQ5XXiiSemdJeKFaUD5Ttr1iy88sor8Hq9SUcpYqeszZo1CwA/jSjxlKP+hfBolJWVoaCgIF6EDWTWrFnYs2dPyvb+YzxWNTU1YIyhqqoKc+fOHZPbjBUJZ511Fn7729/ie9/7HgBg48aNqK6uxqZNm5Iem5/85CdJ1x/J62LWrFnQdR379u2LH70BgPb2dvT09IxZToQQahtLCBkDeXl5APi39InKy8tx5pln4v/9v/+Ho0ePplzP6XQOedurVq1CQUEB7r33XuE5/7HbCAQCKQtl1dTUID8/P6lFpM1mSxnnSBkMBtx+++3YtWsXnnvuOQB93/YmftsciUTw+9//PuX6NptNeArU6tWr0draiv/93/9N+V0wGIx3vRrMVVddhXA4jPXr1+Pvf/97Sp//7u7ulG/EY0cKEnPav3//MX8z/Pjjj+NPf/oTTjnlFJxzzjkAgKVLl6Kmpga/+MUvkk4ZihE9J2ItXmMeeOABAHx9gxjR41pUVIRzzz036Z/FYolfHkh9zl5wwQXQNA2//e1vk7b/6le/giRJ8fusrq5Out1TTz11qDiGJMsy6uvr8fzzzwtXrI89bhdccAHeffdd/Pvf/47/zu/3449//CNmz56NBQsWHPNYAODzn/88FEXBXXfdlfKcYYyhq6trVLd75plnYtmyZfj1r38df82KXj/vvPNO0j4CA7/XiFxwwQUAkLKIZOwI4IUXXjiq8RNCUtERCkLIMbNarViwYAH++te/Yu7cuSguLsbxxx+P448/Hr/73e+wcuVKLFq0CF/+8pdRXV2N9vZ2/Pvf/8bhw4fx0UcfDXrbBQUFePDBB3H99ddjyZIl+MIXvoCysjIcOnQIL7zwAk499VT89re/xd69e3HOOedg9erVWLBgAQwGA5555hm0t7fjC1/4Qvz2li5digcffBA/+9nPMGfOHJSXlw84P2Mw69atw5133on7778f9fX1WLFiBYqKirB27Vp84xvfgCRJ2LBhg/B0lqVLl+Kvf/0rvv3tb+Okk06C3W7HxRdfjOuvvx5PPvkkvvrVr2Lr1q049dRToWkadu/ejSeffBIvv/yycLJuoiVLlmDOnDn44Q9/iHA4nHS6E8DPU//973+Pyy67DDU1NfB6vfjf//1fFBQUxD+AAYgXAEOdxhOzceNG2O12RCIRtLa24uWXX8Zbb72FE088EU899VT8crIs409/+hPOP/98LFy4EF/84hcxffp0tLa2YuvWrSgoKMDzzz+fdNtNTU245JJL8LnPfQ7//ve/8dhjj+Gaa67BiSeemJTpK6+8gv/+7//GtGnTUFVVJZxnkHh5APjGN76BVatWQVEUfOELX8DFF1+Ms846Cz/84Q/R3NyME088Ef/4xz/w3HPP4bbbbhu0He1YuPfee/GPf/wDZ5xxRrx18NGjR/HUU0/hzTffRGFhIb73ve/hL3/5C84//3x84xvfQHFxMdavX4+mpiY8/fTTKXN7RqumpgY/+9nP8P3vfx/Nzc2or69Hfn4+mpqa8Mwzz+Cmm27Cd77znVHd9ne/+11ceeWVeOSRR/DVr34VF110ETZt2oTLLrsMF154IZqamvCHP/wBCxYsSCo8B3uv6e/EE0/E2rVr8cc//jF+SuK7776L9evXo76+PuV0OELIMchEaylCSPYZqG2szWZLuWz/9oyMMbZt2za2dOlSZjKZUto67t+/n61Zs4ZVVFQwo9HIpk+fzi666CK2cePGQe8/0datW9mqVauYw+FgFouF1dTUsHXr1rH33nuPMcZYZ2cnu/nmm9n8+fOZzWZjDoeDLV++nD355JNJt9PW1sYuvPBClp+fzwAM2UIWALv55puFv/vpT3/KALCtW7cyxhh766232Mknn8ysViubNm0au+OOO9jLL7+cdBnGGPP5fOyaa65hhYWFDEBSq85IJMLuv/9+tnDhQmY2m1lRURFbunQpu+uuu5jb7R50rDE//OEPGQA2Z86clN998MEH7Oqrr2YzZ85kZrOZlZeXs4suuiieY8ysWbOErW37iz0XYv8sFgubMWMGu+iii9if//znpHa5iT788EP2+c9/npWUlDCz2cxmzZrFVq9ezV599dWU225sbGRXXHEFy8/PZ0VFReyWW25hwWAw6fZ2797NTj/9dGa1WhmAIVvIqqrKbr31VlZWVsYkSUp6Pnu9Xvatb32LTZs2jRmNRlZbW8t+/vOfJ7W5HcxAbWNFz6NZs2aljPXgwYNszZo18faq1dXV7Oabb05qq7p//352xRVXsMLCQmaxWNiyZcvY5s2bk24n1jb2qaeeSto+0GttoBbATz/9NFu5ciWz2WzMZrOx+fPns5tvvpnt2bNn0BwGe01rmsZqampYTU0NU1WV6brO7r33XjZr1ixmNpvZ4sWL2ebNm9natWtTnocDvdeI3pei0Si76667WFVVFTMajayyspJ9//vfH/B5SQgZHYmxcZ4NRgghhBBCCJmwaA4FIYQQQgghZNSooCCEEEIIIYSMGhUUhBBCCCGEkFGjgoIQQgghhBAyalRQEEIIIYQQQkaNCgpCCCGEEELIqE34goIxBo/HI1xcihBCCCGEEHJsJnxB4fV64XA44PV6MzYGxhjC4TAVNf1QLqkoEzHKRYxyEaNcxCgXMcpFjHIRo1zEJnxBkQ10XUdTUxN0Xc/0ULIK5ZKKMhGjXMQoFzHKRYxyEaNcxCgXMcpFjAoKQgghhBBCyKhRQUEIIYQQQggZNSoo0kSWKWoRyiUVZSJGuYhRLmKUixjlIka5iFEuYpRLKolN8FklHo8HDocDbrcbBQUFmR4OIYQQQgghEwqVWGnAGIPP56OOAP1QLqkoEzHKRYxyEaNcxCgXMcpFjHIRo1zEqKBIA13XcfjwYeoI0A/lkooyEaNcxCgXMcpFjHIRo1zEKBcxykWMCgpCCCGEEELIqFFBQQghhBBCCBk1KijSQJIkmEwmSJKU6aFkFcolFWUiRrmIUS5ilIsY5SJGuYhRLmKUixh1eSKEEEIIIYSMGh2hSAPGGHp6eqgjQD+USyrKRIxyEaNcxCgXMcpFjHIRo1zEKBcxKijSQNd1tLW1UUeAfiiXVJSJGOUiRrmIUS5ilIsY5SJGuYhRLmJUUBBCCCGEEEJGjQoKQgghhBBCyKhRQZEGkiTBZrNRR4B+KJdUlIkY5SJGuYhRLmKUixjlIka5iFEuYtTliRBCCCGEEDJqdIQiDXRdR2dnJ03g6YdySUWZiFEuYpSLGOUiRrmIUS5ilIsY5SJGBUUaMMbQ2dlJLcb6oVxSUSZilIsY5SJGuYhRLmKUixjlIka5iFFBQQghhBBCCBk1KigIIYQQQgjJFpoGOJ1AOJzpkQybIdMDmAwkSYLD4aCOAP1QLqkoEzHKRYxyEaNcxCgXMcpFjHIRG9dcNA3o7gZ6egBdB/Lzx/4+xgl1eSKEEEIIISRTdJ0XEt3d/P9jZs4ELJbMjWsE6JSnNNB1HUePHqWOAP1QLqkoEzHKRYxyEaNcxCgXMcpFjHIRG9NcdB1wuYADB4CuruRiIsdQQZEGjDG43W7qCNAP5ZKKMhGjXMQoFzHKRYxyEaNcxCgXsTHJhTFeSDQ1AZ2dOV1IxNAcCkIIIYQQQsYbY3x+hMvF50tMIFRQEEIIIYQQMl4YA9xuXkioaqZHMy6ooEgDSZJQWlpKnRL6oVxSUSZilIsY5SJGuYhRLmKUixjlIjaiXBgDPB4+P2KCFhIx1OWJEEIIIYSQsRQrJKLR0d8GdXkiiXRdR0tLC3VK6IdySUWZiFEuYpSLGOUiRrmIUS5ilIvYkLl4vUBzM9DWdmzFRI6hU57SgDEGv99PnRL6oVxSUSZilIsY5SJGuYhRLmKUixjlIjZgLj4fPyKRQ6tbjyUqKAghhBBCCBkNv5+3fp2khUQMFRSEEEIIIYSMRCDAV7YOhTI9kqxABUUayLKMiooKyDJNWUlEuaSiTMQoFzHKRYxyEaNcxCgXMcpFTA6FUCFJkI8cAagDVhx1eSKEEEIIIWQwwSCfIxEIpO8+qcsTSaTrOg4cOECdEvqhXFJRJmKUixjlIka5iFEuYpSLGOXSKxQCWluBlhYgEIDOGA64XNAn9vfxI0anPKUBYwyRSIQ6JfRDuaSiTMQoFzHKRYxyEaNcxCgXsUmfSzjMJ1v7/UmbGWOIaBrPhU55iqOCghBCCCGEEACIRHgh4fNleiQ5hQoKQgghhBAyuUUifI6E15vpkeQkKijSQJZlzJgxgzol9EO5pKJMxCgXMcpFjHIRo1zEKBexSZNLNMoLCY9nWBeXJQkzHA7IdLpTEuryRAghhBBCJhdV7SsksvWjMHV5Iok0TcPevXuhaVqmh5JVKJdUlIkY5SJGuYhRLmKUixjlIjZhc1FVoKMDaGoC3O4RFxOarmNvZye0yd79qh865SlNJn3btQFQLqkoEzHKRYxyEaNcxCgXMcpFbELlommAywX09BzzEQlqGZuKCgpCCCGEEDIxaRrQ3c3/USEwbqigIIQQQgghE4uu9x2RmEhHWrIUTcpOg9jiMCaTCRJ1BYijXFJRJmKUixjlIka5iFEuYpSLWM7mout9RyTGoZCILWxnUpTxzyWHJmXTEYo0MRgoahHKJRVlIka5iFEuYpSLGOUiRrmI5VQuus6PRnR389OcxpFhorfSHQVKJA10Xce+ffsm1uSmMUC5pKJMxCgXMcpFjHIRo1zEKBexnMmFMV5ENDXxFa7HuZjQGcO+ri6amN1PDpWehBBCCCGEgBcSbjefJ6GqmR7NpEcFBSGEEEIIyQ2M8cXourqokMgiVFAQQgghhJDsFyskotFMj4T0Q12e0oAxBl3XIctybnVKGGeUSyrKRIxyEaNcxCgXMcpFjHIRy6pcvF5eSEQimR0HenNhDLIkUZenBDQpO01UOiwnRLmkokzEKBcxykWMchGjXMQoF7GM5+LzAQcPAkePZkUxEaNm+0T1DKCCIg10XUdTU1P2d0pIM8olFWUiRrmIUS5ilIsY5SJGuYhlNBe/nxcSR44A4XD6738QOmNo6u6mLk/90BwKQgghhBCSeX4/P7UpFMr0SMgIUUFBCCGEEEIyJxDghUQwmOmRkFGigiJNZFpVUYhySUWZiFEuYpSLGOUiRrmIUS5i455LMMgLiUBgfO9njMmZnqSehajLEyGEEEIISZ9QiBcSfn+mR5LdqMsTScQYg8/nwwSv3UaMcklFmYhRLmKUixjlIka5iFEuYuOSSzgMtLYChw7lbDHBGIMvEqHnSz9UUKSBrus4fPgwdZDoh3JJRZmIUS5ilIsY5SJGuYhRLmJjmks4zDs2HTyYs4VEjM4YDrvd1OWpH5pDQQghhBBCxl4kwk9t8nozPRIyzqigIIQQQgghYyca5YWEx5PpkZA0oYIiDSRJgslkyvzS9VmGcklFmYhRLmKUixjlIka5iFEuYqPKRVX7CokJekqQJEkwKQo9X/qhLk+EEEIIIWT0VBVwuQC3e8IWEhlBXZ5IIsYYenp6qCNAP5RLKspEjHIRo1zEKBcxykWMchEbVi6aBjidQFMT0NMzKYoJxhh6gkF6vvRDBUUa6LqOtrY26iDRD+WSijIRo1zEKBcxykWMchGjXMQGzUXTgM5OXkh0d0+KQiJGZwxtPl96ujzl0HOSCgpCCCGEEDI0Xe8rJFyunPrAm1N8PuCRR4Djjwc++ijToxkWmpRNCCGEEEIGpuv8lCYqIsbXoUPAhg3A00/3rdfxm98Af/5zZsc1DFRQpIEkSbDZbNQRoB/KJRVlIka5iFEuYpSLGOUiRrmISZIEW14epO5uPtla0zI9pKwgSRJsY9kVjDFg+3Zg/Xrg1VdTTx/r7OTbsvz5SV2eCCGEEEJIH8b6jkhQITE+IhHghRd4IbFrV/LvzGagvh644w5gyZKMDG+k6AhFGui6DpfLheLiYsgyTVuJoVxSUSZilIsY5SJGuYhRLmKUSwLG+NEIlwt6NApXIIDivDzIWf7teDrpjB1bLp2dwBNPAI8/ztfsSFReDlx3HbB6NVBUxNvG5ggqKNKAMYbOzk4UFRVleihZhXJJRZmIUS5ilIsY5SJGuYhRLuCFhMfDP+Cqau8mhs5AAEVWa9afbpNOo85l1y7g0UeB55/nK4knWrQIWLcOWLUKMBrHdLzpQgUFIYQQQshkFSsk+n/IJcdO04CtW/lpTe++m/w7RQHOOw9Yuxaoq8v5oo0KCkIIIYSQycbr5YVEJJLpkUw8Ph/v1LRhA9DSkvw7h4Of0nTttcDUqZkZ3ziggiINJEmCw+GgDhL9UC6pKBMxykWMchGjXMQoF7FJl4vPx8/jH6KQkCQJDotl8uQyTIPm0tLCi4iNG/vavsZUVfGjEZdeCuTlpWewaURdngghhBBCJjq/nxcS4XCmRzKxDNX2deVKXkisXAmMdNL/zJmAxTJ2Yx1Hk7ydQXrouo6jR4+Kl6+fxCiXVJSJGOUiRrmIUS5ilIvYhM/F7+cLprW2jqiY0BnDUa8X+sT+3nnE4rmEw8AzzwCXXQZcfz3wyit9xYTZDFx1FW8L+9BDwOmnj7yYyDF0ylMaMMbgdrtRXl6e6aFkFcolFWUiRrmIUS5ilIsY5SI2YXMJBPgciWBwVFdnjMEdCqHcZsv5CcNjiTmdMDz8MKTnnhu67eskQgUFIYQQQshEEQzyD7qBQKZHMrH0tn2Vn38eZaK2r2vXAp/7XM62fT1WVFAQQgghhOS6UIgXEv0nA5PRE7R9jR2rYYoCaQK1fT1WVFCkgSRJKC0tpU4J/VAuqSgTMcpFjHIRo1zEKBexnM8lHOaTrce4kJAkCaV5ebmby7EYpO0rKyhAsL4elnXrIE2fnqEBZh/q8kQIIYQQkmsiEV5I+HyZHsnEMVTb1zVrgPr69LV9pS5PJJGu62hpaZm4HSRGiXJJRZmIUS5ilIsY5SJGuYjlXC6RCHD0KNDcPK7FhM4YWtzuid/liTHgnXeAr38d+Oxn+elNicXEypXAH/8IvPgicM010K3WyZHLCNEpT2nAGIPf78cEPxg0YpRLKspEjHIRo1zEKBcxykUsZ3KJRvkcCY8nLXfHGIM/EuG5TMTTniIR3tZ1/Xo+4TqR2cwXoFuzBqitTfrVhM9llKigIIQQQgjJVqraV0hke9GTCzo7gb/8hf+jtq9jhgoKQgghhJBso6qAywW43VRIjIXetq94/nl+tCfRokXAunXAqlWTtu3rsaKCIg1kWUZFRQXkCb5K4khRLqkoEzHKRYxyEaNcxCgXsazLRdN4IdHTk9FCQpYkVNjtkHP5tB5B29c4RQHOO4+f1rR48bBPX5oQuYwD6vJECCGEEJJpmgZ0d/N/E/uj2fgbpO0rCgr4KU3XXgtMm5aZ8Q0XdXkiiXRdx4EDB3Kng0SaUC6pKBMxykWMchGjXMQoF7GM56Lr/Lz+piZ+ZCJLigmdMRxwuXKrm1FLC3DvvcDpp/P/JhYTVVXAT34CvP468N3vjrqYyMlc0oBOeUoDxhgisY4AJI5ySUWZiFEuYpSLGOUiRrmIZSwXXe87IpGFRR5jDBFNy/5uRowB27fz05pefTW1IDv1VL6a9WmnAWNwWlvO5JJmVFAQQgghhKQLY32FhKZlejS5a6i2r/X1wPXXp7R9JeODCgpCCCGEkPHGGJ9o7XJRIXEshmr7eu21wFVXUdvXNKOCIg1kWcaMGTOyp4NElqBcUlEmYpSLGOUiRrmIUS5i454LY7z1q8vFW8HmCFmSMMPhyJ5uRrt28aMRmzdntO1r1uWSJajLEyGEEELIWGOML0bX1ZVThURWGU7b17Vrgbq6iTmfgbo8kUSapmHv3r3Q6BBnEsolFWUiRrmIUS5ilIsY5SI2Lrl4PEBzM9DenrPFhKbr2NvZCS0TE8Z9PuCRR3jBcPPNycVEQQHwpS8Br7wC/PrXI1pDYixkNJcsRqc8pQm16ROjXFJRJmKUixjlIka5iFEuYmOWi9fLj0hEImNzexmW9taoLS187YiNGwG/P/l3VVV8Ebr6eiAvL73j6odaxqaigoIQQggh5Fj4fHyy8AQpJNKKMX4EYv16YMuW1LavK1fyQmKM2r6S8UEFBSGEEELIaPj9vJAIhzM9ktwTDve1fd29O/l3Fgtw6aW8kJgzJzPjIyNCk7LTILZojslkgjQRJw2NEuWSijIRo1zEKBcxykWMchEbVS5+Pz+1KRQa38FlUGwBN5OijO3zZbC2r1OmANddB1x5Zda2fR23XERyaFI2HaFIE4NhbKOORjXs2NGBhoY2OJ1+lJXZUFdXgUWLymE0KmN6X+NprHOZCCgTMcpFjHIRo1zEKBexYecSCPAPwcHg+A4oSxjG8hSjwdq+nnACb/t63nnj3vZ1LIxpLhMEJZIGuq5j3759YzbpKxrV8Oyzu7Fhw0dobHQiGFTR2OjEhg0f4dlndyMazY0OHmOdy0RAmYhRLmKUixjlIka5iA0rl2AQOHyY/5skxYTOGPZ1dR3bBGRN492Yrr+eT6Z+5pm+YkJRgPPPB554AnjqKeDCC3OimBiTXCYg+qoiB33wQRuefXY3VFVHNKrDbjdh+vR8RKMa/vCH9/HUU58gFFLh96uw2YyQJKCjw4+Wlh4EgxqsViMWLChFdXURfL4IurqCqKiw48wzqzB7dgH+8Y8DePvtw+jpCaGoyIKTT67EJZfMxeLFU4/56EfikZXOTh8qK1X4/fk44YSKnDqyQgghZBIIhfgpOoFApkeSW3w+3qnpscd456ZEBQXA6tV8Retp0zIzvlwgyzk1CZ0KihwTjWp45JEPsXt3J4qL82CxKDh61IsPPzwKxhj8/gh27FAhSbwtMy8sItA09G6T4HaHcPSoF1u3HkRRkQXz5pXi44/bsWVLMySJgTEgEtEhScDRo14cONCN998/gjVrTsQVVywY9Qf/2JGVbdtaoCgy8vONcDoD2L79Yxw40IP6+vlUVBBCCMm8cJgXEv1bl5LBtbQAjz4KPP10Vrd9zWpWKy+68vOpoCDjZ8eODuzY0YHS0jyUldkAAJoWRCikIhzWEAxGoevArFkOuFxBuFwhABIYY1AUCTabCZGIhlBIjRccus4wZYodbW0+uFxBOBwWTJuWD6NRhscTRldXEO+9dwS7d3fiz3/+EEajjM7OIFRVQ3GxFSefXImLL56HJUsGP8qwY0cHtm1rQWWlA3a7CQCDzcagqhZs29aCmppiLFkyNT1BEkIIIf2Fw3yOhM+X6ZHkDsaA7dv5/IhXX01t+3rqqXw1a2r7OjBF4UWEwwGYTJkezahQQZEGsiyjtrYW8hi8kBoa2mC3G5F4qmd3dxBGowKfL4pgUEV+vrn35wgYY9B1BlmWAEhQVR2a1ndlTWNoa/NC13XoOn8fCAajMBpluFwheL1hBINRRKM6/P4I2tt9ACRIEmAyKThyxDfsIxgNDW1QFLm3mOD8/gLY7YCiyGhoaJv0BcVYPlcmEspFjHIRo1zEKBcxWZZRO2sW5PZ2KiQSyJKE2pISyAN1MopE+tq+7tqV/DuzmR+JuP56oLZ23MeaTkPmMhI2Gy8ibLa0rvY9HqigSBNVVWEag6rT6fRj1qxC7N/fjXBYg9msIBTSYDDI0DQduq7DZjP23qcOSeJHJ/jfD15c6DqDJPHWZ5IEBIMqQiG193ISdJ3B74/C5wv3Xg5QFAmaxr91kCSG/HwzJElCYaEFqqqjvd2PzZv3Yt680gGLAqfTn1RM8NvSwRgvMpxOOrQMjN1zZaKhXMQoFzHKRYxy6ScaBTo7oXZ3w6QoOf+hbqypus5zSdTZySdSP/54atvX8vK+tq/FxekbaJoJcxkuk4kfjSgoACZQ1zX6miINdF1HU1PTmHTWKCuzwWYzoaamCN3dQXR0+KHrOjyeMDSNwWw2wGjkD6vBIMeLBn4EUoIs83+MobfYAKxWAywWAyRJih/NCASiACREozoYQ+/RC35bsixD0xgkSUIkosFoVBAKqejsDKChoW3Qsft8yauI5uXxb4N8vkj8FK7JbCyfKxMJ5SJGuYhRLmKUSwJVBdrbgeZm6G43mrq7qWtPPzpjybns2gV873vAmWcCDzyQXEwsWgT88pd8peuvfGVCFxMpuQyHJPECorISmD2b5zOBigmAjlDknLq6CuzY0Y45c4pRVmZDS4sbqqojEIiirCwPsiwhGtUQjWqw203weMKQZUBV+VEKg0GGrjNEo/wPiqJIqKjIh8NhxqFDbkgSYLUaEQqpUBQJwaAGgAHgBYQsS/GjFWazFL+faFSHprFBjzLExu7zRZKOVPh8EWiajrq6inFOjxBCyKSmqoDLBbjdqef6k1Sxtq8bNgDvvpv8O0Xh60asXQvU1dHRHRGLhZ/SlGMTrEeDCoocs2hROVasqIx3SqqqKkJJSR6sVgN0nb85fvqpC62tHkgSkJdngN8fgSQBus56jxD0HbWwWAyQZQnt7T4YDAqmTLGBMcDtDkFVWXy+hdnMnyq6zqBpDCYTP5phNhsQjfKOUIoiDXqUof/Y8/ONKCoK4vDhMFasmIlFi8rHPT9CCCGTkKbxQqKnhwqJ4fD5ID31FKrXr4dy9Gjy76jt6+AmwATr0aCCIk2GmgQnWvl63rxS7N/fha1bm9HW5kNFhR3nnluDiy6ag5qaYjQ0tKGtzYv8fBMWL65Ad3cYXm8Y+fkmeL0RdHYG0NMTgsGgIBCIQFV1yLKMggIzTjihHHPmFMPni8DpDKCoyIy6ugoYDBIOH/aiubkHHR1+WK284Cgvt6G93Q+3O4xoVIOi8LkZJpOCaFRDQYEZpaV58aMMA63kfeGFtfGxd3b6UFpqw6mn1tI6FAlowqQY5SJGuYhRLmKTLhdNA7q7+b9BCokxmWA7ESS0fZX9fiR9HK6q4pOsL7ts0rd9FT5fJtAE69GQGMtcqf7ggw/iwQcfRHNzMwBg4cKFuPPOO3H++ecDAEKhEG6//XY88cQTCIfDWLVqFX7/+99jypQpw74Pj8cDh8MBt9uNgoKC8diNY9Z/fQa73QSXK4A33mhBT08QxcVW5Oeb4PdHoao6zjprNn72s7NhNCop1/P5IohENEgSsHt3J/bu7UIopPU+txksFgPmzSuNd2QCMOBtGAwSwmEVhw550NHhh9Pph8sVit++yaTAbDYgL294t6lpOlasqKT1JgghhIwvXe87IkFzRgbHGD+daf16Pgei/8fClSv5+hHU9jXVBJ1gPRoZ3fsZM2bg//v//j/U1taCMYb169fj0ksvxYcffoiFCxfiW9/6Fl544QU89dRTcDgcuOWWW/D5z38eb731ViaHPWJ8wTk/bDYbJEHVmro+A9DS4kFHhw9mswFTpthRXGwFAHg8YWzd2oxnntmD444rTbkewAuJF1/cC0CCwSBj6lQrjEYFqsonb7e3++IdmQAIb8Pni6C5uQcrVszCiSdGsHNnO3p6wgiFVPh8YXR2BqFpGoqKUteh+OCDowPeZuJ6E0PlMhlRJmKUixjlIka5iE2KXHS974jEMAsJxhj80ShsRuPEzUUkHO5r+7p7d/LvLBawSy9F4OqrkTd//uTKZQgMgN9kgq28HNIkP1KTKKMFxcUXX5z08z333IMHH3wQb7/9NmbMmIGHHnoIjz/+OM4++2wAwMMPP4zjjjsOb7/9Nk4++eRMDHlUdF3H4cOHUVtbC0XQZky0PkNjoxMGgwKLxYDu7mC8oCgoMMNgkPHKK/sRDqsp1wOArq4AQiEN4bCKwkJr/GiAwSDDaJQRDmvo6urryCS6DbvdBJNJQTis4qablo5of0X7E7vNxPUmhsplMqJMxCgXMcpFjHIRm9C56Do/GtHdzU9zGslVGcNhtxu1JSVQJsMH585O4C9/4f/6t32dMoXPjVi9GrrDgZauLtQyNjlyGUrvBGs9Lw+H9+9HrdmMCfYqOiZZc3xG0zQ89dRT8Pv9OOWUU/D+++8jGo3i3HPPjV9m/vz5mDlzJv7973/nVEExFNH6DB5PGGazAoNBRiiU/OZosxnR1uYTXg8AvN4IZBnQND3eQjbGYJARjWpQ1b6OTKLbiG0fzdoQA43rWG6TEEIIScEYLyRcrhEXEpNOYyOfH7F5M19/I9EJJwDr1vGuTUa+lhWdKgbxBGt6ngllvKDYsWMHTjnlFIRCIdjtdjzzzDNYsGABGhoaYDKZUFhYmHT5KVOmoK1t4LUOwuEwwuFw/GePxwOAFyxa75OAtz+Voes6EqeQDLRdluXeNRrE27V+T67YpLdYr29N0+LX5StXJ79Iy8psaGzsAGCPbyssNOPwYS+MRhkFBcb4aYuMAX5/FNXVRSgry8OuXc6E60kAGBwOEyQJMJuVeJcmWUZvZycdRqMEozHWkYn1u42+2/H7w5g5swCapqXs00D7yvcnD42NneAHBpP5fJH4bcZy0XUdiqIM+/EYr8dpqO2KoqQ8frGxDLR9NPuk63p8rBNln471cYqNJfF3ub5PorGPdJ8AfrpG4u3n+j6NxeMUu65oLLm6T2PxOGmaFv87NNx9zdp9YgzweACXC3LvvvRfFyA2cbb/diU29t7tWsL9JG6Pj1GSoPfmNtrtsiTxfRpgu9b/OTbA2Ie7T/Gx6DrYli3A+vWQtm9Pug5TFLDzzgNbswaoq0sZu6br0HtvU+m9z6zYp94Fe8f1cbJawRwOPvm893kqAUmfXUb62QjI4tfTIGMf7tHMjBcU8+bNQ0NDA9xuNzZu3Ii1a9fi9ddfH/Xt3XfffbjrrrtStu/fvx92O//Q7HA4MHXqVLS3t8PtdscvU1paitLSUrS2tsLv7/sWvaKiAoWFhWhubkYk0rcw24wZM2C327F///6kJ0FVVRUMBgP27dsHgL9Bud1uMMYQiUTQ1NQUv6wsy6irq8Cnn7bBYHAhFNLQ0xPCvHkKPvzQj7w8M+bMMUNRumEyGRAIAD09IZSXy3C7W2EyBRAMRpGf74Cq5sFgCKK2FlCUAjDGsGdPEJ2dIZx6qgMOh4xw2ASjUUZnp4yDB3tgs/lgMgURDEZRUmJFOGyHphlgMPRgxowoZs5U8a9/fYDmZglOZxCVlSoqKuwoL7dBUWTU1tZCVdWkfaquZtixQ0coFERJSRSMMXg8ERw5EsDbb7tRUiLjX//6AGVlefB6PThy5AhmzZoFl8uFzs7O+O2k+3GKEe2TLMuYO3cu/H4/Dh8+HN9uMplQXV0Nt9udVOjabDZUVlaOeJ+OHDkCt9uN/fv3Q5KkCbFPY/E4ybKclMtE2KexeJxmz54NXdeTcsn1fRqLx6m4uBgmkwlHjhxBMBicEPs0Fo8TYyz+gebTTz/NzX2y2bD/k0+g+/3xb9CriopgkGXs63f6Tm1JCVRdR1N3d98+SRLmlpbCH43icO9YGGPwRSKQJAnuUAhtPl/fPplMqHQ44AoE0BkI9O2TxYKp+flo9/ngDoX69ikvD6U2G1o9HvgTxl5ht6PQakVzdzciCR/gZjgcsJtM2O9yJX1APtZ9kv1+FL/4IkqffhpSwmMHAHp+PuTVq9H9+c+jw+HgG7u6UvaJMQZ3KITuYBDldnvG9wkATIqC6uLi8XmcZBkV06ejcNo0NB86hMiRI337lPB60jQt/veourp6Qr1HAKnve/Pnz8dwZLTLk8i5556LmpoaXHXVVTjnnHPQ3d2ddJRi1qxZuO222/Ctb31LeH3REYrYAxLr8pRt39TpOrBx4yd4/PEdaGvzwueLoqcniI4O/ofQYJCgKDIABsYAu92Cq646DiUlVnz0UTsOH/Zg2rQCLFpUjp07O3D4sAeyLMHtDsLpDCIS0WG1KrBaDTCbDXA4LJgyxY5580qRn2/ERx+1o7XVgxkzCnDCCVMQCGjQdQ0nnTQdALB9eytkmc+J8Pt5t6ZTTqnExRfPhdlsTNmnaFTD88/vw7ZthyBJQGurF01N3WAMqKoqwowZBQBY/DZMJkNWVOFDbc/FbxZon2ifaJ9onybMPvl8kFwuaAl/44Ec++Z7vL/NP3gQ0mOPQdq0CZI/+fRiVlUFdv31QH09ZJstd/ZpPB8nAMxu56c0WSyT6/U00Y5Q9KfrOsLhMJYuXQqj0YhXX30Vl19+OQBgz549OHToEE455ZQBr282m2E2m1O2K4qSEkostP5Gun2gsGPbY0coHA4HJElKubyiADU1xSgosCAc1tDd3QOr1YS8vCgURUEopELqfYGaTAoMBgnBoI7p0wtRUVGAfftc2LGjA/v39yAQUHHGGVWori5Ea6sXH33Uhr17XfB6I5g61YETTiiHzxfB0qXT4HBYAABTp8Zuox09PRHU1VWgrq4CqqrhL3/ZicrKQkG3psOoqSnBkiVTUzJQFAX19fNRU1OM557bjdbWo6iqKkZtbQmmT8+Hosjxjk+VlRYsX14zpo/HaB+n4WwXPX6DbR/pGCVJirc6jn3jPNjlc2GfxuJxYozB6/Wm5DLQ5XNhn0a6XTT2/u8txzLGbNmnwbYPd4yMMfT09MDhcAivk4v7NNrtifeZ+HzJqX3yevnk4d5vV5WB9rXfa2Cw7ZIkxbfHvol3WCxJ25PGIknCtQXGavsx7RNjwDvvQFq/HsogbV+l006DlHA/Q40xMZe071OvgR6PY36ceidYywOsYD3Y60n0vptTr6dhjHGw7QPJaEHx/e9/H+effz5mzpwJr9eLxx9/HK+99hpefvllOBwOfOlLX8K3v/1tFBcXo6CgALfeeitOOeWUnJuQres62trakJ+fP+ADtHOnE1On8g/bjEk4cMAFk8mIggIzQiEVVqsBwWAUgASzWcGuXU4sXz4diiJj/vxSyLKErq4ATjyxAnPnlgDgRwOqqooAAHv3dmHBgjIAvINUrJgAkHQbCxaU4YYbFgMA/vznD4fVrUnEaFSwZMlUNDS04eSTZ8THlHgbBoOMpqYWnHRS1cTrODJKw3muTEaUixjlIka5iOVcLj4fLyT6HZEYazpjaPP5kG8251Y3o0ikr+3rrl3JvzObgfp6vhBdbe2obj5ncxlIbIJ1QQHPZ5Ry7nWUJhktKDo6OrBmzRocPXoUDocDJ5xwAl5++WV89rOfBQD86le/gizLuPzyy5MWtpuIYp2RDhzohsWiIBhUYTDEKl8J0ajW+6WDDpPJBI8n+Q3Wbjfhk086MGtWofD2E7srDbcD01h0axrqNgKBqPB3hBBCJim/n7c2HedCImcN1va1vBy47jpg9WqgqCgz48s2k3wF63TJaEHx0EMPDfp7i8WC3/3ud/jd736XphFlDu/05ITdbsLRoz5YrQb09PA3U01jsFoNUFUdgIxIRENpafJiKj5fBBUVdvh8EcGtx7or8clXjY3OIS+TOKbhXHao/RroNvLyxMUGIYSQScbv5x+QEybPkgS7dvGjEQO1fV27Fli1qq/t62RmNPIiglawThtKOQ0kSRpyZdK6ugrs2NGO0tI8tLZ6UVKSB5criHBYBWMMJpMCXWeIRjVEIiqOO64sfl2fj0+UPvfcGrz3Xit8vkjKnAdN01FXVwEA2LGjfcjLJI5pOJcdar8Guo0ZM0oHzWWyGc5zZTKiXMQoFzHKRSxrcwkEeCGR0JErnSRJgs1kyr5cAL7mwdatvJB4993k3ykKXzdi7Vpg8eIxv+uszkVEkoD8fF5IWK3jeDdZ+jrKMCoo0kCWZVRWVg56mUWLyrFiRSXeeOMg8vIM8HrDMJkUuN0hGI0yvF4pvtBdSYkV+flGHDnijX8wX7GiEhdeWAuTSca2bS3xuQ+Jv1+0qBwAsGJF5ZCXSRzTcC471H6Jb2MmTj55/oAThSaj4TxXJiPKRYxyEaNcxLIul2CQFxIJbT4zQZYkVDqGPuKeVj4fsHEjsGED0K/tKxwOfkrTtdcCU8XzGMdCVuYi0jvBGgNMsB5rWfc6yhJZ1zZ2rMU65rjd7njb2HTTdR0ulwvFxcWDfniORjXs2NGB9947gp072+FyBeF0BuD18tOYamuLcfbZ1Zgzpwh79nTB6fSjrMyGuroKLFpUDqNRid9GQ0Ob8PeJ9zPYZfqPaTiXHWq/+t/GwoWl8HrdQ+YymQz3uTLZUC5ilIsY5SKWNbmEQnweQIYLiRidMbgCARTn5cVbmGbMoUO8iHj6aX4KWKKqKmDNGj7ZOi9PePWxlFW59CdawTpNsuZ1lGWooEgDTdOwb98+1NbWUkeABJRLKspEjHIRo1zEKBexjOcSDvNCov8H5QzTdB37urpQW1IyYKvTccUYsH07P63p1VcHbPuK005LyzfwMRnPRSQLJlhn/HWUpeiUJ0IIIYSMn3CYn9qUsLIxAc8l1vZ19+7k31kswKWX8kJizpzMjC9bmEx97V5pgnXWokeGEEIIIWMvEuGFhNeb6ZFkl8Havk6Zwtu+Xnnl5G77mqYJ1mTsUEGRBpIkCVeynewol1SUiRjlIka5iFEuYmnLJRrlH5Q9nvG9nzEiSVJ8lexx1dgIPProwG1f163jXZuypO1r2nJJlOYJ1qNB7y9iNIciAxInX+/Y0QGfL4z8fBOOP34KPvOZaSkTqD/88Cj+9rc9eOutFhw54oXXG4GuM+TlGTFtWj5qa4tgNhvg8UTw6acuHDniQSAQhcmkYOrUfCxdOhUlJVbs3t2FPXs64fGEexfNk9DdHUQwqELXAaNRxvTpBbj++kX49rdPgcNhTRrvsUzMzlYTed8IISStVLWvkJjYHy2Gb6i2r6tW8bavdXUZGV5WyOAEazJ2qKBIA13X0d7ejilTpkDTGJ59djfeeOMQmpu70dERgKbpUBQZZWV5qKoqxGmnzUJ9/XwAwMaNjXj00Y+we3cnXK4g/P4odJ1BknjxLkkyDAYJdrsJwWAUfr8KgB8tjBXPZrMBsiwhHOa/Y4xBVQcer9ms4KyzZuGJJ65AXp4Jzz67e8DWsfX180f9wTsxl0x0SohGtXHbt9HKdCbZinIRo1zEKBexcctFVQGXC3C7c7KQ0BlDu8+HKXb72HUzGqzta0FBX9vXadPG5v7GwbjkkigLJliPBr2/iNEpT2nAGIPb7UZ5eTl27OjAtm0tMBhkBAIqKisdMJsVhEIqurtDMBgUbNvWgpqaYgDA5s170d7ug6YxMMYPtZnNcu/PDJIkQdMYenrC0HUdBoMc3y5JgKLw+5FlwGRSIEkSolENQPKbviT1/R2IRjW8+eZhPPDAdlxwQS22bWtBZaUjZWG62DiXLBldH+zEXDIh9liMx76NVqYzyVaUixjlIka5iI15LprGC4menpwsJGIYY3CHQigfiw+2WdT29ViNaS4xE2CCNb2/iOXmo5nDGhraoCgynE4/ZJkvVgcAFgs/itDZGUB5uQ0NDW0AgK6uAMJhDaqqIxrVIMsSFEWGqqpgjFfKsixDVTUwBhiNElSVFx+KIkPX+Zu8rgOA1Ht0IvWNnxcr/L+M8aLipZf2Ydq0/Pi394nsdhMURUZDQ1vaP3SPldhjMRH3jRBCxo2mAd3d/F8OFxJjhjF+OtP69cCWLVnT9jVryDJgt9ME6wmOCoo0czr9sNtNOHCgO15MxFgsCny+CKqri+B08m82VJVB1/nRCF1P/ZIg9r4V+2/fJCF+WpSq6gmXHf4bvyQBnZ2B+HhF7HZTfJy5aCLvGyGEjDld7zsioetDXnzCi0T4BGtR21ezua/ta21tZsaXaTkwwZqMHSoo0kCSJJSWlkKSJJSV2dDY6ER+vglHjyb35A6FNBQVWeHzRTBzJl/u3mCQIMsSJEmCLKe+h8fqh76jC7GiQYofpVBVLT6O/qc6DYQxoLQ0Lz5ekcRxjkZiLpkwnvs2WpnOJFtRLmKUixjlIjbqXHS974jEBCwkJElCaV7e8HMZqu3rtdfyORI53vZ1xLkAk2KCNb2/iFFBkQayLKO0tBQAUFdXgR072lFSkofWVi/CYS0+h0LXGUpL86BpOurqKgAAr756AB0dfhgMMoxGBcGgCk3T48UBnxDEYDDI0HUdmsYLBknip0Mpitw7BoAftZBgMEgppz0lzqGQJMBoVHD++bXx8fp8kZR5BonjPNZcMmE89220Mp1JtqJcxCgXMcpFbMS56Do/GtHdzU9zmqBkSUKpzTb0BXft4kcjcqTt67Eadi5Azk6wHg16fxGjgiINdF1Ha2srpk+fjkWLyrFiRSXeeOMQ8vIMaGlxJ3V5UlUNp502C4sW8ck+F100Fy5XEN3dod4P/QzhsB7v8sQYG6DLEz/lSdN05OUld3kSHaVIPBvKaFSwcuUM3HrrScjLM2HFisoBOyHFxnmsuWSiU0LssRiPfRutTGeSrSgXMcpFjHIRG3YujPFCwuWa0IVEjM4YWj0eTC8oSO1mNFTb1/PO44XEBGz7OmguwISYYD0a9P4iNnmeARnEGIPf7wdjDEajgvr6+aipKcZ77x3Bzp0d8HoHXofiiisWoKamCH/72x5s23YYra0eeL0RMMZgtaauQ7F/vwutrcnrUHzmM1NRXNy3DoXXG4aiDH8dith4Y2s1zJzpGJO1GhJzyYTEx2Ks9220Mp1JtqJcxCgXMcpFbMhcGOOtX10uDNpbfIJhjMEf4X9X49+uD9b21eHoa/s6deI27hDmQhOs6f1lAFRQZIDRqGDJkqnD6iBkNCpYtmwGli2bkYaRDTyG4Y4310zkfSOEkGFhjC9G19U1qQoJoQnU9nVM0QRrMgQqKAghhJDJKlZI9J8TMJkwhrwPPoD83HPitq+nnspXs55sbV8VhRcSs2ZN2qMRZPiooEgDWZZRUVFB59r1Q7mkokzEKBcxykWMchFLysXr5YVEJJLpYWVOJAK88ALk9esxc9eu5N9ZLH1tX+fMycz4MkGS+NEXhwNyXh4qPB7IFkumR5VV6P1FTGIT/CQwj8cDh8MBt9uNgoKCTA+HEEIIyRyfjxcS4XCmR5I5nZ3AE08Ajz8ubvt63XXAlVfmfNvXEZmkE6zJ2KHyKg10XceBAwegT8D+3ceCcklFmYhRLmKUixjlIuD3Q29uxoGdO6GHQpkeTWbs2gV8//vAmWcCDzyQVEyEFiyA/otfAK++Ctx00+QoJmSZFxCVlcDs2UBxcVIxQa8jMcpFjMrQNGCMIRLrlEDiKJdUlIkY5SJGuYhRLgkCAf7BORgE03VENC25a89EN1Tb11WroF1/PZorK1FbUjI55khYrbyQGGKCNb2OxCgXMSooCCGEkIkmGOSFRCCQ6ZFkxkjavup66qlPE80kWMGaZBYVFIQQQshEEQrxOQKTtZAYqu3r9dcDl102Odq+ShJfubqgYFKsYE0yiyZlp0FsERSbzQaJXtBxlEsqykSMchGjXMQmZS7hMP+W3ecb8CKMMfijUdiMxomVC2P8dKb168VtX1eu5N2aBmj7OuFyGaMJ1pPydTQMlIsYFRSEEEJIropE+BGJQQqJCau37SvWr+cTrhOZzXwBuuuvB2prMzK8tJJlPieioIDWjCAZMQlmH2WepmnYu3cvNE3L9FCyCuWSijIRo1zEKBexSZFLJAIcPQo0Nw+7mNB0HXs7O6Hleneazk7gt7/l3Zq+973kYqK8HPjWt4DXXwfuvntYxURO52K18la31dX8v2NYTEyK19EoUC5iNIciTai9mBjlkooyEaNcxCgXsQmbSzTKT23yeEZ1dT2XT0rYtYsfjdi8OXVl7xNO4KtZr1oFGI0jvumcysVg6DulaZwnWE/Y19ExolxSUUFBCCGEZDtV7SskcunD77EaRttXrF0L1NVlZHhpQxOsSZajgoIQQgjJVqoKuFyA2z25ConB2r4WFPS1fZ02LTPjSxeTibd6LSjgBRQhWYomZadBbBEUk8lEHQESUC6pKBMxykWMchGbELloGi8kenrGrJBgjCGiaTApSvbmMlTb17VrgUsvHdO2r1mXS5ZMsJ4Qr6NxQLmI0RGKNDEcQ+u2iYxySUWZiFEuYpSLWM7mout9hcQ4nKdtyMaVoIfT9nXtWv7fcRp/VuRitfKjEXZ71qzYnbOvo3FGuaSiRMZRNKphx44ONDQcBWOdkKRS1NVNxfz5Jdi9uwsNDW1wOv0oK7Ohrq4CNTWFeO65PXjqqUY0N/fAYJBRVGSBLMs4eLAbbncYsixj1qwCLF06HQsWlMLtDsPni6Cx0Yk9ezrh8URgMikoKjLD4bDAZjPB54ugtdWLnp4golEdjAGM8f8aDDIKCy2YOjUfRqOMtjY//P4I8vNNmDu3BCUleXC7wwCA0lIrysvtMJsVRKM6JAkwmxVUVOSjrq4CixaVw2hU+u178j4m7ntnpw+VlSrmzp2LE06oiF93MtN1Hfv27UNtbS0UOrwdR7mIUS5iOZmLrgPd3fzfOE341BnDvq4u1JaUQMmGb1bD4b62r7t3J//OYuFHItasAebMGddhZDSXNE6wHqmcfB2lAeUiRgXFOIlGNTz77G5s29YCg0FCTQ3D/v1ONDS0w2CQoKo6TCYD7HYTGhudeP/9IzhwoBu7dnUiGIxCUWS43SGEQip0nX9ZIUkSJAlwuYL4+OMOVFTYcfzxZXjnndb4h34AUFWGQ4cYDAbAYFAQCmmDHjF3uyM4eNADSeL3YzYb0NkZwKefdsNolDF9uh2yLKOnJwybzYgpU/IQiTBIElBdXYQZMwLYsaMdK1ZUor5+PgDE911R5Pg+NjQchcEgQ1UZTCYF+flGOJ0BbN/+MQ4c6EF9/XwqKgghkwtjfYXEZGlD2dkJ/OUv/F9XV/LvpkwBrrsOuPJKoKgoM+Mbb7EJ1g4HP3UrG4o7Qo4RFRTjZMeODmzb1oLKSgfsdiNsNg9qawuwe3cXtm5twllnVWHu3JL45V9//SDeeecwrFYjZsxwoKcnCLcbMBik+Id3u90ETdMRDKqwWAxob/fD748iGFRhMMi9Rx4Ag0EHIEHTdIRCWvzIqehvlSz3fRnGGC9aTCal9/K8mOnpicBuN6Giwo6enhCamtxYtGgKCgstcLlCmDevFMXFVmzb1oKammIASNj3vm9cdu/u7LfvDDYbg6pa4tddsmTqeDwchBCSXRjjpzW5XJOnkBiq7eu6dcB5542q7WtOoAnWZAKjgmKcNDS0xb+dB/oOD3R1BWAwyOjsDCRdvqmpG6rK4qch8SMOUvzvDGOAqvJP/pIkgTEGXWfo6QnCaDTAYFAQiahQVR0GgwKAIRJB7+Xl+HUHI0n8fgIBFbKM3kN5DH5/BEajAquVH1FQVR1+fwQVFXbIsoRDh9yYOdMBRZHR0NAGAAn73qezk+97V1fyvtvtpvh1qaAghExojPGOTS4X7+A00U32tq+xCdYOBz+Ni5AJigqKceJ0+pM+UPv9vMOU1xuBzWaEzxdJujyfH8ELBYAXD4rS9zNjgK7z/5ckQNMYZFlCNMpgMvH3rNgRCn70NPEQ6sDnO4lOhdJ1HZIkQ5L40QtdZ0hsBiZJEkIhXulYLEp8X+x2E5xOf/z/+/P5+L57vX37Hssl8bqTmSzLqK2thZwlE/KyBeUiRrmIZW0uHg8/xaf/t/NpIksSaktKIKfjFJvB2r46HH1tX6dm/kukccklCydYj1TWvo4yjHIRo4JinJSV2dDY6Iz/LEk6GJORn29CS4sbM2cmf+B2OMxoaWHxFmQGg4xgUO39mfXOb+C/YwxQFAnRaKzo4B/8JanvKENyESFhoKKi7/J9ZLmvmIjdb2JrNMYYLBZ+uDYU0lBUxNva+XwRzJzpAICkfY+x2/m+z5rVt++xXBKvO9mpqgpTlk3OywaUixjlIpZVuXi9vJCIRIa+7DhTdR2m8TzdJgNtX8fCmOSSxROsRyurXkdZhHJJRQXFOKmrq8COHe3w+SKw242wWr3YswdobfWiqakHXV1BvPtuK6xWA6ZOzYemMYTDGkKhAHp6QtB1hmhUi89v0HXA7+/7Vsvn47/gcyCiCAYRLwLUfofRBzvdKbGZCGP8yIfW73xeWQacTh+83mD8iMXu3Z3YvbsTAFBZWYDGRifa272w283IzzdB1xlaWz1QFAmBgIq8PAO6ukJoa/PBbOZv2jNnFmDePKCtzYyjR73IyzPi/vvfjHeESuwaNVnouo6mpibqHtEP5SJGuYhlTS4+H5+AnAWFBMC7GTV1d499N6MsaPt6LI4pl8QJ1jbb+AwwQ7LmdZRlKBcxKijGyaJF5VixohLbtrVAloHCQj/+/ncnnM4QVFXD0aNeyLIMi0XBp5+6EIlEoesSdJ1BVfVhr2MUOzoR+//xELt9v7+v0IhGw71/F2Q0NnaCMd65KRplcLmCCAaj2LvXhdLSPEyfno8jR7zweMKw200IhzU0Njrx6addkCQH3n+fzxfx+SKQZQmNjc6krlGTragghOQ4v58XEuHw0JfNZYO1fTWbgfr6tLR9zQiaYE1IEiooxonRqKC+fj5qaorx3HO74PV2o6QkD4GABkXhnZQCARUeTwiSJEGWld6jpRb4fBH4/dEhCwSTSYLRqMDvH9+JfbH5GbEvlhhD7yRtA8JhDeGwClmWYLEYUVqaB1XVEQ5rMJlkMMYQCqkwmRQcd1wZFEVCdXUxolEN3d1BBAJ8P886azYcjr4Jaz5fhDo/EUJySyDAC4lQKNMjGV+DtX0tL+dtX1evnnhtX2mCNSEDooJiHBmNCpYsmYqGhqPweILo6Ijg0CEvTCYDCgrMKCjg61X4/XzdCQCwWo2wWo1QlGB8bQk+hwG9nZ36bl/TGPLzjaMqKBRF6p1szX9OnEvRf16F1WrsPf2K9U5CYjCbDVAUGUYjoGm8Ta2uMwQC0d7bl2EwKMjLM8JoVFBZ6UB5uQ3t7X5EoxpWrpwJgKGpaT8ALamYACZ35yea6CVGuYhRLmJpzSUY5B+yg8H03ecoHdPE46Havq5dy7s25WDb10FziU2wzs+fdGtG0PuLGOWSigqKNHA6AwgGbfB4fL3f7vc9EWPtX/mkaT7ROra9DxugGxMvKkQTq4fS/z0x8Tb631as8OD/WHyieN/cjNhkcT7vA+DrZ8T2zeMJo6SET9xO7AoFSNi+feBTAiZj5ydFUTB37txMDyPrUC5ilItY2nIJhXghEQgMfdksoMgy5paWjuxKk6DtqzCXCTjBeqTo/UWMchGjgiINysrycOBAB+x2EyQJiEZ1WPnn697TnSRoGv9QHis2pKRP/H1HKBLxtSKkUc2d6H+dxJ/7FyixIyT8X6xjlASDQe4tgFjvGKX4fIdAQIXZLEOWJRQUmBEO80IjsSsUwFBUJMPrFe/AZOz8xBiD3++HzWbr9xyY3CgXMcpFbNxzCYd5IdG/i1GWY4zBH43CZjQOnctQbV+vvJKf2pQFbV+PVTwXkwmS3T4hJ1iPBr2/iFEuYlRQpMGJJ06B13sEwaAVeXlGtLf74PdHeheIiyISiSIS0aHrQEuLG7qefGqTrouPQmga0NU1ukPsmpZ8Y4m33f9+ErtLAbwwUBQVFosZwaAGVdV7F9vjgw4Go737x+dZFBUBBw50o6PDD5NJwYknluOdd1rxySdtWLTIgIYGD15//SBOOWU6TCb+lPT5ItA0HXV1FaPav1yl6zoOHz5M3SP6oVzEKBexccslEuGFhM83dreZRjpjOOx2D97NKEfbvh4L3WjE4UAAtXPnQpmkRyNE6P1FjHIRo4IiDRYuLMPBgwXYt88NTWPweiMIh9X4nIjErk6qKv62frw6OI1WMKghEglAkqT4yt1+fxShkAcGgwRZBiIRDU5nIH4U5sgRL/LyDHj22d1wu8MwmWScdNIUABL+8Y9PsXu3E6tW1SAS0aFpOlasqMSiReWZ3lVCyGQXifDJx15vpkcyPnK87euoJE6wNhqBffuoWxMhx4AKijQwGhXMm1eKYLAQu3Z1Iy/PgI4OP7q6AmAMvR2dYitkZ1nl0I8s9613YTIZYDbzCdcAcPBgDzSNoawsDxUVdrjdYRgMMgKBKObMKcbUqfnYsaMNn3zixPTpBZg7txhTp+bh5JPzcPCgB83NPThwoBvnnTdn0q5DQQjJItEoLyQ8nkyPZHxEInyCtajtq8XCj0RMtLavognW/dZeIoSMHBUUaSBJEqxWC8LhHixeXIG5c0vw5puHcPSoD/v3uxCN8iMU4bAaf3+TZal3sjafVxGJDLw4XTrwFbN5cRQrKCoq7L2Fgh0A/5kxxH8+etSHKVNs6Ojwo6wsD8uXT0djoxP5+WaUlFhRVGTtbdMuYeZMB4LBKKxWI264YXHmdjTDJEmCyWSi8zL7oVzEKBexY85FVfsKiWw7PHwMJEmCSVEgdXUBTzwhbvs6ZQqfG3HllROn7WtsgnXsaEQ/9DoSo1zEKBcxKijSQJZlVFdX46mn3oTdzs/P9PkisFgUhEK85WusjSuQ2oEptj3TElftVhQZoZAKs1mB18u7NsVWwI51cbJYlPj22GU8njDMZgNCIQ2MAfv39+2bzWZEW1tunps8VmLPFZKMchGjXMRGnYumAS4X0NMzoQqJGHn3blQP1vZ13TrgvPNysu1rihGsYE2vIzHKRYxyEaOCIg0YY3C73Sgry0NjYycA3hL16FEfLBYDPJ4wNI3Fj0owllxUyHKss1JmxU6dlWW+9oTFwhe2Ky7mXZuOHuVtcWNdnI4e9cHhQNJlCgrM6OoKxIuNwkL+txvgp35VVU2Qb8RGKfZccTgc9O1HAspFjHIRG3EuE7mQGE7b1zVrgMUT5MjwKFawpteRGOUiRrmIUUGRBrquo62tDSeeOAU7dnTE26G2tnpRWpoHp9Mf/4AeWzk6VkDIcqygyJy+DlNSfII1wFBYaIGus/gciqamHgCIt3ptbfXC4wknXaa6ugifftoFo1GBLAPTpknweBh6esJQVR3nnluT/h3MIrHnSn5+PnWPSEC5iFEuYsPORdeB7m7+T8/saaVjbpC2r8zhgLR6NXDttROi7euxrmBNryMxykWMchGjgiKNFi4sw4oVldi2rQUAUFxsgcsVgNVqgM8Xha7r8Q/vsTlijPFuSQYD/3uXib95fQveMaiqhrw8EwoLLdA0DXl5Bsgy4PNFkZ/PT+fy+yOw203IyzOgpcWNysoCyDKwd28XCgtNWLZsOlpbvdi7txPTphVg714PwmEdZ501G5ddNi/9O0gImVx0nR+N6O6eeBNyB2n7yqqq0H755Si7+moodnuGBjiGJvEK1oRkGyoo0shoVFBfPx81NcVoaGhDWVkeFiwoQySiYt++buzb1wWPJ4xQSO1dCI7BZjOhtrYYixdPhcsVxCuvHMDRo96Uv4EmkwJFYQiF9JQj9onvswaDhMJCC0pKLAiHdXR1hRAKRaGqOgwGGWazApOJFwl9R0r4UQmDQUZJSR7mzy/B6afPQlFRHvz+CLq7g5g9uwhf+MJCMCbhk0864HT6cfHF82CzmZIuU1dXgZqaQmze/Cm2bNkPozGChQvLcfbZNbjssnnIy6Me4ISQccIYLyRcrolVSAyn7euaNdBPPRU93d0oy+U1JIaYYE0IyQwqKNJAkqT4iopGo4wlS6ZiyZIJcJh5AMuXTx/yMtdeuwhXX70Qra2tmD59OuSJ0tv8GCU+V0gfykWMchFLyYUxwO3mhYSqZnZwYykcBl54YdhtXyXG+GrQufZ8GcEE69HdPL2ORCgXMcpFTGIsczPQ7rvvPmzatAm7d++G1WrFihUrcP/992PevL7TXs4880y8/vrrSdf7yle+gj/84Q/Dug+PxwOHwwG3242CgoIxHT8hhJAsxhhv/drVNbEKic5O3vJ1ord9HcUEa0JIZmT0CMXrr7+Om2++GSeddBJUVcUPfvADnHfeeWhsbIQt4VuIL3/5y7j77rvjP+fl2OFaXdfhcrlQXFxM38QnoFxSUSZilIsY5SKm6zpcLS0o1jTIE6mQaGwEHn104Lava9fyrk0DnAqkMwZXIIDivDzI2frt6jFOsB4Neh2JUS5ilItYRguKv//970k/P/LIIygvL8f777+P008/Pb49Ly8PFRUV6R7emGGMobOzE0W5/m3RGKNcUlEmYpSLGOUi4PWCOZ3oPHoURSUlff2uc9Vw2r6uXQvU1Q15U4wxdAYCKLJas28Sc14ePxKRgQnW9DoSo1zEKBexrJpD4Xa7AQDFxcVJ2//v//4Pjz32GCoqKnDxxRfjxz/+cU4cpQgEInjmmT3YsmU/pk2L4MiR3Tj77BpcdNEc7N/fg4aGNrS2enDokAetrW60tHjg9Ybg8UQQDPKJ0ooiw2BQYDTyP4pmswHTpuVj3rwi7N7djX37OhEKqdB1PuHabjfBbFYQjarw+1VEoyy+MJ6i8MXjDAYFPl8Eqqr3LlIXWwlbhqbp0DR+poCi8InkVqsB+flmFBVZ4XCYoSj8fqZMsUPXgY4OHyIRDVOm2DF3bgkKC83Ys8cFny+M/HwTjj9+Cj7zmWlYtKgcRiMdth6uaFTDjh0daGhog9PpR1mZDXV1FZQjISI+Hz/9JxyeGC1gB2n7CocDmAhtX2mCNSETRtYUFLqu47bbbsOpp56K448/Pr79mmuuwaxZszBt2jR8/PHH+I//+A/s2bMHmzZtEt5OOBxGOByO/+zxeAAAmqZB6+3qwddSkKHrOhKnkAy0XZZlSJI04HatX7cQWZYRCERw551b8PrrB2E2yygvL8Ann3Tggw+O4oknPsbs2Q4YDDLeffcI9u51IRDgbWNVte/2VZXnomkMsV3y+yNwOv346KO2+PoUfNwM0SiDxxNOmijEGF8oz2CQeq+vAlCh6yxehPDLAZrG4sVEbLuq6vB6I+jpCaOlxQOLRUFengEGgwxV1RGJMFitCsrKbDhwwIV//vNT2GxGFBbmQZIAk0nGwYM9+OSTNqxcOQv19cfBYJB790uDruvQdR2Kogz78RjLxwngGQ9nu6IoYIwlbY+NZaDto9knXdcRDkfwwgv7sW1bCxRFQX6+Ebt2dWDnzjacckolLr10PkwmQ87s07E+TrGxJP4u1/dJNPaR7hPAX+OJt5/r+zTixykYhO50goVC8e1672V0xpKKC1nia+nojCXvU+92rf/YezPWEy472HYlNvb+Y5SkAbf3H4vU0gL5scfAnn4aUr+2r6iqgr52LdjFF/Nv9AHIjA17n7Te/Bhjw97XMdmnxO0AYLcDBQWQbLa+x7Xfazudzz1N0+L3M9HeI47lfW+ov9G5uE9DbR/OPsVy0TRtwuzTYGMf7lobWVNQ3Hzzzdi5cyfefPPNpO033XRT/P8XLVqEqVOn4pxzzsH+/ftRU5O6CNp9992Hu+66K2X7/v37Ye/tu+1wODB16lS0t7fHj4oAQGlpKUpLS9Ha2gp/wht5RUUFCgsL0dzcjEgkEt8+Y8YM2O127N+/P+lJUFVVhWef3QNd78KFF5bCYlFgtwPz5pWirc2D8vIQpk7Ng8EgY/58GS0tRthswKmnOuJ/+9xuFS+91InZs61YtswRv+2Ojgi2bnVh4UI7jj++r4/4/v0BbN/uwZIlBaip6Tt6s3OnDzt3+rByZSEqKszx7e++68aBA0F89rMlcDj6ngavveZCW1sEl15aFj8qAgAvvdSJUEhDfX0ZjEYFJpOCYDCKl15yobLSjpNOit2nBLc7jE8/lbB4cQmmT2cIhVRMmcLQ3HwQO3aUoLraira2NjDG4Pf7ceTIEcyaNQsulwudnZ3x+0zH42QwGLBv376k50ptbS1UVUVTU1N8myzLmDt3Lvx+Pw4nfFtoMplQXV0Nt9uNtra2+HabzYbKysoR79ORI0fg9/vx9ts7cORIB2pqCmAy2WC1+iDLRkQiGo4cacaHH9qwfHlVTuzTWDxOsizD7/dj//798Q/Sub5PY/E4zZ49G0ajMSmXXN+nYT9O0SgcAKaazWj3euFOKCiKrVY4LBYc8XoRTJhrUGG3o9BqRXN3NyIJf0RnOBywm0zY73IlfUCuKiqCQZaxr9/E59qSEqi6jqbu7r59kiTMLS2FPxrF4YR8TYqC6uJiuEMhtPl8fftkMqHS4YArEECn34+8Dz9E0VNPwf7mmwBjSDzpx7dsGbTrr4fj3HPR6vXCHwwCweCI94n1dnliAD4d730KBOLbHRYLppaWoj0ahTsSAbxewOvNmuceYwzhMP8ybqK9RxzL+17sb3R3dzfKy8snxD6NxeOkaVr871F1dfWE2KfBHqf58+djODLa5SnmlltuwXPPPYd//etfqKqqGvSyfr8fdrsdf//737Fq1aqU34uOUMQekFiXp3RUdzfc8Bx27erA3Lml8e26Duzf70JLixtVVYUAgCNHvL2nOKkIh5MnD6oqS1kpW5aBSCR1O/82IXb6Ut/2/kcihtquaclHNBK3SxJgMMgwmWQoitx7SpaC0lIrolE+drPZgK6uIAoLrVixohKyDLS3+zF1qh1lZXk47rhyfPGLdVlZhQ+1PZ3fLKxf/xF27XKitrYEAF+ZPGbfvi4cd1wZbrhhSU7tU+JYJsrjRPuUgX0KBvmpTYHA8L4RF3xrnzVHKCIR6Js3Q3r0UUj92r4yiwXs0kvBrrsOmDMnd/YpcSwyn2AtORyQ8/Jy/7k3EV9PtE+0TxPhCAVjDLfeeiueeeYZvPbaa0MWEwDQ0NAAAJg6wHmjZrMZZrM5ZbuiKCmhxELrb6TbRWG3tflgsRih63x+QkUF0NYGhEIqFEVBd3c4ft1oVIcsS0mnO8XoOv/w3zcG8fYY/rxI3S667ZFulyReWESjDNGoBkWRATBEIn2najGmQ5IkhEJqfJwmkwKPJ4LZs4vgdPohSVL88Gl7ezumTJnSu29j83iM5HEa6fbY2Ie7faRjBICODr4woM1mBuLfU/YVeDabGU5nYMRjH2j7eO/TWDxOuq6jo6MDU6ZMSbleru7TSLeLxp74Gup/37m6TwNuD4Ugd3YCsW++E8YlS1LSRF6dMRz1ejHFbociGH//y8fHONC+Ci470HZJkobentD2VR6g7at05ZWQBJM+Bxr7cPZJZwxtPt+AuRzTPiWOxWYTTrDO1ude/9fRRHqPGGz7UGM81r/R2bhPx7q9/2eX2Be4ub5PI9k+kIwWFDfffDMef/xxPPfcc8jPz48f6nE4HLBardi/fz8ef/xxXHDBBSgpKcHHH3+Mb33rWzj99NNxwgknZHLoQ6qosGPnzg4A/P20qEhCezuDxWJAOKxi+vR8APwIhdEoIxDIjdaGjPH9iR2hMBgMMBr5ZG4AMBplRKN60mlUoZCGoiIrfL4IZs50JNwWg9vtRnl5edr3I1vFMikrs6GxsVN4mf45Tgb0XBGbFLmEw/yIRMKpNUNhjMEdCqHcZsuubka7dvFuTQO1fV23DjjvvHGboDyuueTwBOtJ8ToaBcpFjHIRy2hB8eCDDwLgi9clevjhh7Fu3TqYTCa88sor+PWvfw2/34/Kykpcfvnl+NGPfpSB0Y7MuefWoKGhDR5PGIWFfUdMjEYFmqajqqoIFosBLS1uWK1G+HwRGAzioxSJJEmCJPHTktJNknhBYTQqsNlMcLmCABjMZiXpMBpjQGkpn1PBO1AxlJbmQdN01NXlbvvfdDrxxCnYsaMDPl8Edrspvt3ni1COZHKIRHgh4fVmeiTHZgzbvmYdSYpPsB6PFawJIbkj46c8DaaysjJllexccdll8/D++63YurUZHR0ypk0rwN69HoRCGpYtm46iIjMMBhnTpxdg/35X0ryHweg6i3+wT7fYnAtZBqJRFVarAl0HuroCKCmxIRxW4fWGUVpqha4z7NnTCUWRUVaWB1XVcNpps7BoEVX0w7FwYRlWrKjs7fIkw243xYuJFSsqKUcycUWjvJDo7dCXs2JtXx97DGhpSf5drrd9NZt5EUErWBNCemXFpOzx5PF44HA44Ha745Oy0yW2DsWrr+6HJAXBmBXnnJO8DsWRIx4cPMjXoTh82AOPZ+h1KKZPz8fcudm9DsXevS54vYOvQ6HrtNpkf4mZaBqjdSh60XNFbELloqp9hcQx/lnK6IrQhw7xtSOefhoQtH3F2rXApZfG276m0zHlIst9RUSaVrBOlwn1OhpDlIsY5SJGBQUhhJDMUVXA5QLc7swceh0LjPHTmdavB7ZsSd2PlSt5IbFyZdJk8pyQwRWsCSG5I8fe2XKTrutoaWlJaR822VEuqSgTMcpFLKdz0TTA6QSamoCenjEtJnTG0OJ2p7RAHXPhMLBpE1BfD6xZA7z6at9+WCzAVVcBL7wAPPQQcPrpGS8mhp2LwQAUF/MjKjNm8IJiAhcTOf06GkeUixjlIpY1C9tNZLHFYSb4waARo1xSUSZilItYTuai6/yIRE9P0irWY4kxBn8kwnMZjw/CTifwxBO89esAbV9x5ZWAoO1rJg2ayySeYJ2Tr6M0oFzEKBcxKigyIBrV4ufGt7V5EQioOHLEjY8/dqKjwwdd5+1lTSYDDAY+r0FRZOTlGTF3bgnOPbcKU6bY8fvfv4d33jkMtzsEgPWuC9HX2lWW+cJGBoMMo1HufRFEEQqp6LeOCYxGwGg0oLDQjClT8mE2K+jpCUHTdESjDJGIBlXVYDQqKCgwo6rKAZPJgGhUQzSqY9q0fJx7bg0uu2we8vJMSfs42c//J4Oj58okoetAdzf/l6vf7DU2Ao8+Km77umgRb/u6alVutU01m/kk8fx8mmBNCBk1KijSLBrV8Oyzu7FtG+/60dLixnvvHUVHhx+qqkOSEJ8sDcTe3yUoigSbzYj2dh9ee60JPT1BBINqfAI1N/o/0tEo79zEixs/JAkwGiVEo30tamPrJrW1+Xo7U/FJ4tOm5aOzM4CGhja8/34rfvKTM/CPfxxI6lDU2OjEjh3tWLGiEvX18+mDIgGQ/Hqg58oExRg/GuFyIeWbjFwwEdu+yjJQWDghJ1gTQjKDCoo0kGUZFRUVkGUZH33Uhm3bWlBZ6YDLFcShQ574Wg0GAz+KIMsSYqtdaxpgscjxow/hsAavNwy/X4WiSFAUvnr1WB95YwzQ9b5xxI6OK4oMSQIiER12uxFmswHBoIqqqiIYDDK2bm1GcXEeuroCqKx0pKyhsG1bC2pqirFkydSkXAg32TLZsaMj/nqg58rIZXUujPGJ1i4Xn3idRrIkocJuP7YOT7G2rxs2AIcPJ/8uR9u+yjYbKgoKIFdUZHw+RzbJ6tdRBlEuYpSLGBUUaSBJEgoLCwEADQ1t8W9iGxra4PdHEAqpUBQZuq5DVfX4dTSNf5jnLVxlaBo/ZSkcVns/8PNCYrxO41NVHbLMiwld71vYLtaGNhrVYLebEQ5r6O4OoqamGAaDjJde2odTTqlM+oAIAHa7CYoio6GhDUuWTE3KhXCTLZPE10Mieq4MT1bmwhhv/drVlfZCIkaSJBRaraO78mBtX6urgeuv55OwM9D2dVQMBl4AFRRAMhpRmOnxZKGsfB1lAcpFjHIRo/IqDXRdx4EDB6DrOpxOf/zDk88Xga7zIwyKIiUVB7Ev1viHeQZZjn2Y15M+3I830Rd8jPHF9frGrSMU4h8cbDYjOjsDKR8QY+x2E5xO/kc6MRfCTbZMEl8P/dFzZWhZl4vHAzQ3A+3tGSsmAN7N6IDLNfwuT4wBb78NfO1rwHnn8XkSicXEypXA//4v79h0zTXZX0xIEp8TMX06L4JKSgCjMfueL1mCchGjXMQoF7ERHaHYtWsXnnjiCbzxxhs4ePAgAoEAysrKsHjxYqxatQqXX345zGbzeI01ZzHGEOntrFFWZkNjoxMA/8Aky4CiSIhG9fgcBX6dvv/KshQvIiRJhizzU6FiRcb4jj11myRJ0HVeTGgagyTJsFj4U8nvj6K0NA8+X0R4ez5fBDNnOnpvuy8Xwk22TBJfD/3Rc2VoWZOL18uPSETEr/t0Y4whomlDd3kKh3mRsH49sHt38u8sFr4A3Zo1wJw54zvgsTLEBOuseb5kGcpFjHIRo1zEhlVQfPDBB7jjjjvw5ptv4tRTT8Xy5ctx2WWXwWq1wuVyYefOnfjhD3+IW2+9FXfccQduu+02KiwGUFdXgR072uMflnbv7oTFYkAoFIIs845Mqqr3zqXoO9VI03SYTDIsFmPvqVHR3rkW4zOHAkC8w1Ti3+RY9yhNYzAaFWiajrw8I4qKrPB4wlBVHZdeOh9dXQH4fJGU8+I1TUddXcXYD5bkpMTXAz1XcpDPxwuJcDjTIxmZzk7e8nWgtq/XXsvnSGRZ21eh2ArWDgcvKAghJAOGVVBcfvnl+O53v4uNGzcOet7Yv//9b/zmN7/BL3/5S/zgBz8YqzFOKIsWlWPFisp4l6eZMwvQ0eGHLEvxLk+6zpK6PEWjOnSdwWSSYTYrMBgskCQm6PI0dnjhwOJNWWJFhabpkCQJJpOMaFSDLEsoKbGivZ23uz3rrNm49daTUro8xT4grlhRiUWLysd+wCQnJb4e6LmSQ/x+/kE8FMr0SEZmsLavJ5zA276ed15utH3Ny+NFhN0+oRedI4TkBokN45hNNBqFcQRvsCO9/HjyeDxwOBxwu90oKCjIyBhii6DYbDZIkjToOhROpw+a1rcOhdHIj1goigybzYja2uR1KN599zB6evrWoUicQH0s61BYLHwdClVNXYfC4TBj9uxCmEzKMa1D0T8XMjkzoefK6KU9l0CAFxLB4Pjf1zFgjMEfjcJmNELS9YnT9jVhgvVoih56HYlRLmKUixjlIjasgiKXZUNBQQghOS0Y5IVEIJDpkQzfYG1fCwr4StbXXQdMm5aZ8Q1XbAVrhyP7J4MTQiatUXd5Onr0KK644gqUlZWhuLgYF198MQ4cODCWY5swNE3D3r17oeXiok7jiHJJRZmIUS5i455LKAS0tgItLblTTBw6BP1nP4N22mnAffclFxNVVcBPfwq8/jpwxx3ZXUyYzUB5Oe/SNHXqmBQT9DoSo1zEKBcxykVs1OtQ3HDDDVi+fDnuvvtuRCIR/Pa3v8U111yDt99+eyzHN2FQezExyiUVZSJGuYiNSy7hMJ+43H8dhmzFGD+daf16YMsWyP0PvK9cyU9rWrkyuxd0UxTeoWkcJ1jT60iMchGjXMQol1TDLii++c1v4t5774XNZgMAfPrpp9i0aROsvYsHffOb38Tpp58+PqMkhBAy/iIRXkj4fJkeyfAM0vZVN5uB+nrIudD2lSZYE0Jy3LALihkzZmDp0qX4r//6L1xyySW46qqrsHz5clxwwQWIRqPYtGkTrr322vEca06KRjV8/HEbdu8+gv/5n73YubMTTmcAsiyhpqYIl1++EFdeeRwA4Jln9uCVV/ajrc2HsjIbqqocaGpy4913D6OrKwhFkVFUZEFxsRUGgxyf4N3dHURXVwiRiApZlpCfb0RlZSGKi62IRnV0dPjQ0eFHIKAC0CHLcrz1q64DRqMMq1WG2WxEebkNCxeWY/HiqfjMZ6Zh0aJyRKMaNm5sxFNPNaK5uQcmk4LFiyuwfHklDh7sxu7dvO3iwoVluOCCuViypCI+mXYomqajoaENH33UMeCE3P55DjWBlxAyQpEInyPh9WZ6JMPjdAJPPDFg21f92mvx6TnnoKa6OnuPSBiNfe1eDaM+WYAQQrLCiCZlNzU14etf/zqsViseeOABfPDBB3jttdegaRpOPfVUXHHFFVk34z2Tk7KjUQ3PPrsbb7zRjJaWHrzzzhH09EQgy4DZbIh3bjr//DmQZQlvvdUCg0GG1WpES4sbbW0+qKoGSeIdmmLtZGUZMJkUSBIQiejQtNSHUJbRu2geXytCVQd/mCWJH203GBQ4HBYsWTIVc+YU46STpuGddw7jhRf2IRCIwmRSoKo6/P4IAAnFxVZUVNghyxLCYRUVFXZcd90JuOKKBUN+wI9EVDz33CfYtu0IFEVJaRlaXz8/6TZieQ7UYrT/5XNRbMEck8mUda+lTKJcxI45l2iUfyD3eMZ+cONhmG1fmcGAiKbBpCjZ9XyJrWBdUJCRCdb0OhKjXMQoFzHKRWxEX4tUVVXhpZdewv/93//hjDPOwDe/+U384he/oEAHsGNHB7Zta4HBoGD//h4EAhqKiiwwGBREIioKCy0IhzU888wemM0yTjihAgUFZrhcQYTDGjRN6z2CIMFkMiAU4kcYAEBV+X8ZY0mLzvH/50cfZJkfwdB1wGSSoesspbDg7WVjK2/LyM83IxRSceiQG/Pnl+Lxx3dg165OyLKEGTMcMBhk+P0RBIMqAoEIQiEDioutKC62IhRS0dHhx+bNezFvXimWLJk6ZD7//vcRVFY6YLf3nS/s80WwbVsLamqKk24jlie/vGnIy+cqA31bKUS5iI0qF1XtKySyvdGfpg3d9nXNGmDx4r7tjMGQTUcmLJa+FawzPC56HYlRLmKUixjlkmrE72xdXV249tprsX37dnz44Yc45ZRT8PHHH4/H2HJeQ0MbFEWGyxXE8uVWmM0KTCZD7wrXEsJhDWazAV5vCF5vFAUF/EO1yxVEIBCFJClgDL2nJrHe4kHqt43fV+y/kiTFj1gkLpAHQHgkg1+PVySqyhfQi425qyuAlhY3vN4ILBYDDAb+dAkEor0recsIhVR0d/Oe9BaLAWazAZ2dATQ0tA2Zz0cftWH2bD2pOAAAu90ERZFTbiOW53Avn4t0Xce+fftowlc/lIvYiHNRVaCjA2hqAtzu7C4mfD7gkUf4QnM335xcTDgcwJe/DLz6KvCrXyUXEwB0xrCvqwt6JvdPUfhK27NnAzNn8jFnuJig15EY5SJGuYhRLmLDLrFeffVVXHPNNXA6nZg2bRqeeuop/PnPf8bWrVtx9dVX48ILL8Rdd90Vn6RNAKfTD7vdhObm7t7TZPuO5CiKhGhUh90u96523ffE5Ecn+B9CSeK/03U5/nNMbAG7RPxoEeu9Xt92xgb/7BC7vKbxFblVVYfXG0EopIExFi8mAH7qEWMMisKLl1Cor3WaxaIgGFThdA7dHaaz04+CAvEpSna7KeU2YnkO9/KEkF6aBrhcQE9PdhcRAHDoEF874umnU7tMVVfzoxGXXpqdazJIEmCz8VOabDaaYE0ImTSG/XXJzTffjDvuuAOBQAC//e1vcdtttwEAzjrrLHzwwQcwGo2oy4WVRtOorMwGny8Cu90EWUbS6UaaxmA0yohGdSgKIEl9D4XZrEBR+B8ixvjv+FGN5M8Coi+7YlNi+PX6tvedDiUWu7yiSFBVXkDk55tgsfBzkGOnWAGA0ajEj4QoigSLpa8oCIU0KIqEsjLbkPmUltoQiYj7OPt8kZTbiOU53MsTMulpGu/a1NQEdHdnbzHBGPDOO8DXv86PSDz6aHIxsXIl8Mc/8o5OV1+dfcWEyQSUlfGCZ9o06tZECJl0hl1QHD16FBdeeCEsFgs+97nPwel0xn9nNptxzz33YNOmTeMyyFxVV1cBTdNRUmKF1WqEpumIRFToOgPAYDYrCIdV5OdbkJ9vhMcTBgAUF1uRl2cEY1r8Q74sS72nO7F+2/h9xf4bO3IAALIsJRUdse2J+PX4hwyDIdb9SUdxsRUlJXmorHQgP9+EUEiNFxV5eUZIkgRd12GxGFBUxI9KhUIqwmEVpaV5qKurGDKfE0+cAsZYSpEQm2jd/zZieQ738oRMWrrO50g0NfEjE9l6aD4cBjZtAurr+ZGHV1/tK3osFuCqq3gR8dBDwBlnZPyUoSSyzE9jmjmTn9ZUVMRPcyKEkElo2F2err/+enz44Ye45JJL8Oabb+KEE07Ab3/72/Ee3zHLli5P+/d344MPjsLtpi5PMbzLU6xrE3V5AtD7OPPWvtTsoA/lIpaSi67z05q6u/nRiWzldPKWr088IWz7iuuuA668kn9IHwXGGHTGIEvS2D9frNa+CdY59lyk15EY5SJGuYhRLmLDLigikQj+3//7f9i9ezdOPPFE3HDDDTkxyz2TBQUQW4eiHR98cBjvv9+GxsaRr0OxffthdHYGYTDIKCzk61AYjTKAgdehmDmzEEVFqetQSJIeP4Wq/zoUFosRZWU2HH98Oerqhr8OxZ49XWBs5OtQMMbg9wexZ08PPvqondahALWjGwjlIhbPxWiE5HbzoxHZXEg0NvJuTS+8MGjbVxiNx3Q3jLGxbRtrMPStGXGMY8skeh2JUS5ilIsY5SI2onUoclGmCwoA0DQN+/btQ21tLRQ6JB5HuaSiTMQoFzFNVbFv507U2u1QsvW0pljb10ceAbZvT/5drO3r2rXAGM7B03Qd+7q6UFtSAmW0p0lJEp8LEZtgPQHQ60iMchGjXMQoF7FhHWJ4++23cfLJJw/rBgOBAJqamrBw4cJjGhghhJABMMbXkHA6+eRliyW75hcAvO3rxo28Y9Phw8m/Kyjg8yOuvRaYmmVrx5jNfac00YcFQggZlmEVFNdffz2qq6tx44034oILLoBN8G1NY2MjHnvsMTz88MO4//77qaAghJDx4PHweQfRaHZOth6s7WtVFT8akW1tXxWFFxAOBy8oCCGEjMiwCorGxkY8+OCD+NGPfoRrrrkGc+fOxbRp02CxWNDd3Y3du3fD5/Phsssuwz/+8Q8sWrRovMedc+Rs+/YwS1AuqSgTsUmfi9fLC4lIcpczORvO4WWMLzy3fj2wZUtqe9qVK3khsXJl2o6kDCuX2JoRk6jN66R/HQ2AchGjXMQol1QjnkPx3nvv4c0338TBgwcRDAZRWlqKxYsX46yzzkJxcfF4jXPUsmEOBSGEjJrPx9eSiIjXYMmocBjYvJkXEnv2JP/OYuFHItasAebMycz4RIxGfiSioIBPtiaEEHLMaFL2OOrrSHQULpcbPT062tsDcDr96OkJwe0OweUKwueLIBrVIUkMkiRDUSTYbHyth2AwAlVlsNlMqKoqREGBGQcOdGH/fjcikeGd7mAwxBasA3SdpXx5yBfWk+LtZw0Gfv/5+WZYrUbY7SZYLAZEIiqiUR0Ggwyzmf+sqgxGo4LychtmzSrEiSdOiXeHinVdCgQiSR2systtqK0tQUmJBcFgEIWF+airmzphOjUdC975yg+bzUbdIxJMylz8fl5IhMMDXoQxBn80CpvRmN5cxrnt67FKyUWS+k5pslozMqZsMClfR8NAuYhRLmKUixgVFOMkcc0ESWIoLAxgw4aW3nUoJLjdYYTD2rAWro39PczE6dKJcxIVRe5d8VsHY3zRPIOBr4dhMMgoK7Nh3rxS1NQU4bTTZqK+fj6iUQ0/+tEWbN3a3LvGhgGtrV54PGFUVTmwbl0lmpoUqCqbMGtJHAvqHiE2qXIJBHghEQoNedEx6WY0Emlq+3qs4rlMnw6lqIgXE3SKwuR6HY0A5SJGuYhRLmJ0vHec7NjRgW3bWlBZ6UB3dwBudzdkWYbDYcWRI15omt571GA4C85J0HW+Qna6yz9djxU0Uvzn2GJ5fLVsBofDDMaASERDZ6cf8+aVYNu2FtTUFGPXrk5s3dqMykoHCgrMcLmCMBoDKC+3wen0w+eLora2HD5fNH6dJUuyrOsLIekQDPJCIhjM9EiSxdq+rl/P50kkUhReQKxbN6ZtX4+JovAjEaoKVFZSpyZCCEkDKijGSUNDW3w1548/bkN+vgajUUEgoEJV9d4P6hKAwSsExgBN46cpZeLIWqyA4cUM6y1sJMiy3LtSJD9VymjkK2j7fBF0dQVQVmZDQ0Mb3njjIAwGGQUFvHNKd3cQkiTBbjcjFIrC6QygsBCw201QFBkNDW1UUJDJJRTihUQgkOmRJBus7avDAaxenV1tXxMnWOs6Xy2cEEJIWlBBMU6cTj/sdhMAwOeLQJI0GI0yolEdfUVEbp1txlj/AoP/v6YxWCyxlbcZvN4IqqqK4HT60dbmg83Wd/pDKKT2rvINmEwKXK6+iaZ2uwlOZ782k5OMJEm0+qbAhMwlHOaFRP/WqiMgSdLYrQYdM1jb1+pqPsk6W9q+DjDBekI+X8YA5SJGuYhRLmKUi9gxzaEIhUKwWCxjOZ4xl6k5FH/+84dobHSipqYImzbtwltvHUIwqKXt/tPNZJJ7j6BIsFgMKCmx4qyzZiMUUtHY6ITVasTRoz50dQUBMJSW5iEa1TBjhgPr1tUBAPbu7cKCBWW4/voT8OGHR7F58z40NjoBAAsXluGCC+ZiyZKKST3HgkwA4TCfyOzzZXokfRgD3nmHn9a0dWtWtH0dUGyCdUFBdhQ1hBBCRn6EQtd13HPPPfjDH/6A9vZ27N27F9XV1fjxj3+M2bNn40tf+tJ4jDPn1NVVoKGhDVu2NOGttw5h6lQTmpuDWbkO1ViIdZziE7UlHD3qw4svfooFC0px6JC7tzuUAkWREAioaG31wGRSUF9fBYDB54tC03Qcf3wZNm5sxGOPfYy2Nh/MZv4UbWrqxnvvHcF1152AK65YMGGLCsYY3G43HA4HffuRYELkEonwQsLrHbObZIzBHQrBYbGMLpdcavtqsfAioqBgyKJmQjxfxgHlIka5iFEuYpSL2Ii/avrZz36GRx55BP/1X/8Fk8kU33788cfjT3/605gOLpctWlSO6dPzsXVrM6JRHcuWOSDLE/+JJ8u8peyUKXaYzQp27uxAOKzHv/A0GCQYDHK8sCou1rBvXxdaWtxYsaISjEnYvHkvvN4IqquLUV1dhOrqIlRVFcHrjWDz5r3YsaMjczs4znRdR1tbG/SJWnmOUk7noqpAezvQ3DymxQQA6IyhzeeDPtIDzU4n8D//A5x5JvCDHyQXE1OmALffDrz2GnD33ZktJhQFKCwEZs0CZs7k/z+MIyQ5/XwZR5SLGOUiRrmIUS5iIz5C8eijj+KPf/wjzjnnHHz1q1+Nbz/xxBOxe/fuMR1cLjMaFRQVWREKRSfLAqwAeMFgsRhQWpoHvz8CpzMAs1nB/PllaGvzIhhUUV5uQn6+BV5vEB5PGMcfXx1fh2LDho/R1RWAxWKA2dx3FIL/bEBnZ4AmbpPcoKqAywW43elvzzaQxkbg0Uf5UQlR29e1a4FVqzLe9hV5eXxuxCRawZoQQnLZiAuK1tZWzBF8Y6XrOqL9/0BNct3dwd42q5PnD6LRqECWJchy7EgE71BVVVWIqqrCpMsePeqGzWbE2rUnxns5O51+qCqD1Zr61LRYFASD6qSfuE2ynKbxDkPd3dlRSAzV9nXVKl5IZLrtq9HIT2dyOGgFa0IIyTEjftdesGAB3njjDcyaNStp+8aNG7F48eIxG9hEUFZmg8kkIxjU0NY28Gq3E0VsAb7Y/AZV5W1lBzrH0OeLQpKSOyWUldlgMEgIh1MnsIdCGhRFQlmZbXx2IAtIkkSrbwrkRC6xVqXd3WlbhVKSJNgG6jaSC21fJYkfhXA4xnSCdU48XzKAchGjXMQoFzHKRWzEBcWdd96JtWvXorW1FbquY9OmTdizZw8effRRbN68eTzGmLPq6iowc2YhGhs78K9/dU/YCdkxsZWz8/KMUFUdoZCK/HwzzGYFHk84vhYFAHg8YUQiOubNq4GccE50XV0FXn31AFpaPAiHtfhpT6GQinBYRWVlAerqKtK+b+kiyzIqKyszPYysk9W5MAb09PDTm7T0dnKTJQmVDkfyxsHavlZV8UnW9fWZ7ZBkNvMiIj9/XBaey+rnSwZRLmKUixjlIka5iI2qbewbb7yBu+++Gx999BF8Ph+WLFmCO++8E+edd954jPGYZKptLABEoxoeeaQBP/zhK5gyxYDGRt+ELioURYLdboLdbkQ0qiMvz4jzz+cFw1tvtcBgkGGzGeH3R6GqOs46axa+/e06TJs2JV5URKOasMtTOKyiosI+4bs86boOl8uF4uLipEJrssvKXBjj8yNcLj5fIgN0xuAKBFBstULevp2f1rRlS3a2fZXlvlOazOahL38MsvL5kgUoFzHKRYxyEaNcxEZ1ouppp52Gf/7zn2M9lgnHaFSwbl0dqqsd+Oc/38Phwwfgdkfjf+sVhX+jH3s+8pWogWhUz4pTrxMZDBIUBVBVlvQlrMkkYdq0Apx88gwEAipaWnoQjeqYPbsQV165AFdcsQAA8Mwze/DKK/vR1uZDVVURzj23BpdeOgeHDx8EY+Xx2zMaFVxxxQLU1BRh8+Z92LXLCcYmzzoUjDF0dnaiqKgo00PJKlmXi8fDW8BmeN4YC4UQfeopSJs2ZW/b1wxMsM6650uWoFzEKBcxykWMchEbcUFRXV2N7du3o6SkJGl7T08PlixZggMHDozZ4CYCo1HBmWdWYfp0Fffcc2V88vFkc+21i3DttYuStmkDnB5iNCpYtmwGli2bkY6hETJ8Xi8vJCKRoS87npxO4C9/gfyXv2Cqy5X8uylT+NyI1auBTP3BMxj6VrDOdMcoQggh427EBUVzc7Pwg2A4HEZra+uYDIoQQrKKz8cLiXCGmys0NvLTml54AYhGkfR9/wknAOvWAeedl5kP8bEJ1gUFgG3iNk4ghBCSatgFxd/+9rf4/7/88stwJEwE1DQNr776KmbPnj2mg5soJEmiFRUFKJdUlIlYxnIJBIDOTiAUSu/9JtI0Pi9i/Xpg+/akXzFFQejss2H+0pcgZ6rL3jhPsB4Neh2JUS5ilIsY5SJGuYgNe1J2bOKJJEnofxWj0YjZs2fjl7/8JS666KKxH+UxyOSkbEJIjgoGeSERDGZuDNnc9jU2wbqggM/VIIQQMqkN+whFbInxqqoqbN++HaWlpeM2qIlG13W0t7djypQp1BEgAeWSijIRS1suoRAvJAKB8buPoRw82Nf2tf84qqv5JOtLLwXy8qAzhnavF1Psdsjp+LYsL48XEfn5Wb2CNb2OxCgXMcpFjHIRo1zERjyHoqmpaTzGMSEFAhE888webNmyH9OmRXDkiAmnnjoTjEl4882DOHzYg2AwCp8vCo8nhGhUg8FggNVqgNsdQnd3EMFg33wVReHrZQ12TEmWeftWXv+x3sXm+FElxvjvGeNnUSTejtEoYd68UkybZkdjoxNOZxCqqsFgkFFamofq6iLk55vR3u6H2x2CrutwOKxYunQa1q07EcuWTQcAfPjhUWzevA+NjU7ouo7S0jyUldmQl2fE1Kn5qKurwKJF5TAaFTDG4Ha7UV5eLtyXaFTDjh0daGhog9PpR1mZLen6uWS4+zJUJpPVuOcSDvNCov+6DenCGPDOO/y0pq1bh932lTEGdyiEcptt/D7g5+AEa3odiVEuYpSLGOUiRrmIjaptrN/vx+uvv45Dhw4h0q/byTe+8Y0xGViuCwQi+NGPtmDr1maYzTLKygrw8cfteP75vWAMmD7djo6OIDo7/VDV2Af/wQuG4ayZpeuArve/gb6fB7qNaJRh504ndu509rtPHa2tPrS2+mA0SvH7MBgkdHUFcfiwG++/34pvfGM5DAYZf/nLTrS1+WA0KnC5gujpCcFmM2Lp0qno6gpix452rFhRifr6+YO2w49GNTz77G5s29YCRZFht5vQ2OhMun6uFBUTaV8mnEiEFxI+X2buPxwGNm/mhYSo7Wt9PT8iUVOT3nHRBGtCCCEjMOKC4sMPP8QFF1yAQCAAv9+P4uJidHZ2Ii8vD+Xl5VRQ9HrmmT3YurUZlZUOFBaaUVAgwWo1IhRSIUkS/H4VPl8YBoMCSdKhaToACZLEsmINisQCJyYaZTAaZdjtRmgag6LIcDisaGvz4Y9//AAFBWYEAlFUVxfD74+gpyeEigo7gkEVhw55MH9+GYqLrdi2rQU1NcU48cSBq/sdOzqwbVsLKisdsNtN8e0+XyR+/SVLMnDu+ChMpH2ZMCIR3rXJ683M/fe2fcVf/sIXxks0ZQpw3XV8jkRhYXrHlYUTrAkhhGS/EZ/89a1vfQsXX3wxuru7YbVa8fbbb+PgwYNYunQpfvGLX4zHGHPSK6/sh8Ego6DADMYAp5Ph6FEvjEYDDAYFR4/6eo9GMMiyHP//bCgmYkRj0TQdBoMMWY4tcqfDZDLg4MEeHD7sgcVigNnMj05IEi+iDAYZfn8ELS1u2O0mKIqMhoY2SJKE0tJSYaeEhoa2+Lf5iRKvnytGsi+DZTKZjVku0SjQ1gY0N2emmGhsBP7jP4CzzgJ+97vkYuKEE4D//m/g1VeBm24aVjEhSRJK8/KOLRdZ5vc1cyYwaxb//xwvJuh1JEa5iFEuYpSLGOUiNuKCoqGhAbfffjtkWYaiKAiHw6isrMR//dd/4Qc/+MGIbuu+++7DSSedhPz8fJSXl6O+vh57+h32D4VCuPnmm1FSUgK73Y7LL78c7e3tIx122rW1+WCz8fONeUEB+P0qDAYJBoOEaFQHwAuI2HMym4qJgcTGGJuXEY3qMJkUhEIaQiEVZjP/IBIOazAa+dPLaJSh6wxeLz89zm43wen0Q5ZllJaWCic1OZ3+lA/gMbHr54qR7MtgmUxmx5yLqgLt7byQ8HjGdGxD0jTgn//kRx0uuwx49tm+FbYVBbjgAuCvfwWeegq48MIRzVOQJQmlNtvoJmTn5fEOUTU1QHn5hOrWRK8jMcpFjHIRo1zEKBexEZ/yZDQa4yGWl5fj0KFDOO644+BwONDS0jKi23r99ddx880346STToKqqvjBD36A8847D42NjbD1nrf7rW99Cy+88AKeeuopOBwO3HLLLfj85z+Pt956a6RDT6uKCjt27uyArjO43UEUF6vwesMIBKJgjH8wz/Riu4MZqLhhDOjpCfY+BxhUVUc0qoExIBxWEQqpMBhkdHUFoKo6rFYjJEmCLANNTd147bUmHDrkhqYxbN68G/PnW+DzWXD66bOwfPmM+CTlsjIbGhudvXM4vGhu7saRIz6EQvw+Fi0qxwcfHI1fPpsncMf2RcTni2DmzL41XXRdR2trK6ZPn05vVglGnYum8aMAPT3pr9i9Xt6paRzbvuqModXjwfSCguEVFTk4wXo06HUkRrmIUS5ilIsY5SI24oJi8eLF2L59O2pra3HGGWfgzjvvRGdnJzZs2IDjjz9+RLf197//PennRx55BOXl5Xj//fdx+umnw+1246GHHsLjjz+Os88+GwDw8MMP47jjjsPbb7+Nk08+eaTDT5tzz63Bhx8exe7dnejq8uHssx3QND1pTkKu0jT0zvkAolEVAP+cEghE4fdHYTBIUBQZqqojHA5BkgCTSUEgEMXrrx+EyxVEXp4RNpsB8+bJeOONduzd24WdOztw5pmzUV8/H3V1FWhoOIq33z6MlhYPuroC8HrDiEZ1RKM67HYjHnnkQ5x22ixceGEtXnhhX9ZOeq6rq8COHe3w+SIpcyg0TUddXUV8G2MMfr8/Za2XyW7EuWga0N3NC4l0v+gOHepr+9q/a1RVFe/W1Nv29VgxxuCPRHguAxUUsQnWDseY3GcuoNeRGOUiRrmIUS5ilIvYiAuKe++9F97ec4/vuecerFmzBl/72tdQW1uLhx566JgG43a7AQDFxcUAgPfffx/RaBTnnntu/DLz58/HzJkz8e9//zurC4rLLpuHF1/ci5de+v/Z++84ua76/h9/3jJ9ZmfLbJO0qy1WL17LDYQFNrigGLAAA0lwoYQ0AgGST5JP8sHf4BQ+Ib8AIR9KqC4kJMHGBmzcjY2NbMuyvWbV5VXblbaX2ekzt/z+uDuzO7t3q2a26TwfDz2kPXPn3nNe98zqvuec9+t9HMMwp3BfWhmoqoTf7xx9QDZHXatMFEVC161tXW63Sn9/gkQiQ0mJm3RaIxBwUVrqpqrKR19fnOHhVC5Jedu2KlavLuG55w4gyxKRSBpVVXA6VUpL3aiqgqoq7N3bQTptsH//2SWb9LxtWxU7d9blBTzZYGLnzjq2bRPWcwXDMKxAYmhoYQMJ04R9+yy3pqefnrXta1Fxu8dqRizznAiBQCAQLG3mHFBcdtlluX9XVVVNWmWYL4Zh8JnPfIa3vOUtuZWO7u5unE4npROSE6urq+nutk/KTaVSpFKp3M8jo/uldV1HH/VMtbbgyBiGkRdhTtUuyzKSJE3Zrk/wYpVlGY/HwVVX1XHoUA/hcAKwHrAVhUmJPFnbWEWZ3C7LIMszt5umia4z6fzZYEZV888xVXs2AJhtu6JYwYS1vUlF160VBEmyjnW5HBiGlchtGDoOhzKaW2Ki6zqSBF6viixLnDo1xKpVPlpbu7j44irKytxs21bNiRODxGIyFRUeyso8lJa66emJMzAQp6rKy9NPt1Ne7sHvz27hsO6R3+9AVSVaW7vYsaPW9j5ZWhizalcUq3bG+PbsnJmq3TAMZBne/e51NDWV8vrrPfT1xamvL+Hii6vZsqUSWWb0OOt4wzByfZ3P3FuIMc3mc1PIz1O2L+NfyxuTaUI4DIODKKZpHT+xL6N5P3btxuh75tyeSiH94hdI99yDdORIXr9NtxtuugnpttvQm5rGXjCM3PYkY0LgMVW7ktVgQl9g9LOfvU+KglRSglxaiuFwjPVd1xfkPuXuxyzaizn3su+168tyHVMh7pOu66PmH+asx7rUxzRd32c7pqwuwIoZ0/i+zHdMuq7n/k9SFGVFjGmm9tmMKauLrusrZkzT9V2Z5RdS86pDYcerr77KHXfcwUMPPTSv93/yk5/kwIEDPP/88+fVjy9+8Yt84QtfmNTe3t6O3+8HIBgMUltbS09PT25VBCAUChEKhTh79iyxcVsVampqKC0t5dSpU3l1N9asWYPf76e9vT1vEjQ2NqKqKk7nMLt3V+BwyMRiCcrK3MRiKd75zrEq45mMwf3391Jd7eTqq8tz7eGwxiOP9NPQ4OGKK8b22Hd3p3jmmSE2b/azdat/3PjivPzyCDt2lNDcPLat4cCBKAcORLnqqlJqaly59n37wpw4keC66yoIBsemwTPPDNLdneammypzSdUAjzzSTyymc/PN1bk2WZZ4/PFhKipcXHaZJ7cikckYPPbYMI2NPi6/3I9hmEiSRDic4emnh6muVtmyJYCiSHi9Mhs3uujtTVBWZtLcbGKa/Rw/fpxMZoSmpjLKyjRKS0twuax+9vWZhMMKlZUazc0mbnea1avdqGoGTXPi8cSQZesD0txsMjwcyc0Bu/t0/PjxvLmybt06NE3LK+IoyzLr168nFovROW4/vNPppKmpiXA4nBfk+nw+6urqGBwcpL+/f7QNdu+upba2lq6uLsLhMKdOWX3Lzr2uri7S6TTt7e1IkjTvubdQY4KF+TwpipKnS25MmQwnjxyBRCL3oL4+FCKWydA5ri9ORaGpvJxwMkn3uJoTPqeTumCQwXic/nFVqYNuN7WBAD3RKOFkcmxMXi8hn4+uEydw/fjHlD74IMrQUJ7WmcpKht73Pobf8x5W1dfjdzpp7+/PCwYay8pQZZnjAwP596miAs0wODnunNONqbGszDp/NIrkdoPDgS+dps7lYrC/f8Hv01KZexUVFdTU1NDV1UV83H1dzmMqxH0yTZOKigqAFTMmOP/7lH2Qk2V5xYwJzv8+maZJOp1meHiYysrKFTGmQtwnXddz/x81NTWtiDFNd582btzIbJDMOWwCe+yxx3jiiSdwOp383u/9Hk1NTRw5coS/+qu/4uc//zk33HADv/jFL2Z7uhx/8id/wk9/+lN+9atf0djYmGt/+umnecc73sHQ0FDeKsXatWv5zGc+w2c/+9lJ57JbocjekJKSEmvQCxTd/eAHr3HffQcxDDhxYpCBgRSRSHLSbojlukKhqjI+n3M0PyKNaVoRraYZ+HwugkEX6bRGOm1QUuIkmdSIx3VKS11Eo2lKSpxUVvowTejqirJ6dYCdO9ewaVMlt99+MXff/TqHDvXT3x+juztKVZVvdKzQ3R1j1So/VVVeBgcTlJd7WLeuApAYX8jv+PEBNm2q5GMf27Fivy25YMcUicDgIMYEd4Opvs0vyArF4cPI99yD+fDDSFmnpizbt2PcfjvmddflEp5lSbLGNLHvhVihcDqRS0sxAwGMcduoltx9WolzT4xJjEmMSYzpAhlTwVcovve97/GJT3yC8vJyhoaG+O53v8uXv/xlPvWpT/GhD32IAwcOsGnTptmeDrAegj/1qU/xwAMP8Mwzz+QFEwCXXnopDoeDp556ive///0AHD16lDNnzvDmN7/Z9pwulwuXyzWpXVGUSaJkRZvIXNunErulpZannjrJ2bMjXHttBf/zP504HArxuDbpWNO0AoWJGFPkXkzVbs2Lye125z7/dsv61jBM/H4ng4NJdN3ANC07VI/HQTicQtMMysq8xGIZMpk4pgnptGU329Li5sUXoxiGSUNDGZpm0tJSi6IotLTU0tbWS3m5l87OCImEjsulkExqGIZJRYUXTTN5+9ub2b//LNFoZjSHwnooi0bTufPB1PdpLu2SJM2pfa5zCeD06dM0NDTkHTPXubeUxlSIz5NhGGO6xGJWUbrRQEKxOY8kSSiSNOt2WZJsk5plabS649NPW/kRL79snWess3DDDVZ+REvLlD7cdn0EbPsyVXvufgQCVm6Ex4NhGJw6dWrSfIHFuU9zbS/W3DMMgxMnTtDQ0DCn8yzlMc23ffw1DcPg5MmTU+oy8fgsS3lM820f3/eJn6OVMKbZtM/Ux/G6zOb48+n7VO1Lce6N1yX7Be5yH9Nc2qdi1gHFv/7rv/JP//RP/K//9b+4//77+cAHPsA3vvEN2traWLNmzZwumuWTn/wk//mf/8lPf/pTAoFAbqknGAzi8XgIBoN8/OMf53Of+xzl5eWUlJTwqU99ije/+c1LOiE7y8aNFWzZUsWhQ7052/lMRp/+TcsEebSw3eBgEqfTSjS29lpaORHptE5fXwxNM3A6ZcLhBB6PE13XOXfOsp3t7o6RTHro6YlSUxOgtNSVl6ScTWZ+7rkzeL0qHR1hdN1AUax8iq6uCKWlbtrbB0gmNV555RzV1X5KSlzLNuk5u8Q8h4XDCwLTNElHo5inT4/VcCg20Sjcd9/Utq8f+IBVW+I8bF9njcdjXdPvtz58o4j5Yo/QxR6hiz1CF3uELvYIXeyZdUDR3t7OBz7wAQDe9773oaoq//zP/zzvYALgm9/8JgBXX311XvsPfvADPvKRjwDwla98BVmWef/7308qleKGG27gG9/4xryvuVBkMjoPP3yc7u4IW7dWUV6exuVyoKoakmSQTi/viSjLEi6XnNs6lUrpbNwY4vLL1xCLpTl9egiQqK0NoGk6Z89GiETS+P0unE6VVErHcoKSaWoq40Mf2srOnfV5dSMcDoU9ezbS3FzO/v3nOHCgl0gkhdfrIJMxiMXSeDwODMNykRoZSZFIZAiFPGzeXLlk6lAIzpNYzKoMGYmA05n3QF0UprN9bWqC224rmO3rtKiqtRJRUmKNWyAQCASCJcqsA4pEIoF39D9QSZJwuVzUnuc3c7OJ7txuN1//+tf5+te/fl7XWmja2nrZu7eDhoYytm6tQtP62LIlQzKp8/rrPRhGGpfL+iZf04xJeRVLHVWVaWoqx+WyHuQDAQebNlXyR390WZ5F66uvdnHvva/T1FTO66/3UFbmxu22AopwOMHWreUEAgo7d9bbWrs6HAo7dtTannPjxlDOJnbVqgB1dUE6OsK8853rFtUmVlAgEgno788lXBcV01watq+SZGXvB4PW3wKBQCAQLAPm5PL03e9+N+eUpGkad911F6FQKO+YT3/604Xr3TKmtbU7V3MATA4cSAISmYxOMjm2ZWO5Lpml0zrxeAafz4nDIZNK6QwMxGlt7c57mM/q0NsbQ5Yl3G5ryrlcCiBx9GgGr9cx6X3Tka/tGH6/E0WR53SupYYsy6xZs2baHIsVTzJpBRLj3HlkSWJNMDi7atBzIZWChx+2AokJtq+M2r5y221w0UWFve5EnM6xCtZz2Lcq5os9Qhd7hC72CF3sEbrYI3SxZ9YBRX19Pd/5zndyP9fU1HDvvffmHSNJkggoRunri4174JXo7k7jcin09WmYJqMZ98szmADrC9xMxvrWWFVlMhkdTTPp68vfIpLV4cSJIdzu/Acll0uhuzvN9u1lk943Hfna5uP3O+d0rqWGJEm5oP2CI5m0kq0nbjNiVJdCbvvp64Mf/Qj+67+sa46nutrKjfjgB2FCDZyCIstWgnUwaAUv8+CCni/TIHSxR+hij9DFHqGLPUIXe2YdUJw6daqI3Vh5VFb6aGvrIZXSOHiwl8rKJD/7WT+ZjJF7EM/+vRwxTejsHKG3N4LTqeJ0KqTTOi+91Mk3v/kyAwMJjhzp48UXO0kkNBwOq9hfY2MZwaCLcDhFZ+cwV18dZN++Di67bA2ZjJ7Ld8hkdNraemlt7aavL0ZlpS+XE1FZ6ePQoT7bfkWjaerrg7avzQa7627dWolpShw82DupL4XOz9B1nfb2dpqbm+fssDAXptPXbkyzOX6u58yRSlkP9ePqQ0xENwzaBwdpLi+f0jFpVhw6ZK1GPPzw5OTu7dvhIx+B66/P2b4WhWyCdSBg6yw1FxZqviw3hC72CF3sEbrYI3SxR+hiT8EK2wny2bKlih//+CCnT4dJJtO87W0lxGJpUqmV4fKUJZ02SaczyHIGwzAYHk7yne+8QkfHCLIsYRgQi43aeyrW1iiXSyGTMTBNHZdLpr8/Qnv7IA8+eIQ9e6wCKg8+eIS9eztyW5sOHeqjra2HnTvr2Lq1kra2HqLRdN5KRdbZqaWlZl5jyWT0Sdc9cKCX++8/BMD69RUEg+68vuzZs7HgQcVE3+pCYzfO6cY0m+Nh+ntmq1M6bQUSkcis+j2xNsOs0fVJtq85FMUKID7yEWhpmd/5Z0M2wToYLHiwUuz5slwRutgjdLFH6GKP0MUeoctkREBRJCTJJBJJMzycwONRkCRwOhUSiZUVUIynvNxLd3eMwcEEgYCLoaEk1dU+SktdDA4miMUyDA4mSKc1gkE3NTU+VNVKum5urmDv3g6am61q4Xv3dlBXF5wUMOzd20F9fSk7d9blPbwWwiY2m0g//rqaZhCJWAGRz+dk1apAXl+am8uXXb6G3Thh6jHN5niY/p7lnTOTsXIkZhlIzJtIxHJquuceOHs2/7Vg0NrS9OEPF8/2VSRYCwQCgeACQQQUReLAgT48Hgf19aUMDsaQJCshORbT0LSVF9nKslWFeHg4mdvKJcsS6bROKOTF5VI5dy6Crht4PA6CQRfbtlVRV+elvr4CRVHo6YnR2mrVIpku6frgwV5uvXU7zc3lue019fXB896GZJfs3dERxu1WMU04cyac2061nBPA55rUPpvjYfp71trazY5tIRgchJGRyS5KhWSxbV/nmWAtEAgEAsFyRQQURaKvL4ZpmlRWekmndQ4dyuB0KiiKhDa5UPayR5IkkkmdTMZAkqz8EFW1XK0kScLncxIKeQmHk2zaFKK83MtVV61FkgxM09oTPz6heqakazs72fPFLtk7EkmPOlJZ37bb9aWQyLJMY2NjUd0j5prUPtvjpzqmxKsQO9kJp/zzDiRkSaKxrGxql6fZ2L7edhvs2lUc29cCJFjP77LFny/LEaGLPUIXe4Qu9ghd7BG62CMCiiJRWelDVaVczkA0mkJVlfPNwVyyZFdgQCOV0nE4ZOJxE59v7BvadFrH73cSi2VYu9Z6+MwGE5CfUF2spOvpsEv2DgScdHVFMU0oK/MsSF9Utbgfy7kmtc/2+InHSIaOKzaC82wHtc1l570qodr98k6l4KGHrEDi6NH81xbC9tXrtVYiCpBgPV+KPV+WK0IXe4Qu9ghd7BG62CN0mcycwytFUejt7Z3UPjAwILLdx9HSUkNFhZdkUiMQcHL11QG8XgVVXZkaKYpEKOSlrMyDw2FNK8MwcTqt8SaTGoZhsn59CE0zqKiwtpv4fCNAfkJ1S0sNum5MWhE436TrmbC7bl1dkGRSI5XS8h60i9UXwzA4fvx4URO+5qrvbI4ff4xk6LiiwwT6z6H1D2DoOps25dermSuGaXJ8YGAsMbuvD772Nbj6avjrv84PJqqr4c/+DJ59Fu68s/DBhKpCeTk0NsKaNVZAsUjBxELMl+WI0MUeoYs9Qhd7hC72CF3smXOINVUhtlQqhbOQPvHLnG3bqnjXu9bzwx/+ht7eKKbpYXg4hSRZ26r1FZSb7XRK+HwqmYzOhg3lnDol09ExgtMpMzKSYng4CcDq1QHWri1h06YKNM3g+PEBmptN2tsH0DQzL6G6GEnXM7FtW9Wk68bjGQIBa17HYmnOnYssSF+Kid04pxvTbI/f+abVtP7yMKlMDL9XJRaznL8uuaSW9esrCtP5gwfhhz+0t329+GKrmnUxbF8lCfx+K3gQCdYCgUAgEOQx64Dia1/7GmBtbRlfMRssT95f/epXbNy4sfA9XKY4HAo33bSBaDTFt771MiMjKQYGYmQyJpIkAcu3qN14FAWqqwO89a31NDSU4vU6uO66Znp7Y7zwQicHD/aSTGq5atqDg0m2bq2irMxLLJZCUQbZtClES0ttLqE6k9Gpry/lwIFeDh7sQ5Jg06ZK3vWudVxySW3BbFrt6iZs2VLF2rVBDhzoyyV7//Zvb8mrQ1GIBPDFxOFQ2LNn46yT2mc8XpFgeJg9F7vY7FzF4cP9DA7Gqa0NsGlTiPXrK85PJ12HJ5+k/vvfR2ltzX9NUeCGG6xAohi2ry7XWM2IOazAzrsmh0AgEAgEy5BZBxRf+cpXAGuF4lvf+lbe9ian00lDQwPf+ta3Ct/DZUomo/OTnxzmG994mVOnhti0KYRhZFcmVkYwkWVoKMGBA328850X8aEPbQXgvvsOsW/fWSorvXg8GSKRNH19MV57TSMeT9PUVM6uXXVs3ryGjRs35ObTxJoHW7dWEY2miURSnD4d5pJLCpOEPVNthVtv3T7pwe/KK1cX5NpLgbkmtdseb5owNGT90XUcslV/ZcuWAq3aZG1f770XpbOTPE+mYtq+KspYgrXLNee3z7XOh0AgEAgEy51ZBxQnT54E4JprruEnP/kJZWVlRevUSqCtrZcf/rCNzs4RQOZnP+tH11dWIGFh7R0/e3aEH/6wjc2brYfJhx46RiSSprzcSzw+Qm2ttaIViaTp7Y2zfn2IvXs7aGranueUMNcaCfNloa4zV2RZZt26dUvbPcI0YXjYsoAtxt69aWxfzaYmpGLZvvp81pYmv/+8ciIWcm4ti/myCAhd7BG62CN0sUfoYo/QxZ4551D88pe/zPtZ13Xa2tpYu3atCDLG0draTWfnCIZh1WfweCTi8cXuVTEw0TQDwzDp7BzJ1SQYGIjjdquMjKSQJCn3jayqysRiaQYG4lRWevnNb7rYsWNV7mxzrZEwXxbqOvNB07SlmY9kmhAOW4FEob2PZ7B9Na+6iswtt+B461sLW9vB4RirGVEg146FnltLdr4sMkIXe4Qu9ghd7BG62CN0mcycw6vPfOYzfO973wOsYOKtb30rO3bsoK6ujmeeeabQ/Vu29PXFSCY1JMmyqL/uugpkeWV6xhpGtg6FRl9fjL6+GJpm4nIpOQvZLA6HjGFYVcQDASeGMZjnlDDXGgnzZaGuM1cMw+DkyZNLyz0iG0icPAm9vYUNJlIp+MlPYM8ey971qafGggm3G377t+EXv8D4znc4sXUrRiHclGTZCiDq6iynpvLyggUTsLBza0nOlyWA0MUeoYs9Qhd7hC72CF3smfP/oj/+8Y+55ZZbAPj5z3/OqVOnOHLkCPfeey9/8zd/w69//euCd3I5UlnpG62wbGIY1p9iFgdeLHTdCiyHhxP4fA4ikRRnzoxw7NgAmqaT/byFQl68XgeZjIEsSwQCllOQ1+skk9F5/XUrgfXll88RiaS4/PLV1NT46O6OceZMOJdH0dhYyre//QpDQ4kZE12nS4yday2GC5aRERgYmOyodL709cF//Rf86EfW+cdTXQ233GLlSJSWWm2F+MXtdo8lWBdxqXq+c0skcgsEAoFguTLngGJgYICaGsun/he/+AUf+MAHWL9+PR/72Mf413/914J3cLnS0lLD6tUBzpwJk05nVmQwMR5dh87OER5/vB2nUyUeT5NK6ciyhKYZ6LpBIOBElmXKyz1UVHjRdYPKSh8///kx9u7tRFFkKio8nDw5xDPPnMLtVjAMUBQZMGlvH6SjI0xXV5SWlhr6+uJTJrrOlBi7dWslbW09RKPpSfvci1nrYtkQiVgP+un0zMfOhUOH4J57rGJ0dravH/kIXHdd4WxfFcVajQgGYYGWp1taauY8t0Qit0AgEAiWM3MOKKqrqzl06BC1tbU8+uijfPOb3wQgHo+Lwnbj2LatiquuWssrr3SRTGbIZFb+0phhQHv7EE1NZVx0UQUdHWFisTSmCfF4hlgsQ0WFh6oqL5pmsGtXHbKc4IUXOqirK8Xvd6Lrlk4vv3yOY8cGaG4uIxBwEQ6n8PmcrF0bJB7XME1Yv75iykTXmRJj6+tLF6XWxWxY1ESvaBT6+wsbSOi6lRdx993w8sv5r83B9lWey3Ynn88KIny+BS86N9c6H3B+idwiMdAeoYs9Qhd7hC72CF3sEbpMZs4BxUc/+lE++MEPUltbiyRJXHvttQC89NJLog7FOBwOhepqH9de28iDDx7h/vsnVxdfiUQiKeLxDC0tNZSVuTl7NkJ3dwRZlvH5HKxdW8p73rORyy5bxbZtVdx772+QZSX3EKUoMi0tNZw9G2FwMEEqpbN+vR+nUyGZ1Cgt9ZBKWdug6uuDUya6zpQYe/BgL7feun3WtRgWCkVRWL9+/cJfOBazAolUqnDnjEbhvvssx6bOzvzX5mj7qsgy60MzVNsuQoL1fJhrnQ+YfyL3os2XJY7QxR6hiz1CF3uELvYIXeyZ8/+6f/u3f8vWrVvp6OjgAx/4AK5Rn3ZFUfirv/qrgndwOTM0lGDjxkocjmNUVjoYHNTJZIwVvVqh61a+iCRJVFR4qajwsnZtEIdDYfv2ajweld///UsBq6bJ8PAIfn/+9hZFkXE6FRoagpSXe3nLW+p59NE3cl80u90K0ejYN+h2ia6zSYyday2GhcA0TWKxGD6fb7QAYpGJx62tTYlE4c45je0rjY3WasQcbV9N0ySWyeBzOPJ1kSQrJ6KkpPA2sufBXOfWfBO5F3y+LBOELvYIXewRutgjdLFH6GLPvNZsbr75Zj772c8SGveN4e23385NN91UsI6tBCorfbl91Lt2lSHLEpIkLfQOjAVFUaRJblbJpJ7b9lFZ6cu1G4ZBba1BLDZ5e43f7yQWyxAIWA9ZgYCTVErPO1+WieeFMe3tsDt+qWAYBp2dncV3j0gmrVWDzs7CBBOmCS+9BH/8x3D99VaexPhg4qqr4DvfgV/8An7nd+b88G+YJp3hMMZ4B6jqamhuhpqaJRVMzIf5ztcFmy/LDKGLPUIXe4Qu9ghd7BG62DPngELXdf7u7/6O1atX4/f7OXHiBACf//znc3ayAouWlhp03eCii8oBSztJWvAt3QtKSYkbv3/8w7+GYZiEQl7bhNSaGj+6bkx6mAqFrDyLigrrQbGuLohhmIyMpDAMM+eUM1Wia1b7iee94JOuUyk4e9ZaRShEYZSZbF8/9CF4+GH43vfgrW89P3clSYKyMmhogPp6a3vTCtnHKuarQCAQCJYzc97y9A//8A/cfffdfOlLX+ITn/hErn3r1q189atf5eMf/3hBO7ic2batih07annllbMAZDJWEbiVissl0dRUSnm5l46OMLpuoCgylZVeNE1n1661kxJSq6p8vPnNnpzLk8ejcurUMOfORfD5HLz+eg/9/XHq6krwelU6OsKsWVOCJMHhw310dUXQNJO///tfIcsSW7ZU8lu/tZ5t2yqXbNL1opBKWVubotHCnK+vz7J8/a//mtr29QMfsAKA88Xns7Y1mSaEQoUtbLdEmE8it0AgEAgES4U5BxT33HMP3/72t3nHO97BH/7hH+baL774Yo4cOVLQzi13Mhmd558/Q2trD37/yq5rEAq52bVrLS6XSiDgoqmplHjc2rK0dWt1Lgl7fEKqJEl4PG7e8546mpsr2L//HM8+e4re3jirV5dQVxfgzJkRuroi6LrB7t3rKClxE4ul6e+P0dMTo7MzQjyewe22pvLJk0Ps33+OW27Zzk03bVhySdczIUkSTqezcPsy02nrgT8SKcz5Dh60tjM9/PBk29ft2y3b1+uvP3/b1wkJ1pJh4HS5Vux+1fkkckMR5ssKQehij9DFHqGLPUIXe4Qu9kimObcKCR6PhyNHjrB27VoCgQCvv/46TU1NHDp0iCuuuIJoob4BLRAjIyMEg0HC4TAlJSULeu3/+I82/vzPH6e/P4Zpmuj6gl7+vCktdSFJEItlAAmXS8HpVHC7VWKxDJqmU1rqZsMGK5fmTW9aQ3m5h46OMLfeevGck51ffbWLe+993dY6c+I5X321i3/5l710dIxQXe3H5bIeuJJJjd7eGHV1JfzZn+1cUgnXC0omYwUSIyPnf64C2b7OyBJNsBYIBAKBQDA9c96AvHnzZp577rlJ7ffddx+XXHJJQTq1UnjyyXYikRSyLNHY6Fl2270jkRS6PhZvZjI6mYyOw6Hkqn9rmkk0mkaWJTo6wnk2lzNhuTwNk41pZ2OdmaW1tZuBgThut5oLJoDRn1X6++Oz6sNSY6Imc0bToKcHTp06/2AiEoG77rIKzf3Jn+QHE8EgfOITVs7EV75yfsGEywVVVdMmWJ+3LisUoYs9Qhd7hC72CF3sEbrYI3SxZ85bnu644w5uv/12zp49i2EY/OQnP+Ho0aPcc889PPTQQ8Xo47KluzuKYZgoisTllwc5dSqJYSyfCWgY2fxay5nKNMfyba0PkrXcl0rpuFwKkYiVUDqdzWX++Q26u7sJBAIoijIn68y+vhiaZuLxTJ7CbrdCIqHNqg9LjYmazBpNg8FBCIfHbtJ8OXPG2tZ0//2TE7ebmuDWW60k7PNZRVAUazUiGLQCihmYty4rHKGLPUIXe4Qu9ghd7BG62CN0sWfOAcVNN93Ez3/+c+688058Ph933HEHO3bs4Oc//znXXXddMfq4bKmq8mGaJoZhnPcz3mJgmuSChCzptE4qpZNOW/u34vEMPT1RDh3qobzci8ul4HAovPnNa3j11S727z/HgQM9RCJp/H4X27ZV5fIpZBl03aC1tZvXX+/l5ZfPEYmkuPzy1VRWevjNb/o4dKiX3t4YyaTG6tUllJS4uPLKNZSVeVBVKecmNZ5kUkdRpJzVZiaj09bWm9ubXlnpo6Wlho0bKzhyZGBS+1LOsZiErluBxPDw+QUSWdvXu++GX/5y8rl27bK2Nb3lLefnrOT1WkGE37+y7c4EAoFAILiAmFNAoWka//iP/8jHPvYxnnjiiWL1aUWQyegEg24kSWIlWRWbJrlgIr/NpKcnxmOPtbN6dQBdNzhwoIczZ0bo64vnHJ9Onx7iwIFedu2qZ/fuJo4e7ef5508jywoVFR5Onhzil788ychIiqEhq1J2JqOTThskkzrf/e6rHDjQS319kNJSD+fORXIrJGDlUKRSGnV1JbS01JDJ6Dz44JE895xDh/pobe1CVWU0zcTpVHLtbW097NxZx549G5d2UKHrMDRkBRLnM8FSKXjoISuQOHo0/zW3e8wOtrl5/tdQ1bEE6/NN1hYIBAKBQLDkmFNAoaoqX/rSl7jtttuK1Z8VQ1tbL4ZhsG5dOYcO9dHdnVrsLi0IIyMpKiu9HDzYy5Yt1cTjGmvWlOB2q6RSOkNDCVRVZu/eDtJpnY6OCGvWlOH3u9B168H42WdPcebMCCUlLnTdxOlUqax04fE46OuLMzycQlFG2L69ikgkxYkTg7hc1lROpTRqavy8613r2batira2Xvbu7ZiU6H3kSD+//OVJrrmmkfXrK3Lt0WiavXs7aG4uX5SEbkmSpq++aRhWIDE0dH6BRH+/Zfv6ox9Ntn2tqYEPfxg++EEoLZ3f+SXJWoUIBguSYD2jLhcoQhd7hC72CF3sEbrYI3SxR+hiz5y3PL3jHe/g2WefpaGhoQjdWTm0tnbjdjvYurWKU6eGeOaZocXuUtEYn18hyxKDg3EaGso4cWIIv9+Zs3R1uRRkWWJgIE5lpY8nnzxBRYWX9eutPfSKItPSUsMLL3SiqjLptI7LpVJR4cHrdSBJEiMjKU6eHKK2to5QyMf/9/+9jYceOs7hw32YJrk6FDt21OBwKFMmevf3x1FVmYGB/ByB8QngixFQyLJMXV3d5BcMw1qNGBrivOzCDh2y8iMeemiy7WtLi7Wt6brr5r+S4HJZQUQgUNB6EVPqcoEjdLFH6GKP0MUeoYs9Qhd7hC72zDmg2L17N3/1V39FW1sbl156KT6fL+/197znPQXr3HImm2CcSGh4PA42bPDxyivDK2r7E1jBhCxLuWRzVZVJJHR8Pgd9fQlCIU/e8dnk7cbGMg4d6mXLFj8wluCtKDK6blJW5iGT0QmFvHg8Yw+3TqdCOJzC73cyNJTgiivWcMUVa6bs31SJ3tFoGp/PMSlHBGafVF4MDMNgcHCQ8vJyZFm2orThYStPYr6BxEy2r+98p7Wtab5OTbJsbWeaZYL1fJikiwAQukyF0MUeoYs9Qhd7hC72CF3smXNA8cd//McAfPnLX570miRJ6Mut2EKRqKz0cehQH4GAE6dTZuNGL6+9Fl5WLk+zYcz1yQouDMPE73cQi2UoKXGRTOoEx9X0S6V0yss9RKNpamv9OJ2Tt4IFgy4GBuJ4vQ4yGQPPuJgknbaCjGg0TX39zMUCs/dhIn6/k46OMGvX2gcbszl3MTBNk/7+fspKSy3b18FBy8FpPkQillPTvfdCZ2f+a8GgtaXpwx+G2nmuxCxggnVOl0JU3l5BCF3sEbrYI3SxR+hij9DFHqGLPXMOKIyV9hV7kWhpqaGtrYeKCi9lZR4kSUJR5v9suFTJBhGSBIoiIcsS69ZVEI9nWL8+RHd3lGRSy+VQGIZJRYUXXTd4+9ub6O8/QzRqOUBlaWws4/jxAUpL3cTjmVzti2RSwzBMGhvL0HWDlpaaGfuXvQ/WNcaCh1DIi6YZVFTk7++PRtOzPndRME1IJuH06fmvSJw+bQURU9m+3nYb3HTT/HIbRIK1QCAQCASCCcw5oBhPMpnE7XYXqi8rim3bqti5s47nnjtDXV0Qh8MqcGdt71neZHMmYLK7aHW1j61bq/D5HKRSGiMjKp2dIzmXp6oq60E+6/L0+OPDPP98GFm2nJai0TSlpS6uuGI1nZ0jZDI6vb1pNM0KZFevDlBa6mLnzjq2bauasa/Z+zDe5SkaTaNpOtdc04CmGRw7NpBr13Vj1ucuOCMj0NcHsZjlsDSXpdSZbF+vusrKj7jqqrnbvmYTrEtKYMIWR4FAIBAIBII5BxS6rvOP//iPfOtb36Knp4djx47R1NTE5z//eRoaGvj4xz9ejH4uOxwOhT17NtLcXM7+/Wfp7Ozissvg5MkhentjpNNjD3yKYuUGKIqEaZqkUvqCr2TI8vSmQS6XTGWlj7VrS5Flk87OCD09MTIZHUWRKStzs2VLFTfdtIGdO+tzNR7G16EIBFxs3TpWh0JRJK64opm1a+H113vp64tRXx+kpaWG5uZSHnroDR577A3a2wcAibq6IG9721quvHLNrGtFjL8P2XoT2WtMrEORbV/wOhSRiOW0lE4jmSZBt3v27hEz2b7edJO1InHRRXPvV5ESrOeDJEkEg0HhqjEBoYs9Qhd7hC72CF3sEbrYI3SxRzLnWDv8zjvv5O677+bOO+/kE5/4BAcOHKCpqYn//u//5qtf/SovvPBCsfo6L0ZGRggGg4TDYUpKSha7OwLBGLGYZd+amoelcF+fZfn6X/812fa1uhpuuQU+8AGY6x7PbIJ1SYkVkAgEAoFAIBDMwJzT0++55x6+/e1v8+EPfziv5PjFF1/MkSNHCtq5lYJhGHR1dYn8kwlcsLrE43DmDJw9OymYMEyTrkgEY6o4/9Ah+Mu/hGuuga9/PT+YuPhi+MpX4Kmn4Pd/f27BhNdr1Z9oboaqqiUXTFywc2UGhC72CF3sEbrYI3SxR+hij9DFnjlveTp79iwX2WyfMAyDzERfewFgOQKEw2GqqhZhX/4S5oLTJZGwAoCJidLjME2TcDJJlc835pyk61ZexF13Fdb2VVXH7F6XeIL1BTdXZonQxR6hiz1CF3uELvYIXewRutgz54Bi8+bNPPfcc6xduzav/b777uOSSy4pWMcEghVDKmVtbYrNsbbFTLavH/oQ/O7vzs32VSRYCwQCgUAgKDBzDijuuOMObr/9ds6ePYthGPzkJz/h6NGj3HPPPTz00EPF6KNAsDxJp60ViUhkTm9zdHYi/fu/T237evvt8J73zM321eUay41Y5ARrgUAgEAgEK4s5BxQ33XQTP//5z7nzzjvx+Xzccccd7Nixg5///Odcd911xejjsiUcTvClL/2au+9+jbIymUOHoiuuUjZYebwOh4Tb7UCSJAwDJMnE5VLxeFQcDhlNs36urvZRVuYmmdTo6hqhokKivf0XlJd7ueyyVdxyy3bcbgcHD/Zy9myYjo4RurqipNM6q1YFuOaaBpqbKzh6tJ++vhiVlb5ZOzNlMjqvvdbFQw8dzxW727Klkt/6rfXs2FFTOGenTMYKJEZGZv+eUdtX+e67afrlL5Em5lDs2mUFEm95C8gymYzOsYO9HD7cz+BgnPJyL5s2hVi/vmJsHCsowVqSJEKhUFFcNTIZnba23pzb11zm1GJTTF2WM0IXe4Qu9ghd7BG62CN0sWfOLk/LjcVyeQqHE9x884956qmTk0oCXIhki95ZAYc5WhDPwDRBliWcTgWPRyUQcLF+fQUXXVTGK690ceLEMJJkFaJzuVSGhhKUlnrYtauO8nJvXu2IPXs2TvkAmMno3HffIX74w9/Q3R3F5bJi6VRKo6bGzy23bOfmmzef3wOkplmVrcPhyXUgpmIm29c9e6z8iObmvLE8+eQJXnutC1mW8fmsyuSGYXDJJbVc+56tOELlC1LBermTyeg8+OCRSXVKZjOnBAKBQCAQWMx5haKpqYmXX36ZioqKvPbh4WF27NjBiRMnCta55cy//dvL/PrXHZgmqKrEVVeV8vzzw2jahRldqKplKKZpBpIEmmbidEpcc02Il1+OkEhoqKpCb28Ml0vF7XZw9myUmho/DodCPJ7G43EwPJyktzdKLKaxdWsAsKpb793bQXNzOTt22OcTtLX18tBDx4hE0jQ1leNyWQ+JyaRGb2+Mhx46xoYNoSnfPy26bgUSw8OzDySytq8/+pH13nFoVVXIt9yC/KEPQWnppLceOzbAa691UVMbwOe1kqkNRWVId/Jku0b1kJMdjYG5j2MJYxgGZ8+eZfXq1chzLcw3DW1tvezd20FdXTCvkvps5tRSoFi6LHeELvYIXewRutgjdLFH6GLPnAOKU6dOoev6pPZUKsXZs2cL0qmVwCOPHCedHtOppsa1iL1ZfKxAwircZ5rZ526JykrHaLAhEY2mURSZcDhJW1sPsizh8VgPzJIk0d0dwe1W0XWTQ4f6uPLK1QD4/U4URaa1tXvKh7/W1m4GBuK43WoumABGf1bp749P+35bDAOGhqw/s93LduiQtRrx8MPW1qjxXHwxxm238call7KuunrKitaHD/cjyzJer5O020va40d3ulEBKTww93EsA0zTJBaLUegF1dbW7tzKxHhmM6eWAsXSZbkjdLFH6GKP0MUeoYs9Qhd7Zh1Q/OxnP8v9+7HHHiMYDOZ+1nWdp556ioaGhoJ2bjnT3z+1NeiFiGla25yyW57G2q2/FQXSaQOfz4Gum8RiaYLBsX3/qiozPKzh8zlxuRRGRvLrN/j9Tvr6pnZR6uuLoWkmHs/kKe92KyQS2rTvnzCYsUDCJriehK7D009bgYSd7esNN1j5ES0tmIYxuVDdBHojOmZVFSOVk4OOmXQQ5NPXF5sUTGQRWgoEAoFAMDtmHVDs2bMHsB4Ib7/99rzXHA4HDQ0N/Mu//EtBO7ecCYW8tLcPLXY3lgxW8pKEaVpbnrKBxPhSC6oqk8kYo/kUDlKpsYd1TTPweFQ0zSCV0qmoyHc4ikbT1NcHmYrKSh+qKuWdM0syqaMoEpWVM9iomqa1rWlwcHaBRNb29Z57rCJ24wkGrUrWt9wyO9vXbM2IkhLc62KcONRHhc0Kxkw6CPKprPTlEvQnIrQUCAQCgWB2zDqgyFYEbGxs5OWXXyYUChWtUyuB3bvX8dpr3SQSGoZhsm9fOO+b+QuNbA6FaUqjAYWJYRi89lqUdNoATPx+F5FIimDQzYYNIV59tYtEIoPDoWCaJjU1Abq6ImiazubNlblzZ5NoW1pqprx+S0sNTz11go6OEVIpPS+HIpXSqKsrmfr9pmk5Ng0MWInXM3H6tFU7Yirb19tug5tusrV9lSWJGr8f2VrOsWpFZGtGjEZfLS01tLX1EI2mJ+37n0mH5Yosy9TU1BR8v+py17JYuix3hC72CF3sEbrYI3SxR+hij3B5KhLC5SmfZevylA0kZqoCP2r7yt13W1WtJ970q66ytjVdddWUuRE5nM4xu1d1cswvnIkKh9BSIBAIBILzZ14BxVNPPcVTTz1Fb29vbuUiy/e///2Cda4QLFZAAWN1KO655zW2bfPyxBMDK9LlKVuHwkqglkafpaeqQ+GnrMxFMqnR3T3Cli0ufv3rEcrKFrYOxeHDfZjmNHUoRkasrU3p9PSDn8n29aabrBWJiy6aWcRAAMPv51RPDw0NDdN++7GcayfMB8MwOHXq1Iy6zIflrGUxdVnOCF3sEbrYI3SxR+hij9DFnjm7PH3hC1/gzjvv5LLLLqO2tlYU9piGYNDDP/zDtdx55zUcP36cdevWoYgqxTl0XZ9Sl6yD01S85S11c76ew6FwxRVruOKKNVMfFIlYKxIzBRLT2L5SXW3lRnzwg7a2r3l4vdZKRCAAkoSp66TT6RndIxwOhR07ape0A1EhMU1zVrrMh+WsZTF1Wc4IXewRutgjdLFH6GKP0MWeOQcU3/rWt7jrrru49dZbi9EfgWBxiEatQCKVmv646WxfW1qsbU3XXQcOx9TnUFUrKbukZPrjBAKBQCAQCJYBcw4o0uk0O3fuLEZfBIKFJxazAolkcupj5mD7OiWSZFWuDgZtk7EFAoFAIBAIlitzzqH4y7/8S/x+P5///OeL1aeCspg5FFmyRVB8Pp/YIjaORdUlHof+/ukDiZlsXz/0Ifjd353e9tXlso4NBKzgYwbEXLFH6GKP0MUeoYs9Qhd7hC72CF3sEbrYM+eA4k//9E+555572L59O9u3b8cxYcvGl7/85Vmf61e/+hX//M//zCuvvEJXVxcPPPBArt4FwEc+8hHuvvvuvPfccMMNPProo7O+xmIGFP39Uf7mb57hoYeO0NsbXzEJ2apq2cBala8lJMkalzWVJLxeB/X1JVx22Wouv3w1l122atoE12xS7EsvdfLss6c4fTpMLJYGLPcnv99BSYmLNWuCtLTUzHg+u3NnE25rggo71jrZWO+d+v0z2L7qt9zK0U1XcehElMHBOOXlXjZtCrF+fYV1TkWxAoiSEjKKY9km/F6oTJWkvXFjBUeODIh7KRCMspwNDQQCQWGZc0BxzTXXTH0ySeLpp5+e9bkeeeQRfv3rX3PppZfyvve9zzag6Onp4Qc/+EGuzeVyUVZWNutrLFZA0d8f5brrfsiBA70A3HRTJT/9ad+KCSpmQpKgpMTJm960hvXrQ+zaVT/JglPXdY4de4MDBzI888wpXnzxLJ2dI6O1IXRM08Q0weGQ8fkco/UpKmhqKrc930TGW4K6TI1KOUFmOIJhGFxySS3XXts09v6ZbF937YLbbydzxZt48ulTvPZaF7Js9SsWy2AYBtve3MQ7P7ADR1kQJGlelqS6rtPe3k5zc7NI4B/HQuky1T1Lp3VUVULTDJxOdcnYy4r5Yo/QxZ5C6rKSLJfFfLFH6GKP0MWeOedQ/PKXvyzYxXfv3s3u3bunPcblclFTs7SLS9lxxx3PcuhQP6ZpIkkSDseFYy0my1ZAEYtpHDs2yObNVezd20Fzc/kkJ53u7hFeeKGf4eE0vb1xSkpcaJqJrpu5QoCmCV6vZUnb2xtn/frQlOcbT1tbLy89d4KNZSalqgYoUFZKLJ7htde6qK8PsuWioJVgfffdcORI/gncbtizx7J9bW4G4NjBXl57rYua2gA+rwNdcVDi8TGoOXj6SIzVpxLsKC/NXX/v3g7q6oKTiqZN1/+JVswCi4XQZap7duRIP7/85UmuuaaR9esrcu0z3cuFQMwXe4Qu9hRKl/n+fluqiPlij9DFHqHLZOYcUCw0zzzzDFVVVZSVlfH2t7+dv//7v6eiomLK41OpFKlxTj0jIyOAFVHqug5YKymyLI8WVhv7JnqqdlmWRwuy2bdnzzu+/fHH3xjdMm8VdMtaFUuSVeRtPJpmTtkuy1bht5naTdNE163dNuP39BmGiWGAquafY6p2XbdWBWbbPlXfwaqIHQ4nGBqKEwp5aW3tYseO2lyVbF3X6e6OoKoSJ04MjZ7bBAxcLoVUKoOuSzgcEsmkht/vJJlMMzgYJxTy0draxcUXV+XpnrtP6TRHn22jMt5HaWVptksA+HwOStIRpP/3/zBffxJpYCCv5+ao7atx881jtq+GgSLLHD7cj+xQcIRKibr96A4XIOHDRO2N5/okSRKtrd0oioTf7xgdl4Xf70RVpbz+j597WW0mjWmWc8/qrjGrdkVRcvcjd+dG+zJV+2w/N4X8PI2fM8UcU2trF6qavWeQvW9DQ3FcLpmBgXheu9/vyN3LHTtqF/w+Qfazr+e1L9Z9KsSYCjH3su+168tyHVMh7pOuZ1d+zVmPdaoxTff7TVGm/v22FOdeVhdgSdynQoxpfF/mOyZd13P/JymKsiLGNFP7bMaU1UXX9RUzpun6PttVmFkHFO973/tmddxPfvKT2Z5yRt75znfyvve9j8bGRtrb2/nrv/5rdu/ezQsvvDDlAL/4xS/yhS98YVJ7e3s7fr8fgGAwSG1tLT09PYTD4dwxoVCIUCjE2bNnicViufaamhpKS0s5deoU6XH1CdasWYPf76e9vT1vEjQ2NhKNpnnf+6rQdevhf/NmP6rai8+nsHt3KHdsJmNw//29VFc7ufrq8lx7OKzxyCP9NDR4uOKKYK69uzvFM88MsXmzn61b/ePGF+fll0fYsaOE5uYxF6EDB6IcOBDlqqtKqalx5dr37Qtz4kSC666rIBgcmwbPPDNId3eam26qzFtVeeSRfmIxnZtvrs7T9b77emzH9NOf9lFT4+Lqq8tpaDCorjbJZAZHxxamu7t7VLMEa9aojIyk2LDBy9q1DpJJH7IMx47FeOWVCJdcUkJjo4dg0I1hGGiaFVykUkMcP348/z75fJw6eJB0LIahhKnd4kdKg5kGJSRR2nmCi55+mLp9z6HoWt5YEps3M/iBD1Dz/vejKQonh4YsByhAliTW19fTJbkovbQGOeDATQrD0Egk/KhqhuZmE9Ps5/jx4/h8Pitno0bB5xvJXUPTnKRSHmpr5dyxMDb3zp07x+DgIG+88QayLM9r7qmqmqcLwLp169A0jZMnT+baZFlm/fr1xGIxOjs7c+1Op5Ompqbcfcri8/moq6tjcHCQ/v7+XPtCfJ4kScrTpVhjMs1+mptNXK4kqZQHlyuJqqZH53AJ4bA1Z9zuOIpi/bu52cx9cbHQ92nt2rWkUqk8XRbzPi2VuZfdFnvu3DkSicSKGFMh7lP24dAwDE6cOHFeY7JyJtS832+6rpJM+qipUfJ+vy31uWcYRq5fS+E+FWJMcP5zzzAMBgcHGRwcpLq6ekWMqRD3SdO03P9Hzc3NK2JM092njRs3MhtmnUPx0Y9+dFYnHJ/vMBckSZqUQzGREydO0NzczJNPPsk73vEO22PsViiyNySbQ7EQ0d26dV/j3LkIum5gmlBSojI4aNUtuJBWKAIBB+95zwZCIS+bNlXysY/tyEXhpmly772vcejQAM8/fza3WjE4mACkvBUKr9dBKORFlmHHjlWEQj42bw5x++0XZzuCPDSEFInkzv3AA0dobx+ksS7AqiP7Wf/iw1SdOpjXS1NRMK+/HvO223K2r/KofoY14JxLk+J28/3vv8rhw32sW1eRN1YwOX58gE2bKrn99ouRJIm77nqdQ4d687bIZI8/frw/dyyMzT19tLCdw+HItV2I3wBN7LtpmqRSqZwuxRrT3Xe/Pu7+ZlfM4IUXOjh8uI8NGyp5y1vqGf+NbPa+f+xjOxb8PkmSRCqVQlXVnC5L5Vut+Y6pEHMPQNM0VDX/O7PlPKZC3CfTNNE0DafTOUmvuY5put9vx471s3nz5N9vS3XumaZJJpPB7XZPOv5C/jxldXE6nWKFYtyYsro4HI7cl9vLfUzT9b3gKxTzDRQKSVNTE6FQiDfeeGPKgMLlcuFyuSa1K4oySZSsaBOZa7ud2NdffxHf+95r6Lr1oB8Oa2Tvo11itmnatxuG9fA/23ZrXkxunyoZvBDtE/suy2A5P8kEgx7KyrxomklLi7WfVpKk3Idq+/ZV/OY3/TQ1ldHZOYKqyoBMKqVhGFZQomkmbrdKKmVQVuamvNyLrhu0tNSimKZVqTocziVSy5IEksSWOjfBnzzGm+57hkC4N6/PCaeX6LveS+WnP4E00fZVksDnQwkGwefLe6mlpZa2tl6i0cyEfcOZ3Biz86GlpYa2th6bY9OTjh3TTsbpdOY+6OPb7Zjqgz6X9uz9mG17oT43cx2TnS5THT/fMU2+v9a1ysq8pFIGFRXZ1T+rffy9nM+Yzvc+maaJw+Gw1WWx7tNSmHumaaKqqq0u051nKY9pvu3jr2maZi4QnYsGdn2f7vebrk/9+63QY5pv+/gxZXWZ2H4+fVzsMc2mfaY+ZnXJ/rwSxnS+7dlnl/Ff+E3V96nal+KY5tI+FUs+h2I8nZ2dDAwMUDud7/8S4c4738YLL3Rw4EAvqgo331zNfff1XBAuT4aRdXlSWb++HE0z2LWrnm3bqiYcZ+B2h9m5s45nnjlFVZWXzs4RNE1H07LfkFguT/F4hmBQoarKi6YZvHXnKrZVAydPTnZkOnMG7r2Xjfffz6Zxy34A/cFaXt70dpT3vpdrbtwM411IHA5rNSIYnLJmxLZtVezcWTels8n4Mc7l2PGaHD9+nHXr1gn3iHEslC5T3TNNM7jmmgY0TefYsYFZ3cuFQMwXe4Qu9hRSl/n8fluqiPlij9DFHqGLPYsaUESjUd54443czydPnqS1tZXy8nLKy8v5whe+wPvf/35qampob2/nL/7iL7jooou44YYbFrHXsyMU8vPEE7fwN3/zDI8+epQpAsNlyfg6FOO3hVhLaXOrQ6EoMu9+90U0N1ewdWv1tHUo6uqCtGyr5Mp1XjbVqjhikbETmeYk29fx30t2r7uEV7dfT7zlCjZtqRqrGWHty7KCCI9nxrE7HAp79mykubk8571eXx+09V6fy7GCpcF092xiHQpxLwUXMuL3m0AgGM+c61AUkmeeeca2rsXtt9/ON7/5Tfbs2cNrr73G8PAwq1at4vrrr+fv/u7vqK6utjmbPUuhUrau6yKatWFOuug6DA3B8LC1BJIllYKHHrICiaNH899jY/ua91q2gvUSivbEXLFH6GKP0MUeoYs9Qhd7hC72CF3sEbrYs6grFFdfffWkxLDxPPbYYwvYG8GSxDCsQGJoKD+Q6OuDH/3I+jM4mP+emhr48Ifhgx8cs32FsQrWwSDY5NkIBAKBQCAQCObOoq5QLARLYYUim7k/VYLghcq0uhiGtRoxNJTNNLc4eBDuuccqRpfJ5L+npQVuvx2uu87Kh8ji9VpBhN9vbXFawoi5Yo/QxR6hiz1CF3uELvYIXewRutgjdLFnWSVlLzfi8TTf//6r/N//+zzRaIqREW1S/vByR1WhosJHKOTF53NQUeHB5XKMrjyZyLJEIqHR3x9neDiJphm43SqVlV4uuqicQEBmZMQgEHCydWs1l11ay7Y6J45IGHSdTEbn2OFewg88QsOzP2XV2fxq1qasYN5wA8Ytt3LUs4YDB3o5+sW9RJM6SlmQph1NXHplgG3VXhwzfPAzGZ22tt7cfuDKSt+i7AfO2joudp+W1rW9bNsW4uKLV+F0il9b4xk/XwRjCF3sEbrYI3SxR+hij9BlMmKFokjE42k+/elH+MEPWpFlacW7PEkSeDxKLmAqKXFhmhCJpDAMy61J160gQ1VlZFlCVWU++MEaXn89jSIrNJTBpmqZK3bUcO21TRCJ8MY/fYfaJx+gNJpfzTrm8PL6xrfxyoaraXzzJgBea+3hje4Up4cghgNFkams9NLYWMquXWvZs2fjlA/CmYzOgw8emdKxZLr3FpLxezMNg0Xr02LqYXftWCzFmjUZVq1qYM+eTSLhcxSxl9ceoYs9Qhd7hC72CF3sEbrYI77qKxIPPHCU++47jGEsqZzfomGakEoZKIpEIOAiErGqMXq9TsLhFKZp1ZKQJIlkMoPTqWKaBpm0TsiRobEkQyycwFlbwalnX2fkibsofephNiUTedfp9lXxzNq38ZR/O5t31BEsdfPEr84Sd3goWb2Ks+f6qWzwsMalkExqDA0lUVWFvXs7aG4uZ8cOe8vhtrZe9u7toK4uOMlTfab3FovF7NPSu7Yfh2OIF17ooLm5YsHvhUAgEAgEgqkRAUWRePLJdqLR1MwHriB03URRrOhJ06wqmx4PmKaRW7nILoilUxqVLo2gmaCrqxdvRTX1I+28+9Efsrn7ANKE4nxHqjbzUMWb6Gm+GFOSSQ8maR8wuGRrHUdeTSMloXoohSxLuFzWNwZut4osS/T3x6mq8tHa2j3lg2hra3fu2/Dx+P1OFEWe9r3FYjH7tBSv7XQqKIqxKPdCIBAIBALB1IiAokh0d0fzTIkyGWPqg1cUJrpu5gIHXR8LJrKVvYNSmjI9RqmsoKR8vH3oNW77VSurRs7lnUlTnRzeeBUd19zEw4d1MpqJy+Eh7vAyWAoRTWW7wzW6lQoikXQumMjiditEo2mamsro68svcjeevr7YpAfYLH6/c9r3FppsNcvF7NNSvLZpSgt+L5YDU1U/vdARutgjdLFH6GKP0MUeoctkREBRJGpq/MiyZVCkaSb339+72F1aICQURUKSJEzTWrGQJGtLVImUptyMg5GiUkrwO9E2Pvjj31BO/ramEW8Zp3e9ixOXXcfhcxnqa6vQe4Y4PWBQ6Q0AkErHKK+wHjqt60Eg4KSrK5p3rmRSp6zMQzSapr4+OGWvKyt9HDrUZ/vaTO8tJIqisH79+kXv09K7tkQ8XkIkMkBdXWnRrr3cGD9fBGMIXewRutgjdLFH6GKP0MUeEWIViWuvbcbvt2odSBLU1DiXumPpeaMoY1WzVVXC4bCmV4AMDQxTY0a42OziH40neFL7Pn+ov5QXTLzhr+Onb/0E33j/PyL90R/ReHUL/b4Q3a4KQutWo5kSyaRGKqVjGCZ1dUGi0TShkJeKCuuPYZikUpbNbDKpYRgmoZAXXTdoaamZsu8tLTXoukE0ms5rzyYiT/feQmKaJtFoFNM0F7VPS+/aJslkHF3XF+xeLAfGzxfBGEIXe4Qu9ghd7BG62CN0sUesUBSJ9753A48//gb33PMbFEXi6qvLV7TLE1g5FLpuMjCQQJLAa6bwxRN4SPMOTnJ74nWuIH9bky7JPKms4z8dl3A60IB7MIgKvPj9k8iKgixLdPZ1UlHhQZJM9u3rJJHQ8Pkc9PfHCIV8vO1tawGTZ545w7lzI5w4MYjb7SAQcFJV5UPTdHbtWsu2bVV51x5vTdrdHSGZ1HjllXNUV/spKXHluRpNfG+xMAyDzs5O1q1bx7ZtVezcWTel01Ix+7TUrp11edq5s2HB7sVyYPx8EW4jYwhd7BG62CN0sUfoYo/QxR4RUBSJTEbn+PGBmQ9cgXhJEzLjVBDjZg5zK69TRyTvmDAu7le3cvpdN/Ljx2MM605iYTdyAtTuEcrKMpSXe0indTwelf7+OCMjadxuFV030TSDkZEUfr+LX//6DJIkUVPjw+tVOXvWCg7Kyz381m+t48or10yqnWBnTep2q4yMpEgkMoRCHjZvrlyUOhRZHA6FPXs20txcnqvHUF8fXJA+Lb1rl9DYqPPmN68XlrECgUAgECwxREBRJP7t315m376zi92NBcVLmgrirKef2/gN7+cwPvKrWXc4QvyXs4XH/S1EfWVsLQ0hNaQJGhDpHMHQDEIhL7IsUV7uwedz0t4+wMBAnEsvXU13d5SyMjdut0oqpXPmzDC9vWn8fheXXroqt7c/Gk3T0RHmyivX2DoC2VmTrloVoK4uSEdHmHe+c92ScBJyOBR27KhdlL4spWtnfb9FMCEQCAQCwdJDBBRF4pFHjqPrYz+Hw9ridabIeEgTIsbbOM3tvM7bOTkpOec56rlX2cGLvk2EJQ9pPPhlB8NRSKd1dJ2cG5Sum6iqxOBggvJyD6mUTjKpc+LEUG4lAcDlUnL77CsqVM6cCecCipnsTZeiTSyAJEk4nU6klZ5wM0eELvYIXewRutgjdLFH6GKP0MUeoYs9IqAoEv398dy/Nc3kkUf6F7E3xcFDmlVEuJmDfITX2Uj+Fq8EKj+VNvIDaQetyhpGTAcO3YXTqeCQLAemX/0qjNOZ/dbZBCQyGQO/X84lVxuGiSzDyEiKUMiTd42sFW3WHnY801mMLiWb2PHIskxTU9OiXHspI3SxR+hij9DFHqGLPUIXe4Qu9ghd7BEuT0UiFPLm/i3L0NTkWTEVs91kuIRzfIkneInv8n95Oi+Y6MLPP7OTFv6A35P38Iy6jkHThSGruFzK6EqEhNOpsGqV0wowHApgRfsOh0wmY+RqSsiyhGFASYmLZFLP64ssS8iyRDKpTwoQotE0lZU+2zFUVvomBSCzeV+xMU2T4eFh4R4xAaGLPUIXe4Qu9ghd7BG62CN0sUfoYs8KecRdeuzevY5s8r8sS1xxRRBZXt7LY24y3MAx/pP7eJHv8ie8TMU429fXqOaP+C0288f8JddxXKokLTtRFAnDMFEUiepqPw6HZSmrqhItLT7cbgWXS0GSLItdRbFqWGS3O7lcCm63QlNTGYZhkkxa28dSKSuIcLkUUiktrzbCTPamS8UmdiKGYdDd3Y1hXCiFEGeH0MUeoYs9Qhd7hC72CF3sEbrYI3SxR2x5KhKf+tTlPP74Gzz3XMdid+W88ZDidzjAH/DKJNtXDYlHWMf/4wqephFDVnIVwiWsStmGYaCqMj6fA1WVaGgopacnRiSSQlX9hMMp0mkdr9eBaZqEwylKS90MDibo6YlSXe1n/foKNE1nZESls3MEXTdQFJlQyIdhGMiyRCyW5ty5yKzsTRfTFlUgEAgEAoFgJSECiiIRDHr4+c9/h7/926f4wQ9+s9jdmRchonySl/k4r06yfR3Gxb1s52tcyUklRGWlj4tK3TidMum0TjSaJpHQkWUoLfWwdWsVGzZU4HAoOJ0yyaROf3+EmpoMmzcruFwO6upKCAZdDAwk6O+PoygymzZV8q53rWPr1iqOHBlg//5zHDjQQySSJhBwsXVrFS0t1ZimxMGDvbO2N11MW1SBQCAQCASClYRkrvBNYCMjIwSDQcLhMCUlJYvSB8MwOHv2LKtXr0ZeDokUhw7Bl78MP/oRxOP5rzU3wyc/CR//OJynnstOlwVAaGKP0MUeoYs9Qhd7hC72CF3sEbrYI3SxRwQUAgvThCeegH/5F+vvidPimmvgs5+FG29kxWSXCwQCgUAgEAjOG/FkuAAYhkF/f//STOBJJuE734GtW+GGG+Dxx8eCCbcbPvYxOHgQnn4a3v3uggYTS1qXRUJoYo/QxR6hiz1CF3uELvYIXewRutgjdLFH5FAUkXg8zX/8Rxv/+q972bbNyX339aBpS2NBqIYIn2Qff8h+QuOcmgDOEuDrXM63kpcx9H0vfP/H055LksDlkikt9dDQUMqqVX6SSSuPoq8vTiSSRJJg9eoStm6tJpnMsH9/N/F4kve8p5J4vISdO9eSTmscPtxHJGJVvt62rYrLLls175yGTEanra03lyNRWembMkdiumOBWZ/nfDFNk/7+fsrKygp63uWO0MWeuegyl8/DckfMF3uELvYIXewRutgjdLFHBBRFIh5P8+d//jh33dVKJmOwbVv1YncJgEs4x2d5gQ9xECf50fVLrOLLvJmfsBmN2T9gmCYkkwbd3TF6emI4HDJOp0IqpaPrBpIkoaoSvb0x9u07N1plUsblUgiHUzz44CEefPAI9fWlOJ3KqMWszOnTQxw40MuuXfXs2bNxTg89mYzOgw8eyXNxOnSoj7a2HnburMs733THXnHFagD27Ts743kEgqXKXD4PAoFAIBDMFRFQFIkHHjjKAw8cJZHQUdXFrT8hY/AejvJZXuCtnMl7TUPiPjbzVd7ES9Sd97VME9JpA5DQdcsu1uVS0XWDdFrHNK3q1g6HSkWFZ7TQnUk8rnHmTJhLLqmlpsZPKqUzNJRAVWX27u2gubmcHTtqZ92PtrZe9u7toK4umFfwLhpNTzrfdMc+9NAxAC69dNWM5xEIlipz+TwIBAKBQDBXRA5FkXjyyXYikRRgLY+1t8cXvKpiCUk+wwu08688wH/nBRODuPkiV9HAZ/gdPlCQYCKLJFnfiJpmtsq1iWGY6LqZez2Z1DBNOHEigSRJ6LpVsC5baM7lUpBliYEByz62tbV7Tn1obe3OfRM7Hr/fOel80x07MBCnvz8+q/MUAkmSCAaDSNLyLoJYaIQu9sxWl7l8HlYCYr7YI3SxR+hij9DFHqGLPWKFokh0d0dzD9C6Di+/PLJg125mgE+xj4/xGgHyK0EfJsRXeRP3sp0EzinOcP5YwYT1wTMMM880SpatpCbDgFdfjQJS7vVUSs8d53IpRCJpGhvL6OuLzen6fX2xSQ9PWfx+Z975pjt2upyXiecpBLIsU1srvimeiNDFntnqMpfPw0pAzBd7hC72CF3sEbrYI3SxR6xQFImaGj+KYkWvigKXX16CUtQtyiZXc5IH+RHH+Df+lJfygolHuIh38mG28Md8m8uKGkyAtQphmtbqjCxLjA/kDcP6QMoy7NjhB8zc6y7XmEiplE4gYFWwrqz0zen6lZW+3GrHRCaeb7pjVVXK3ceZzlMIDMOgq6tLuEdMQOhiz2x1mcvnYSUg5os9Qhd7hC72CF3sEbrYIwKKInHttc0EAi7A+pa+udlblOUxFxk+wmu08i1+yd3cxNHcTY2j8k0uYxOf5Le4hcdYh7kAt9w0rUrUkmTlS8iyhCyPPZibJrjdKpIETU0eTNNEUSTcbjX3LWoqpWMYJhUVXnTdoKWlZk59aGmpQdeNSQ9R0Wh60vmmO7aiwkso5J3VeQqBaZqEw+EF3x631BG62DNbXebyeVgJiPlij9DFHqGLPUIXe4Qu9ogtT0Xive/dwK9/fTrn8lRoqonwR+znj3iZKvKrWXdQwv/jCr7DDobwFvza0yFJjLo8yZimiaYZ6Hpm9Jv+7OqERCajMTAQJ5WyAi2vV6G+PkgkkiIcTqIoMlVVXjTNYNeu+px962zZtq2KnTvr8lxtsg9PO3fW5Z1vumPf9a71QL7L01TnEQiWKnP5PAgEAoFAMFdEQFEkvF4nX/ziO5Akg29/u7Vg522hi8/wIr9D2yTb1xdYw1d5Ez9h05xsXwtJRYWLmpoAZ89GSCQyWCuCJqZp4nTKlJQ4cThkUilttE1hw4ZyZFmhry9GPK4hSeB0ygwNxTl3LsKJE4M888xpLr64etZ1KRwOhRtvXEc6bfDYY2/wwgsdGAYEAg76++P86ldn8upc7Nmzkebm8pxHf319MK8OxYYNIdvXFtpq80KqJSAoHA6HMu0cF3Nn9ojPoEAgKCbL9XeMZK7wNZuRkRGCwSDhcJiSkpIFu24mo/Otb+3js599HNOEzZv9HDoUZT5b7rK2r5/hBd5mY/v6Y7bwr1xZUKem+SLLY4W2ZVkCTPTRPGtFkQgEnKRSOqoqs3FjOatXq+zdOwBYW6JisQzJpI4kmbjdCpIk43AoBIMu1q8P0dxcNqu6FFnf/eeeO8OpU0P09ETp708Qi2Xw+RxUVHipqfHR0DC78y0UhmEwODhIeXk58oSq5Ha1BMZ/y7xUxlAMptPlQkboYk+xdFnun0ExX+wRutgjdLGnmLos598xYoWiSLS19fIP//B87mH6wIHonM9RQpKP8Rp/yos0EM57bRA3/85lfJ3LOUuwEF0uCNmASZbB41FJJjUkyXJ50nWTVEqnvNxDMqlx9Ogg7e0ywaCb4eEkHo+LVMpAVQ10HQxDwuNRKC/3oGkm/f0xNmyomJVvftZ3X1Vl4nGNQMBNOJymqspJOq1TUuIiHtfmXeeiWMiyTCgUsn3tQq4lMJ0uFzJCF3uKpcty/wyK+WKP0MUeoYs9xdRlOf+OESFnkWht7aa/38ptUFWJq68um3WBu2YG+Fd+QSdf5is8lhdMHKGCP+BdrOFz/DXXLqlgYiLptIFhWMsV1mqFVX/C4VBwOBQyGYPLL/ejKFbiejSaRtMMVNWqlq1pOrIs51Y0otH0rOtSZH33BwbiyLJ1bkmS8HgcSJJELJY+rzoXxcIwDDo6OmzdIy60WgLjmU6XCxmhiz3F0mW5fwbFfLFH6GKP0MWeYuqynH/HiBWKItHXF8utTgDU1LhmeIfJ1Zziz9jLb3F8UqT3KM18hTfzBE0L4tR0vmQrYpumlag90eDKcnwyqKx0cvRoGlWVcjUorPoV1oqGokhkMgZ+v0wmo8+6LkXWd//EiSFcLoVUSsfhsHRzOGSSSY1QyDvvOhfFwjRNYrGYrXvEhVZLYDzT6XIhI3Sxp1i6LPfPoJgv9ghd7BG62FNMXZbz75il/2S6TKms9M2q7oSLDB/jVdr4Br/kbt41LpiIo/LvXMomPslubuVxLloWwQRYAUG2/oRVjyL/dV03kSQZSQJVldE0E1W1xmYY1vGKYlXQdjhkMhkDWZZmXZci67ufzdlwuZSc21YmY+B2q+dV52IxuNBqCQgESw3xGRQIBMVkOf+OWR5Pp8uQlpYaQqGpLVurifAPPEknX+Z7/Iyt9OVeO4ef/83bWcPn+EPezREqF6LLBcfplHNbnbJbn9xulUxGJ5PRcbuVXBBhmiZ+v3M0uNCRZWl065OBy6WgaQZ+v3PWdSmyvvsVFV4Mwzq3aZokEhlM08Tnc55XnYvF4EKrJSAQLDXEZ1AgEBST5fw7Rmx5KhLbtlXxN39zFZ/97OMYhsm+fWEMw+RyOvkcL/A+Dk+yfX2FWv5/vJn72LJotq/nS9blyTQhkdCwLGOt1xRFwuVSGBxM5FyeurtNwuEUDodMOq2haTqaZiJJJrJskk7rDAwkCAZdhEK+WdelyPruP/fcGbxelZ6eKJmMzvBwEp/PwchIipqa2Z9voZBlmZqaGlvniAu5lsB0ulzICF3sKZYuy/0zKOaLPUIXe4Qu9hRTl+X8O0bYxhaRTEbnF784yp/84UPs6n6JT/MSb+Js3jEaEg+zni+xk72sXdD+FRJFgdpaP29/exOXXFLDAw8c4cCBXpJJDZ/PQXm5F5fL2tpUUeFh3boKGhqChEI+BgYSHDnSx8mTwxgG+P0qDodCImHVpPD7ndTXl7J9++zrUMCYl/P+/ec4cKCX4eEk6bSGy6USDLrZurVqTudbCixXf2qBYKUgPoMCgaCYLNffMSKgKCbpNHz965hf/SrSmfz6EQSDcOut8LnPQWPjwvZriWAYBqdOnaKhoUF8AzKK0MQeoYs9Qhd7hC72CF3sEbrYI3SxR+hij9jyVExUFb7+9fxgoqkJfv/34Q/+AEpLF61rSwHTNEmn08JBYhxCE3uELvYIXewRutgjdLFH6GKP0MUeoYs9IrQqJrIMf/qnAESvvBL9P/4DDh2Cv/zLCz6YEAgEAoFAIBCsDMQKRbH5yEfQ3/IWOl0u1m3cyKy8ZAUCgUAgEAgEgmWCyKFYALJFUHw+H9LECm8XMEKXyQhN7BG62CN0sUfoYo/QxR6hiz1CF3uELvaIgKKIxONpvvGNfdx556+IRDILeu1i4nRKVFV5KSvzkkxqxOMapgler0J5uY/6+iAXXVSGokgMDaUIh5P09kaJRi0NmppK2bixkooKDyMjqUkOBnYOB1u2VKFpOo891s6hQ30YhkEo5KWy0ofX66C2NjCtC8JsXBPO11lhuTozCArDTPd/OcyP5dBHgUAgECw9REBRJOLxNH/0Rw9xzz1tqKrETTdV8tOf9qFpK0tuSbL+WP+WUFWr1oTT6cDnc6AoEpFIimg0g9Mp4/U60HUTwzBpbAxy2211nD6toGkmO3fWceON63j44eN5HszhcJIjR/rp6YkCEk6nVcsiW1Pi0ktrqa8vxTStc+zZszHv4SeT0XnwwSNT+jrv2bMRYMZjpnugms01ZvNApus67e3tNDc3o4jtcTmWui4z3X+7eT2f+TGRQupSqDm8FFjq82WxELrYI3SxR+hij9DFHpFDUSQeeOAo//3fh3I/OxwrM//dNEGWJRRFwjTBMKw/iURmNF1EIpnUCQZdmCY4nSrhcJKyMg99fXHi8Qzr1lURjWbYu7eDdNpg//6z1NUF8fudAGiaQU9PjO7uKJs3V+F0KgwPJ6mp8ZNIaJw5M8LGjZWUl3vYu7eD5uZyduyozfWxra2XvXs78s4JVuXJ7PHAjMeMP+dEZnON6d4/HsMwZj7oAmQp6zLT/beb1+Nfn8v8mEihdCnkHF4KLOX5spgIXewRutgjdLFH6DKZlfmUuwR48sl2Uil9sbuxIJimteKgKDKGYaLrBqYJyaRGIqGh6yZutwNJkohG0znfZlmW6OuLA1bxOkWRefLJ9ty3o1nOnAmTTGo4nSqxWJrBwQSSJOHxOFBVmVgsTUdHOHeO1tbuvP61tnZPOuf4a7a2ds/qmOk43/cLljcz3X+7eT3+9aUwP8QcFggEAsF8EQFFkejuji52FxaM7Ka57NYnXbccc62tTUauXVEkNM1AVSUyGQOnUyGV0nLn8fuddHdHJz3QRKPp0dUNhWRSJ5XScys+DocVxEQi6dw5+vpiee/v64tNOuf4a/b1xWZ1zHSc7/sFy5uZ7r/dvB7/+lKYH2IOCwQCgWC+iICiSNTU+HP/1nWTRx7pR9dXVv5ElmzAkA0sFMXa9qQoErIs59p13URVZTTNxOGQSSR0Dh4cS1aPRtPU1PiJRtN55/f7nUgSpNM6breCy6WQyVjLjZmMgSxLBALO3DkqK31576+s9E065/hrVlb6ZnXMdJzv+7PIskxjY6OovjmBpa7LTPffbl6Pf32282MihdSlUHN4KbDU58tiIXSxR+hij9DFHqGLPUKNInHttc24XFayjmlCLKazUtPfJUlCliV03RjNp5CRJHC7VTweFUWRSCYzmKaJ3+/M7T3UdZOmpgqAXPLntdc2o+tG3oNNfX0Qt1slndbw+ZyUl3swTZNEIoOmGfh8TurqgrlztLTU5PWvpaVm0jnHX7OlpWZWx0zH+b5/PKoqUpvsWMq6zHT/7eb1+NfnMj8mUihdCjmHlwJLeb4sJkIXe4Qu9ghd7BG6TEYoUiTe+94NPPjgRdx331FUVeLmm6u5776eFefyBFZgoOtmzvEpmTQAKbedSVEk0mkdVZVJJtNomrW9Yu3aEi6+WOX48YE8lyenU+a5504zNJRkZCTFwECCVErD4ZBpa+shkzFIpzU0zRxdsZB46aWzVFV52b37IjIZg+9//zX6+mKUlXlwuVRisQw/+clh/H4Ha9eW4vM5c65Q27ZVAbBzZ92UDjfZY8DeWnPLliquuGI1+/adnfH902EYBsePH2fdunVL3j0iq8P+/ec4cKCHSCSN3+9i27YqLrtsVUGtRpe6Ltu2VU07f7Lzejbzay4UUpfxY5AkiVgszenTw0SjGbZtqyKTMchk9GXh9LTU58tiIXSxR+hiz0rRpdB22CtFl0IjAooiEQ4n2Lv37GJ3Y8GQZfB6VQwDUikNSQJVlZAkeXTlwgosvF4noZCXkhIXbrfCyEiadeuqueyy1bkP9403ruPEiSEOHx4gldIoK3MDJoODVmAhyxKmKQHZ4Mz6t66bvPzyWfbtO4vTaa2OPP/8GTo7R1i9OsCmTSHOnAlz8GAf27ZV8dGPtnDJJbW5Xyh79mykubk890unvj5oW6tiorXmoUN9tLX1cMUVq/md39nKgQN9U75/pZDV4bnnTnPy5DB9fXF03UBRZE6fHuLAgV527apfVlaj54PDocw4f2Yzv5bCGNauDfKDH7Ry8GAfPp+DLVsqcbtV/uu/2jhzZviCuacCgWD5M93/2cvNDnupIwKKIvHpTz9GV9eFk5itqgrr1oU4dy6Cx+PA7VbRNKv4XCqlce5chNraADffvJn6+iAA0WgKRRnk0ktr8+wojxwZoLs7yu7dF+H3OzlzJswTT7Tj8Tjw+51UVfkYGEjgcinE4xm8XidXXrmGeDzDL395kmuuaWT9+grOnAkTj2vU1QWJxzNUV/u5/PLVRKOWK5SqKnm/SBwOhR07audtD7tv31k2bAjxsY9dUgSFlxZZHVRVIR7XWLOmBLdbJZXSGRpKoKrysrQaPR9mmj+zmV+LjcOhoKoKbrfK+963aUXYxwoEgguXlWaHvZQRORRF4tlnT63YnAk7DMPk2LEBMhkDh8N6UJckiXg8g65blrIjI0nOnAnn3mMlW0u8/npP3rkm2ld2dISJRtO4XCqqqtDVFUWSJNxuBw6HQiyW5syZMAMDcVRVpr/fsqI9cyaMLEuUlLiQZYmOjnDuuvO1wRTWmhZZHfr748iyhNttfTfhcinIssTAQPyC0mMlIea4QCBYKYjfZwuHCCiKRDQ65l6kaeaKzZ/IIkkm6bSW29oE1t+ZjD4aZFjuThMTPoeGvDPavEYiaQzDcoZyOGSSSS1nG6uqMoZhfdsQiaTx+Ry5a0SjadxuawXC5VJy1rIwfxvMYltryrLMunXrlrx7RFaH8RpnyWpdSKvR5aLLQlMMXVaCfayYL/YIXewRutizEnQpxu+zlaBLMVhUNX71q1/x7ne/m1WrViFJEg8++GDe66Zpcscdd1BbW4vH4+Haa6/l+PHji9PZOeL3O3L/liTw+ZScvepKxDQlnE4rhyJrj6vr5uhqhUwmY9WfmPjBTiZntnkNBJzIsjSaFGrgdqs521hNs/Iz/H4ngYCTWCyTu4bf7ySZtIoLplJ6zloW5m+DuRDWmpqmzXzQIpPVYbzGWbJaF9pqdDnoshgUWpeVYh8r5os9Qhd7hC72LHddivX7bLnrUgwWNYciFotx8cUX87GPfYz3ve99k17/0pe+xNe+9jXuvvtuGhsb+fznP88NN9zAoUOHcLvdi9Dj2fO2tzVw332HAeub+t27Qyt6lULTDDTNIBbL5LUrihVQ6TroukFbWy/hcJJAwIUkwZo1GZ54IsKzz54mldJQVZne3jgdHSO8+GIHDQ1luFwqXq+DgYEEiiJRW+tnYCBBIpEhEkmhqjKdnSPIMvT2xggG3Tz66Buk0zrhcBKXS8EwTOrqsrkbs7fBnOgOEY9nOHt2hExGZ2gomXuoDoW8aJp+3taahmFw8uTJJe8e0dJSQ1tbD6GQl7NnIySTWi6HwjBMKiq8s9J4tu4by0WXhaYYumTvbXZuZ1lO9rFivtgjdLFH6GLPStClGL/PVoIuxWBRA4rdu3eze/du29dM0+SrX/0q/+f//B9uuukmAO655x6qq6t58MEH+e3f/u2F7Oqc+ZM/uTQXUFzI6OO+vI7HNY4c6aWvL4rDoZBMZtizp5L29hQDA0liMatWheXeJDE0lKCrK0p5uQddNzAME9M00TQDXTc4dSqCJEF1tfUNRF9fjEQiQ3v7INXVfiQJ+vtj9PbG2Lq1ElmGY8cGZm3VaecOMTSU4MiRAV58sZPycg+BgJOOjjCaZnDNNQ1s3FhRVD2XClmL0eeeO43Xq9LZOZJzeaqq8qJpBrt21U+rsXDfWJrMZIE7X4tbgUAgWGjE77OFY8m6PJ08eZLu7m6uvfbaXFswGOTKK6/khRdemDKgSKVSpFKp3M8jIyMA6LqOPvp0axVikzEMY/QBlmnbZVlGkqQp23U9f8uHLMv88R8/iqpae5xUVSK71U6SxnIMsmiaOWW7LIMsz9xumia6nl0RGGs3DBPDINeXmdp13cQ0Z98+Xd/Ht0sSOJ0KPp+TcDhJWZmbtWtLgGxuhEIwKDE0lKS83IMsQ0mJm3A4jder4nJZlpaZjMaRI4P4fE68XpXqah9+vwtN05EkCIVCDA4mqKz04nQq1NWVMDKSpqWlFr/fQUNDKRdfXM2WLZWoqoxpmrlCe+PvH8BvftPNCy+cGecOIaFpOsGgA1U1qa0N4HQqrF3rpKLCCnoOH+6jpaVmznNsfLthGLk5NZ+5Z91f+zFNbFcUZZIG2b5M1W4Y1jazd797HU1NpbzyShcHDvQSjaYJBJxs2VLFpZfWsnWrtcowVd8n6wsgEY2meOGFMzQ1ldLSUpPXl/HjLfSY5nqfzvd3RCHuE2Q/+3pe+/mMaezelvH66z309UWprw/lfW6ARZt7sxlT9r12fVmKn6eFmnu6rmOa5qQ5s5zHNF3fZzumrC7AihnT+L7Md0y6ruf+T1KUqX+XL+UxKYrEnj0baWoq5fXXe+jvj43+Pqth+/ZqFEWa9P/KTGPK6qLr+pK4TzO1n+99mu0qzJINKLq7rcz76urqvPbq6urca3Z88Ytf5Atf+MKk9vb2dvx+P2AFJrW1tfT09BAOj7kOhUIhQqEQZ8+eJRYbS9SpqamhtLSUU6dOkU6P7cVbs2YNfr+f9vb2vEnQ2NhIe/sAN99s9V2WYcMGH6oq4fMp7N4dyh2byRjcf38v1dVOrr66PNceDms88kg/DQ0errgiOE6XFM88M8TmzX62bvWPG1+cl18eYceOEpqbvbn2AweiHDgQ5aqrSqmpceXa9+0Lc+JEguuuqyAYHJsGzzwzSHd3mptuqswlPgM88kg/sZieG1OW++7rmdWYZFkiGtVoa8uwapWDyy4LUlbmIhSSGRyMMjgoUVfn4i1v8Y26OckMDZn09LjZscPP6tVOKitNLrlkDaFQCz/7WQf9/V2sXm1tfTtzZoS2NpBlDxs2qFRVuamrKwHg8OE0TU1lXHWVb/Q+RTh1KkJjYyOqqk7Ky1m3bh2apnHs2DEaGgwqKpKYZop4vISBgRHe8hZL90DAyerVZSQSflQ1TTQ6yLFjx/D5Ivh8Purq6hgcHKS/vz937pnm3rlz5xgaGuKNN95AluV5zb3pxnTy5MlcmyzLrF+/nlgsRmdnZ67d6XTS1NREOBzO+6zZjcnng3e/ezW///uX0dXVNW5MESIRFy7X1J+nI0fac/pCkmTSh66rVFWlUFUjp2VjYyOSJOXpUswxzeY+FeJ3RCHu09q1a0mn03m6FGpMzc01XHrpJZw4cWJ0TNbnZqnMvenGVFZWhizLnDt3jkQisej3aanMvfF/nzhxYkWMCc7/PhmGkfvycaWMCc7/PhmGwdDQEIODg1RXVy/rMa1aJePzeQHv6H1y4nAodHR0zHlMmqbl/j9qbm5e9PuUpVhzb+PGjcwGyRwfriwikiTxwAMPsGfPHgD27t3LW97yFs6dO0dt7ZhH8Ac/+EEkSeK///u/bc9jt0KRvSElJSW5axU7upPlO+f9bf749pWyQmEFJxIVFZ6cS9OqVQFisTTRaJqyMi/hcBJN03E6ZUpLPciydYzTqbB9exUej8qf/dlOJEnin/95L8lkhtraAACPP95OOq1TUuImEknicChcf30zQK42xp//+Zvz+jjTNwv//M/Pk0houWuAxKOPvpG732PXsArrdXVF8vq4FL5ZmKl9Mb8t+ad/eo5kcry+2Gq5nMa0Eu+TGJMYkxiTGJMY04U7pmW/QlFTYyXK9PT05AUUPT09tLS0TPk+l8uFy+Wa1K4oyiRRsqJNZK7tdmIrCrkEbEmC6monPT1pTHOsfTxTtRuG9fA/23ZrXkxunyoZvBDtM43Jim9MVNV6CI/HM4CEw6Hg80mk05Zrk6LIRKMZXC4HyaRBMOggmdQpK/MQiWSoqyvNaV1Z6ePQoT5qa62Axet1Eg5HKSmBREKntNSD9XBqWfjW15dO+aGYqj0U8uddAyznKKsOBnnXAGlSH2Huc0mSJOLxOD6fLy8wnMvcm2u7JElzai/U56aycrK+o1eepKVpmiQSiUm6wNIa00LfJ9M0icVitros1zFN1z7bPpqmSTQaxefz2b5nOY5pvu3jrzl+vqyUMc23fXzfJ36OVsKYZtM+Ux/H6zKb48+n71O1L8W5Z/d7d7mPaS7tU7FkTXQbGxupqanhqaeeyrWNjIzw0ksv8eY3v3mady4NNmwY2wKkKBJXX10+6Vv8CwVZJpdUnbVvKy1143YrXHqpn6oqL6ZpoijS6N9WpO73OzEMk1BosmPQ1q2VdHVFeOqpEzz66BsMDsYJh5MMDycwDJNVqwKcORPmqadO8MILHbz4Ygd33PFL/uEffsX3v/8a+/Z18tJLZ/n+91/jn/7peb7//dd49dUuMpmxSL2lpQZdN/Is5+rrg6RSGsmklnONgsI54BiGQWdn56RvNVYidvqCvZYXki5zQehij9DFHqGLPUIXe4Qu9ghd7FnUFYpoNMobb7yR+/nkyZO0trZSXl5OfX09n/nMZ/j7v/971q1bl7ONXbVqVW5b1FLm29/+La666p7F7saSILuapmkGIyNJfD4n0WiKSCTJhg0VxOMpUimNRMLaChWJJPF6HXR3R1EUiRdf7OTii6vRND33wN/ePsTwcJLu7igul4phmPT1xejri7FpUyXHjg1w6tQwhmHicins338OSZJobi6jry/G/fcfAmD9+gqCQbetu9BEdwiPR+XkySGGhxOk0zovvXSWvr4YPp8T0zTn5BgxlV3q5s0XhksUCPcNgUAgEAhWCosaUOzfv59rrrkm9/PnPvc5AG6//Xbuuusu/uIv/oJYLMbv//7vMzw8zFVXXcWjjz665GtQANx1V9tid2HJoCjWViePR8XjceRWajZuDFFe7kZVE9TV+aip8eF0KqTTBt3dUUZGUlRVeWlsLMPjcfCjHx3g9Okw9fWl7Nt3lquvbiAcTnHmTJhoNE1dXQnRaJraWj9Hjw5w0UXl+P0uTpwYYs0aD5IkMTiYIBBw56pm+3xOVq2y9vBHo2n27u2gubmcHTtqcTgsZ6nm5nL27z/Hs8+eorc3zvbtNXg8KmfOhDl4sI9t26r46EdbuOSS2lnZnE5vl7qGzZuX7MJhQRmvbzawqq8P2tahEAgEAoFAsHRZ1IDi6quvzksQmYgkSdx5553ceeedC9irwvCznx3N+zkcvjCqKrrdCooioygymYyVYF1bW0JpqQufz8nRowOsW1eOosisWuVn06ZyQqE6OjpGuPXWi9mxo5ZXX+3i3ntfn2AnOvbAf+BAL4oiEwy6CQbd1NePbT06dmyAgYE4b3rTGtavr+D558+gqjJutzXVZVni8OE+/H4npglnzoRz7/f7nSiKTGtrNzt2WHk7DoeS+/fhw31ceumqXJ8uv3w10Wiajo4wqqrM+gG4ra2XvXs7bMf3wgsdVFXVTtoPv1LJ6pvVeCokScLpdF4wuswWoYs9Qhd7hC72CF3sEbrYI3Sx58L4KnQRGB4ec5rSNJNHHulfsVWyx2OaY/kSlr+zVWcimdSIRtPIskQ8nsHlUhgZSZNI+PH7XbkHeYDW1u7cN/fjyT7wHzzYN+m18cd0d0dzr0ejadzusQd967opXC4Ft1uZtH/f73fS1xdjIjP1Kdv32TDduWRZob3dnDJ56kJFlmWampqELhMQutgjdLFH6GKP0MUeoYs9Qhd7hBpFYnxyvCxDU5NVrG2lI0nk7GUNw0pIz2QM3G6VVErH5VJIJjVSKZ1AwImqpnOXidQAADzMSURBVAEz70G+ry82bcAgSUwKBLJEo2lqavy51/1+J8nkWKJ1KqVTUuIildJJJvVJ14lG01RW+iadd6Y+2QUhUzH9uRyMjISnXbm7EDFNk+HhYaHLBIQu9ghd7BG62CN0sUfoYo/QxZ4L4BF3cRjvACTLEldcEWRiPYmVSraSrqJIuN0ONM2grMyDy6WQSukoioxhmNTXl+ByWUWnxj/IV1b6pg0YNm2qnNYd6Nprm3Ov19cHMQwzF8QYhsmmTZWjP2t526Wmc2qaqU92QchUTHeuWCxNdfXk6t0XOoZh0N3dLXSZgNDFHqGLPUIXe4Qu9ghd7BG62CMCiiLxmc9ceUGsSExE1w3AHC0y56SiwoPbrZBO60gSJBIZDMOkubksLxl6/IP8THai73rXOnburKOjI8yxYwOcOxfh2LEBOjrC7NxZx3vfuyH3eiyWprzczcmTQ5w4MUh5uZtAwEEg4CQQcBKLpSe9385daC4WpzMx07lqavxTvFMgEAgEAoFg6bFkC9std26/vYUXXzzLPff8ZrG7UjQkCbI5SW63ytq1JaiqjM/nRJYlXC6V2toSvF6Vjo4wsizR0lJNRYUXn89Jb2+MTCZBZ2eKnTvrcw/yM9mJXnJJLZdcUjutO9B496DKSi+bN1dimlbSeE1NgN/93W2YpsTBg72zchcqpMXpTOeqqroAI1GBQCAQCATLFslc4ZvARkZGCAaDhMNhSkpKFvTa8Xiau+9u5ctf3suaNTLPPz+8JBKzs3kOE5FlKCtzU1sbwOlU0HWDVEpDkiRCIS/r1lVQXe3h8OFBTpwYIpHQqKz0snv3Oj71qcsJBj25c01VZ2HjxgqOHBkYbY+yerXEpk2NbN9ek/cgP9X7F9NOtJB9mupcW7aE6O3tZvXq1SLhaxyGYXD27FmhywSELvYIXewRutgjdLFH6GKP0MUeEVAIBAKBQCAQCASCeSNCqwXAMAz6+/tFAs8EhC6TEZrYI3SxR+hij9DFHqGLPUIXe4Qu9ghd7BEBxQJgmib9/f3CYmwCQpfJCE3sEbrYI3SxR+hij9DFHqGLPUIXe4Qu9oiAQiAQCAQCgUAgEMwbEVAIBAKBQCAQCASCeSMCigVAkiSCwSCSdGEUtpstQpfJCE3sEbrYI3SxR+hij9DFHqGLPUIXe4Qu9giXJ4FAIBAIBAKBQDBvxArFAmAYBl1dXcIRYAJCl8kITewRutgjdLFH6GKP0MUeoYs9Qhd7hC72iIBiATBNk3A4LBwBJiB0mYzQxB6hiz1CF3uELvYIXewRutgjdLFH6GKPutgdWMnE42nuuec3fO1re9mxw83//M//oOsmyyGolSRwuxVM00TTTHTdRJbB6ZRZtSrA6tVBgkE3TqfCli2V3HBDM4qicPBgL319McrKPPh8TkZGkhw61E80miIQcLJ1azWXXbaKbduqmEuByemqVANLrqq2YGlWOxcIBAKBQFB4REBRJOLxNJ/+9CPcfXcrIHHxxdWYJssimAAwTUgk9Lw2XYdEwqC9PUx7exhJgqoqH21tPfzsZ0epqfGzcWMIv9/J88+foaNjBEWRUFUZwzBRFJn29mGefPIEhmECJtu3q+j6OW68cT2XXFI76UEzk9F57bUuvvvd19i3r5NMxsDncxIMunjqqRO8850Xoaoy+/adRVFk/H4nhw710dbWw86ddezZs9H2nOJBt7hkMjoPPniEvXs7Zn1fBAKBQCAQLE9EQFEkfvzjw/zoR21oGsiyyYED0dGH6JWDaUJfX4x0WgessV166SpME+JxjZISFydPDrFhQ4iaGj+JRIajRweIxdLEYhlWrfKjKD7a2/vZv7+LW27Zzs03b849aGYfSu+//zD79nWij8Y3iUSGZFIjkdD493/fT11dkMsvX43f78z1LRpNs3dvB83N5ezYUZtrX+oPupIkEQqFlr17RFtbL3v3dlBXF5zVfZmJlaJLoRG62CN0sUfoYo/QxR6hiz1CF3tEDkWRuP/+g8Tj1hOwYTAaUCxyp4qAYUA8niGV0gmHU5w5E+bMmTCyLJFO6yiKTCyWBiCR0BgYiBOPa5SWuvF4HDgcfhoby4lE0jz00DHa2npz584+lA4OJtB1k4oKDzU1fkpLPaTTOi6XQkfHCKdPD+c9tAL4/U4URaa1tTuvffyD7vr1FaxaFWD9+grq6oLs3duRd/3FQJZlQqEQ8lz2gy1BWlu7cwHbeKa6LzOxUnQpNEIXe4Qu9ghd7BG62CN0sUfoYo9Qo0icPDmc+7eqSlx9dRmqujKjWV23IqV4PEM0miYaTeN2K6RSOk6nQjJpBVZDQwk0zcQ0TdxulUxGo75ewu1WcLtVBgbieQ+a2YfS/v44qirnVg4cDgVJkojHMwAMD6ds++X3O+nri+W1FfpBt9AYhkFHR8eyd4/o64tN0jiL3X2ZiZWiS6ERutgjdLFH6GKP0MUeoYs9Qhd7REBRJJzO/G0zNTWuRepJ8TFN0HUT07QeFv1+J8mktYKQTuu43ZYWyaSOYRg4nQqZjIHbreL3WwngLpeCppl5D5rTPZQ6HDLJpIbDIaNp9h/qaDRNZaUvr63QD7qFxjRNYrHYsnePqKz0EY2mbV+zuy8zsVJ0KTRCF3uELvYIXewRutgjdLFH6GKPCCiKxFz2hy9nJAlkWcI0raCgvj5IfX0QwzBxOhV03UqiBlCU7HskTNOktNSTO08qpaOqUt6DZvahdNWqAJpm5AUOmYyBolirFuXl7kkPr9FoGl03aGmpyWsv9IOuwJ6Wlhp03Zj1fREIBAKBQLB8EQFFkfjoR1soK7P/JnwlIUlWgOD1qqxZEyAWSyNJ4PWqjIykqKryEYmkOHq0n1RKx+1W0XWdYNBFaakbsIKJZFKjosKb96CZfShtbi6jpMTFyEiKSMT6E4+nMQyThoZS3vOeDXR0hDl2bIBz5yIcOzZAR0eYnTvrcrayE88pHnSLy7ZtVezcWTfr+yIQCAQCgWD5IlyeisTll6/mL/7iTfzv//0rDMNk377winN5Aisp2+tVaGmpoaEhyBtvDJJMarhcCo2NZRiGTiSSIZ3WMQwTh0NmZCTFG28McO7cCCdOuDh3LsOaNSW8850X5T1obtxYQU2Nn8cfP0Emo48GEVZOSkWFhw0bKnjPezZw000bOHJkIGcDW18fnNIGNvugO97lKRtMLIUHXVmWqampWfbJXg6Hwp49G2luLp/VfZmJlaJLoZmoi7BEthDzxR6hiz1CF3uELvYIXewRAUWR6O+P8m//th+wHrpPnEgsco+KRzyeoaMjzOHD/WiaQdZJTVEkysq8aJpOX18csIIPTTOIxzVGRtKMjGSory9h9eoSVFXOPRDt33+OZ589RVdXhFRKx+FQMc00YFJXV8rv/u5Wdu6sn3MAUOgH3UKy0h4GHQ6FHTtqC7L9T5IkSktLz79TK4zxuix1S+SFRMwXe4Qu9ghd7BG62CN0sUcyV3hWycjICMFgkHA4TElJyYJd96abfsTPfnYMsL5Rv+66Cp54YgBNW5lyq6o0+rBikskYuQeX7PTSNB1ZlnE6ZdLpbNVthd27Q5w6BRs2hPD7HdTXl9LdHWVgIMHRo31EoxlGRtKUlbmpqyshFssQDif57d/eyuc+92aASQ9R41cclstDVPZh8IUXzrB6tUk06iESySy7cRQLwzA4deoUDQ0N4luhcYzXpbW1h3vvfd229kdHR5hbb734gsntEvPFHqGLPUIXe4Qu9ghd7BErFEXiySdP5P0cDK5sqTXNxO22VhhkWR7d3qSgafqo05M6Wn1bw+VScbsdaJqG1ytjmhqdnRFcLoVjx4bYvfsiBgcTSJKMrpuUlblJp3VME9assYLCJ588yXXXNQMUtIDaYjG+PkZ1dZJYLEBtrbTsxlEsTNMknU4LV40JjNdlNpbIF8ocEvPFHqGLPUIXe4Qu9ghd7BGhVZFIJLTF7sKCI8vWXqesN7Msk3Nmyn7wTNP6k3WHMgwTXbf+fe7cCKmUht/vJBJJk0hkkCQJj8eBJEkMDVnbxgIBJ6mURmtr95KvKzFbVso4BIvHUrdEFggEAsHKRQQUReJCrMguy2NBgixLo/aw1muGYdWqkCQpLzndNBktbKcQDqcoK7OcnwIBJ/G4VWcCxupOgOUKVVbmpq8vtmIeolbKOASLh7BEFggEAsFiIQKKIpG1RAXrQfqZZwbR9ZW7PCbL0mjAQO6PrpsoijRap8LMrUqAtXKRThu8/HKEkhIPkUgaj8dBMGjpVlcXRFWlXBCRLYSXSlluUcGgm8pK34p5iBo/jmQyv8/LaRzFQpZl1qxZI/arTmC8LsISeQwxX+wRutgjdLFH6GKP0MUeoUaR+MQnLsn92zShuzvNSt1uJ0kQCDhIpXQ0zcDjcYwGDDper7VlxwokTEzTSshOJDR03cQwHESjacLhJNde20hpqVWkbvXqAJs2VZJIZOjvj5FKZTBNGBpKsHp1gNJSNy0tNSvmIWpsHBl0XQWswGu5jaNYSJKE3+9HuhCX/qZhvC6i9scYYr7YI3SxR+hij9DFHqGLPSKgKBL/+3/vYteuNYDlgPT+91ehqitv8rndCmvWlODxOPB4VHw+J36/C5/PicdjbWWqrfVTVeUlGHQRCDhxOhX8ficXXVTKjTeW4/Go/PZvb+Xv/u4adu2qp6MjTHv7EJs2hWhsLCOTMXC5VCorvaxaFSAYdLNrl2UZu1IeorLj6OwcJh7vpqtrZFmOo1jous6xY8fQdX2xu7KkGK9L1hL51lsvZvPmSjwelc2bK7n11osvOJcwMV/sEbrYI3SxR+hij9DFnpVtPbSIBIMefvCD97Bnz39z5MhgLhdgpZFK6fT3x1i1KsBll61i1aoA6bSOx6OSShn09UVJJDTcbpXaWj+rVvkxTSu3wuORaWgw+N3fXc/27TU4HAo33riOdNrgySfb6e6O0tBQyvXXN1NR4WFkJJVXmwEsd6ShoSSaZjI8HCed1ti6tZrLLls1Y/2Gmeo+LGRdiOzDYFNTKceOHSOdVqmrK112dSiKqVk22V+Qz3hdCln7Y7kj5os9Qhd7hC72CF3sEbpMRgQURaK/P8qePf/NgQMDK3JlIotlBatz5kyYdFqnqamUL33pWh5//AR793ZQVhbKqw2xZUt17ttSXdc5fvw469bVoCjWA/zDDx9n//6zVFR4Wbu2lGg0zcBAnA0bKvi939uReyidWMSrosKDy6Wg6wZlZe5ZBRPTFQG78cZ1PPzw8QUtEuZwWBXHfb4IH/zgOhRleQQRWURhNYFAIBAILkxEQFEk7rjjWQ4dGljsbiwYmmYSjaZ59NF2Kiv9DAzE51wbYnwthpneN5dj7Zjp/em0wf79Z5d9fYuF5HzviUAgEAgEguXJytyHswR4/PE3yK6I6brJI4/0r2iXJ4BkUiOV0njkkeOzqqkgyzKNjY05p4S51GI437oNM73/ySfbF6UuxERNlhPFrKWxnHUpJkIXe4Qu9ghd7BG62CN0sUfoYo9Qo0gMD6dy/zZNiMX0FevylEXTrPoT/f3xWddUUNWxRbK51GI437oNM72/uzu6aHUhxmuynCh2LY3lqkuxEbrYI3SxR+hij9DFHqGLPUKXyYiAokiUlrpy/1ZViZtvrl7RuRRgjdMwTEIh76xqQxiGwfHjx3PJTXOpKXG+9Sdmen9NjX9R6ltM1GQ5UcyaIMtZl2IidLFH6GKP0MUeoYs9Qhd7hC72iICiSFx//UVcaKthbreKy6Wye/e6edWGmEtNifOtPzHT+6+9tnlF1LdYSFZKTRCBQCAQCARzQ6zZFIk773wbzz13kgMHLozEbFWV8PudvPOdzXzqU5fnXJ6ye+qzD5XT1VTI1mKYzfvmcux8rnXjjetwOuV5n/9C5HzviUAgEAgEguWJCCiKRCjk5z//873s3v2f9PQkFrs7RUdVFaLRNPfff4R9+7rYvbuZPXs2cfRoPwcO9DA8nCKZzHDXXa1861v7CQbdbN9eyVVX+VmzJs2xY8O0tnbT1RUhEHAhSeB0ymzeXMnWrZWYpsS99/4mr7bBjTeuo7m5PFfzoL4+OOuaB9m6D9O9f6bX7VjI2hWLeU07JmrW3R3B63UgSXD8+AD33vubZVdXQyAQCAQCwcxIprmyU4VHRkYIBoOEw2FKSkoW7LpdXWGuuOJ7dHZGAOsbfE1b0VKjKNZDpdNp/bnsslV86ENbePXVbtrbhzh2rJ+RkRSyLBMIOPH7HdTW+rnoonJMU8pV0J64UjCxHsT415dSbQO7Ogxz7atpmhiGgSzLSNLMOTeFuGYxKHS/5qrLhYLQxR6hiz1CF3uELvYIXewRutgjViiKxKc//VgumJAk8PkURka0Fe305HAoqKr1JxBw8eKLnYTDKd70pjX098cAiTVrgpimSTyeoazMQzic4PHH29m9ez3r11fkzrUc60EUqg6Dpmk4nfZuScW6ZqEpRr/mosuFhNDFHqGLPUIXe4Qu9ghd7BG6TOYCSxteOJ599lTu34oisXt3CEVZWZHsxMBc0wxkWULTLOcDXTc5dWqYgYE40Wgah0NGVWUcDgVJkkilMlxyiZt0WmdgIJ53rsWuBzEfClGHwTAMTp48OWv3iGLWfjgfCt2vuepyoSB0sUfoYo/QxR6hiz1CF3uELvaIgKJIRKOZxe7CgmMY5qizlUkmYwUXqZRGJJLGMExUdWy6ORwyyaQGWO+JRCbbjS52PYi5Uuw6DEvlmrNhqfZLIBAIBAJB4REBRZHw+x2L3YUFR5al0ergEg6HjGGYuFwqgYAzb+UCIJMxcLtVwHpPIDD54XMx60HMh2LWYVhK15wNS7VfAoFAIBAICo8IKIrE297WkPdzJrPylsYm5oOoqpy3EqEoEg0NpVRUePH7nWQyBppmkMnomKY56gAk4XYrVFR48861HOtBFKoOgzyHAiZLtfZDMfo1F10uJIQu9ghd7BG62CN0sUfoYo/QZTLC5alITHR5uhCYj8tTdbWf9esrME2Ey9MyueZy7pdAIBAIBILCIwKKItLVFeYP//AXPPFEO8GgQk9Pelm6PLlcEhUVPgIBB+m0wfBwkmRSQ5IkfD4HZWVuJEkmFksjSbB6dZAbb1zHpz51OV6vk7a2XvbvP8dvftPN6dNhEokMJSVutm2r5Prr19LSsoajRwenrKOwVOoszIbz7atpmsRiMXw+36zt6JaqPoXs13x0uRAQutgjdLFH6GKP0MUeoYs9Qhd7RECxAOi6zvHjx1m3bh2KMr8HPLuHsy1bqpAkkwMH+iY9sAFL8iFzPIXQZaUhNLFH6GKP0MUeoYs9Qhd7hC72CF3sEbrYI+pQFJF4PM13vrOfL31pL299a4D77vufJV3cTpLA41HIZAwMw8TpVKit9REMeuntjZFIZPD5HFx22So++ckrcbsVHnnkOC+80MnwcJKSEhcNDaXIssTQUBJZltiypZLrr78Ih0PKC3y2bq3EMExOnuzigQd6SCYNTBNcLoXa2sCSC34EAoFAIBAIBPaIgKJIxONpPvWpX/CDH7w+Wn8isNhdmhHThHhcz/2cSOicODECjCDLoCgy0WiGRx55g+eeO0NNjY9oNEMqZRXsa28f5KWXOlFVhepqH6GQlxMnBvnZz45RU+Nj06ZKSkpcHDjQy/33H0KW4e1vL6G1NcEbbwwB0NxcxsBAgra2HrHXXiAQCAQCgWAZINLUi8QDDxzlf/7nUC5nIhzWFrdDBcDjUXG5rITroaEk7e3D6LpBbW0JFRVeZFnCNC372EzGoKzMQ1mZh97eKD09UbxeB6tWBfB6HUQiaSKRNNGoweBgksbGMpqayhkcTOL1OqirC7J3bwdtbb2LPewFRZIknE6n2Jc5AaGLPUIXe4Qu9ghd7BG62CN0sUfoYs+SDij+9m//FkmS8v5s3Lhxsbs1K558sp1YzCpup2kmjzzSv6S3O82EYViVryVJQtdNwCSV0tA0yyY2Hs+g6yayLGOaJqmUzuBggng8g6oqpFI6HR1hADo6wrjdKg6Hyi9+0Q9IuN1WsCLLEh0d4UWv9LxYyLJMU1OTsKSbgNDFHqGLPUIXe4Qu9ghd7BG62CN0sWfJq7Flyxa6urpyf55//vnF7tKs6O6O5lYnZBmamjws97mXrYRt/S1jmpbbATBaW8KqPWE1WUFFMqnhcikYhpmrhh2JpHG5FDweBb/fwOMZ29Lkcim54y7EisqmaTI8PMwK90qYM0IXe4Qu9ghd7BG62CN0sUfoYo/QxZ4l/4irqio1NTW5P6FQaLG7NCtqavxkV8NkWeKKK4LI8vJeHstWwrb+NpAkckt+DoeCJGVXMQAkXC4Ft1slldKRZSlXDTsQcJJK6aRSOi0tflKpsbyNVErPHXchVlQ2DIPu7m4MY+UVQjwfhC72CF3sEbrYI3SxR+hij9DFHqGLPUs+oDh+/DirVq2iqamJD3/4w5w5c2axuzQrrr22GZ/PsdjdKBhWUraEaZqjSeYSLpeKqkpomoHX60BRsoGGFUyUl3vweh1omo7LpVBXFwSgri5IMqmRTmtUVnoxTZNkUiOV0jEMk7q64KJXehYIBAKBQCAQzI4l7fJ05ZVXctddd7Fhwwa6urr4whe+wK5duzjw/2/v3qOirvM/jr9mhuEuoHL1xkXE1IS8R7rlBcVLrdpFV91ddF0zL2kqbpln09yzS5c9raWm7npK29NmVpqnWi1TIS9oiOItJWUxvICEyE0QZOb9+8Mf3xzmA4wjDrfX4xxP8p3vDJ/Pc76kH2e+3zl1Cq1aqa+aVF5ejvLycu3roqIiALevG2wy3f6XcJ1OB71eD7PZbPGSVU3b9Xo9dDpdjdurHvfO7ePGRSAxsTs2bToBg0Gnvd1Jp8P//4X8F5WVUuN2vR5Wr2yotosITKbbn1Z954lCZrPAbAacnCwfo6btJpNAxHq7iKCsrBJGox56PeDn54aAAHcUFt5CTk4R9PrbczQaq/6rx/XrZaisrERQkCcCAjxQVlaBK1eKUVpaAW9vZ23/tm1d8eOP16HTAeHhrVFWVoFLl8rxyCMd0bOn/319nm63MNu03WAwQEQstleNpabtto79zu1ms1kba3OZ070+T1VjufO2pj4n1djvdk5A1c++yWJ7U55TfTxPVfdVjaWpzqk+nieTyQQRsTpmmvKcahu7rXOq6gKg2czpzrHYOyeTyaT9mWQwGJrFnOrabsucqrqYTKZmM6faxm7rZ2006gXFqFGjtN9HRkZiwIABCA4OxpYtWzB9+nTlfRISEvDqq69abc/IyICnpycAwNvbG0FBQbh69SoKCwu1fXx9feHr64vLly/jxo1f3rsfGBgIHx8fXLhwARUVFdr2Dh06wNPTExkZGRYHQWhoKFxdnTBvXhcMGuSB/fsvwtfXACcnHTw8DBg16pe3bd26ZcZnn+UiIMAZgwe30bYXFlZix448hIS4oX9/b217Tk45EhOvo3t3Tzz4oOcd8ytFSkoRevf2QufO7tr2U6dKcOpUCQYN8kFgoIu2/fvvC/G//5Vh+PC28Pb+5TA4fLgQly7dxNixfnB1NaBVK2e4uBixY0cerl8vx7hxfmjXrhX69WsPJyc99u0rxrFjVxARYYCLiwE+Pq4wm3VISbkJb28dBgxohbCwNjAYdMjJuYlLl/QIDW2NMWPaQESQn1+IX/3KDRERfvDwqETr1mZ4ejojMNATXbq0htFoQHZ29n17npycnHDu3DmLY6VLly6orKxEZmamtk2v1yMiIgI3btzApUuXtO3Ozs4ICwtDYWEhcnJ+OYHcw8MDHTt2RH5+PvLy8rTtdR17V65cQXFxMTIyMqDT6ZrFnOrjedLr9RZdmsOc6uN5CgkJgV6vt+jS1OdUH89TmzZt4OHhgStXrqCsrKxZzKk+nicRgYuLC0QE58+fbxZzAu79ebr9D2Zl0Ol0zWZOwL0/TyKC4uJiXL9+Hf7+/s1iTvXxPJlMJu3Po7CwsGYxp9qeJ1svhtTkPim7X79+iImJQUJCgvJ21SsUVU9I1Sdlt4R/WeCcOCfOiXPinDgnzolz4pw4J0e8QtGkFhQlJSXo1KkTli9fjnnz5tl0n6KiInh7e6OwsFBbUDia2WxGfn4+2rRpoz1RxC4qbKLGLmrsosYuauyixi5q7KLGLmqNukR8fDySkpJw4cIFHDx4EOPHj4fBYMCkSZMaemh3RUSQl5eHJrR2cwh2scYmauyixi5q7KLGLmrsosYuauyi1qjPobh06RImTZqEa9euwc/PD4MGDcKhQ4fg5+fX0EMjIiIiIiI08gXF5s2bG3oIRERERERUi0b9lqfmQqfTwdvbW7sKC93GLtbYRI1d1NhFjV3U2EWNXdTYRY1d1JrUSdn2aAwnZRMRERERNVd8hcIBzGYzsrOzrS4f1tKxizU2UWMXNXZRYxc1dlFjFzV2UWMXNS4oHEBEtA+JoV+wizU2UWMXNXZRYxc1dlFjFzV2UWMXNS4oiIiIiIjIblxQEBERERGR3bigcACdTgdfX19eEaAadrHGJmrsosYuauyixi5q7KLGLmrsosarPBERERERkd34CoUDmM1mXLx4kVcEqIZdrLGJGruosYsau6ixixq7qLGLGruocUHhACKCGzdu8IoA1bCLNTZRYxc1dlFjFzV2UWMXNXZRYxc1LiiIiIiIiMhuXFAQEREREZHduKBwAL1ej8DAQOj1zH0ndrHGJmrsosYuauyixi5q7KLGLmrsosarPBERERERkd24vHIAs9mM//3vf7wiQDXsYo1N1NhFjV3U2EWNXdTYRY1d1NhFjQsKBxARVFRU8IoA1bCLNTZRYxc1dlFjFzV2UWMXNXZRYxc1LiiIiIiIiMhuXFAQEREREZHdeFK2A1R9CIqHhwd0Ol2DjKExYhdrbKLGLmrsosYuauyixi5q7KLGLmpcUBARERERkd34licHMJlM+PHHH2EymRp6KI0Ku1hjEzV2UWMXNXZRYxc1dlFjFzV2UeOCwkF4eTE1drHGJmrsosYuauyixi5q7KLGLmrsYo0LCiIiIiIishsXFEREREREZDeelO0AVR+C4uzszCsC3IFdrLGJGruosYsau6ixixq7qLGLGruo8RUKB3FycmroITRK7GKNTdTYRY1d1NhFjV3U2EWNXdTYxRoXFA5gNptx7tw5nsRTDbtYYxM1dlFjFzV2UWMXNXZRYxc1dlHjgoKIiIiIiOzGBQUREREREdmNCwoiIiIiIrIbr/LkACICs9kMvV7PKwLcgV2ssYkau6ixixq7qLGLGruosYsau6jxFQoHqaysbOghNErsYo1N1NhFjV3U2EWNXdTYRY1d1NjFGhcUDmA2m5GZmckrAlTDLtbYRI1d1NhFjV3U2EWNXdTYRY1d1LigICIiIiIiu3FBQUREREREduOCwkH0eqZWYRdrbKLGLmrsosYuauyixi5q7KLGLtZ4lSciIiIiIrIbl1gOICIoKSlBM1+73TV2scYmauyixi5q7KLGLmrsosYuauyixgWFA5jNZly6dIlXBKiGXayxiRq7qLGLGruosYsau6ixixq7qHFBQUREREREduOCgoiIiIiI7MYFhQPodDo4OzvzI9qrYRdrbKLGLmrsosYuauyixi5q7KLGLmq8yhMREREREdmNr1A4gIigoKCAVwSohl2ssYkau6ixixq7qLGLGruosYsau6hxQeEAZrMZOTk5vCJANexijU3U2EWNXdTYRY1d1NhFjV3U2EWNCwoiIiIiIrIbFxRERERERGQ3LigcQKfTwcPDg1cEqIZdrLGJGruosYsau6ixixq7qLGLGruo8SpPRERERERkN75C4QBmsxl5eXk8gacadrHGJmrsosYuauyixi5q7KLGLmrsosYFhQOICPLy8niJsWrYxRqbqLGLGruosYsau6ixixq7qLGLGhcURERERERkNy4oiIiIiIjIblxQOIBOp4O3tzevCFANu1hjEzV2UWMXNXZRYxc1dlFjFzV2UWsSV3las2YN3nzzTeTk5CAqKgqrVq1C//79bbovr/JERERERHT/NPpXKD7++GMsXLgQy5Ytw9GjRxEVFYXY2Fjk5uY29NBsZjabkZ2dzSsCVMMu1thEjV3U2EWNXdTYRY1d1NhFjV3UGv2C4q233sKMGTMwbdo0dO/eHevWrYO7uzvee++9hh6azUQEhYWFvCJANexijU3U2EWNXdTYRY1d1NhFjV3U2EWtUS8oKioqkJqaipiYGG2bXq9HTEwMkpOTG3BkREREREQEAE4NPYDa5OXlwWQyISAgwGJ7QEAAzp49q7xPeXk5ysvLta8LCwsBANevX4fJZAJw+4QavV4Ps9lsscKsabter4dOp6txe9Xj3rkdgPZymMlkQlFREQoLC2EwGKxeJjMYDBARi+1VY6lpu61jv19zqmu7LXOq6lJQUACj0dgs5mTv2Ku237p1C0VFRbh+/ToMBkOzmFN9PE9Vx0pVl+YwJ9XY73ZOIoLi4mKLLk19TvXxPJnNZpSUlKCgoED7/k19TvXxPJlMJhQXF6OwsNDqhNKmOqfaxm7rnKq6FBUVaeNp6nO6cyz2Pk91/RndFOdU13Zb5nTnn0dGo7FZzKm2sRsMBrRq1arOk9Ab9YLCHgkJCXj11VettoeEhDh+MERERERETZgtFzZq1AsKX19fGAwGXL161WL71atXERgYqLzPkiVLsHDhQu1rs9mM/Px8tG3btsEu8VVUVISOHTvi4sWLvNLUHdjFGpuosYsau6ixixq7qLGLGruotcQurVq1qnOfRr2gcHZ2Rp8+fbB7926MGzcOwO0Fwu7duzF37lzlfVxcXODi4mKxzcfH5z6P1DZeXl4t5uC7G+xijU3U2EWNXdTYRY1d1NhFjV3U2MVSo15QAMDChQsRFxeHvn37on///li5ciVu3LiBadOmNfTQiIiIiIhavEa/oJg4cSJ+/vlnvPLKK8jJycFDDz2EnTt3Wp2oTUREREREjtfoFxQAMHfu3Brf4tQUuLi4YNmyZVZvxWrp2MUam6ixixq7qLGLGruosYsau6ixi5pO+MkcRERERERkp0b9wXZERERERNS4cUFBRERERER244KCiIiIiIjsxgXFfbZmzRqEhITA1dUVAwYMwPfff9/QQ3Ko5cuXQ6fTWfx64IEHtNtv3ryJOXPmoG3btvD09MRTTz1l9UGGzcF3332HJ554Au3atYNOp8Pnn39ucbuI4JVXXkFQUBDc3NwQExODc+fOWeyTn5+PKVOmwMvLCz4+Ppg+fTpKSkocOIv6V1eXqVOnWh0/I0eOtNinuXVJSEhAv3790KpVK/j7+2PcuHFIT0+32MeWn5usrCyMGTMG7u7u8Pf3x+LFi1FZWenIqdQrW7oMHjzY6nh57rnnLPZpbl3Wrl2LyMhI7Zr40dHR2LFjh3Z7SzxWgLq7tMRjpbrXXnsNOp0OL7zwgratpR4vd1J14fFSNy4o7qOPP/4YCxcuxLJly3D06FFERUUhNjYWubm5DT00h+rRoweys7O1X/v379duW7BgAb744gt88sknSEpKwpUrV/Dkk0824Gjvjxs3biAqKgpr1qxR3v7GG2/gnXfewbp163D48GF4eHggNjYWN2/e1PaZMmUKTp8+jV27duHLL7/Ed999h2effdZRU7gv6uoCACNHjrQ4fj766COL25tbl6SkJMyZMweHDh3Crl27cOvWLYwYMQI3btzQ9qnr58ZkMmHMmDGoqKjAwYMHsWnTJmzcuBGvvPJKQ0ypXtjSBQBmzJhhcby88cYb2m3NsUuHDh3w2muvITU1FUeOHMHQoUMxduxYnD59GkDLPFaAursALe9YuVNKSgrWr1+PyMhIi+0t9XipUlMXoGUfLzYRum/69+8vc+bM0b42mUzSrl07SUhIaMBROdayZcskKipKeVtBQYEYjUb55JNPtG1nzpwRAJKcnOygEToeANm2bZv2tdlslsDAQHnzzTe1bQUFBeLi4iIfffSRiIj88MMPAkBSUlK0fXbs2CE6nU4uX77ssLHfT9W7iIjExcXJ2LFja7xPS+iSm5srACQpKUlEbPu5+e9//yt6vV5ycnK0fdauXSteXl5SXl7u2AncJ9W7iIg89thjMn/+/Brv0xK6iIi0bt1aNmzYwGOlmqouIi37WCkuLpYuXbrIrl27LDq09OOlpi4iLft4sRVfobhPKioqkJqaipiYGG2bXq9HTEwMkpOTG3Bkjnfu3Dm0a9cOYWFhmDJlCrKysgAAqampuHXrlkWjBx54AJ06dWpRjTIzM5GTk2PRwdvbGwMGDNA6JCcnw8fHB3379tX2iYmJgV6vx+HDhx0+ZkdKTEyEv78/unbtilmzZuHatWvabS2hS2FhIQCgTZs2AGz7uUlOTkbPnj0tPgA0NjYWRUVFFv9C25RV71Llww8/hK+vLx588EEsWbIEpaWl2m3NvYvJZMLmzZtx48YNREdH81j5f9W7VGmpx8qcOXMwZswYi+MC4P9baupSpaUeL7ZqEh9s1xTl5eXBZDJZfaJ3QEAAzp4920CjcrwBAwZg48aN6Nq1K7Kzs/Hqq6/iV7/6FU6dOoWcnBw4OzvDx8fH4j4BAQHIyclpmAE3gKq5qo6VqttycnLg7+9vcbuTkxPatGnTrFuNHDkSTz75JEJDQ5GRkYGXX34Zo0aNQnJyMgwGQ7PvYjab8cILL2DgwIF48MEHAcCmn5ucnBzl8VR1W1On6gIAkydPRnBwMNq1a4cTJ07gxRdfRHp6OrZu3Qqg+XY5efIkoqOjcfPmTXh6emLbtm3o3r070tLSWvSxUlMXoOUeK5s3b8bRo0eRkpJidVtL/n9LbV2Alnu83A0uKOi+GjVqlPb7yMhIDBgwAMHBwdiyZQvc3NwacGTUFPzmN7/Rft+zZ09ERkaic+fOSExMxLBhwxpwZI4xZ84cnDp1yuK8I6q5y53nzvTs2RNBQUEYNmwYMjIy0LlzZ0cP02G6du2KtLQ0FBYW4tNPP0VcXBySkpIaelgNrqYu3bt3b5HHysWLFzF//nzs2rULrq6uDT2cRsOWLi3xeLlbfMvTfeLr6wuDwWB1dYSrV68iMDCwgUbV8Hx8fBAREYHz588jMDAQFRUVKCgosNinpTWqmmttx0pgYKDVyfyVlZXIz89vUa3CwsLg6+uL8+fPA2jeXebOnYsvv/wSe/fuRYcOHbTttvzcBAYGKo+nqtuaspq6qAwYMAAALI6X5tjF2dkZ4eHh6NOnDxISEhAVFYW33367xR8rNXVRaQnHSmpqKnJzc9G7d284OTnByckJSUlJeOedd+Dk5ISAgIAWebzU1cVkMlndpyUcL3eLC4r7xNnZGX369MHu3bu1bWazGbt377Z4D2dLU1JSgoyMDAQFBaFPnz4wGo0WjdLT05GVldWiGoWGhiIwMNCiQ1FREQ4fPqx1iI6ORkFBAVJTU7V99uzZA7PZrP2PrSW4dOkSrl27hqCgIADNs4uIYO7cudi2bRv27NmD0NBQi9tt+bmJjo7GyZMnLRZbu3btgpeXl/aWj6amri4qaWlpAGBxvDS3Lipmsxnl5eUt9lipSVUXlZZwrAwbNgwnT55EWlqa9qtv376YMmWK9vuWeLzU1cVgMFjdpyUcL3etoc8Kb842b94sLi4usnHjRvnhhx/k2WefFR8fH4urADR3ixYtksTERMnMzJQDBw5ITEyM+Pr6Sm5uroiIPPfcc9KpUyfZs2ePHDlyRKKjoyU6OrqBR13/iouL5dixY3Ls2DEBIG+99ZYcO3ZMfvrpJxERee2118THx0e2b98uJ06ckLFjx0poaKiUlZVpjzFy5Ejp1auXHD58WPbv3y9dunSRSZMmNdSU6kVtXYqLiyU+Pl6Sk5MlMzNTvv32W+ndu7d06dJFbt68qT1Gc+sya9Ys8fb2lsTERMnOztZ+lZaWavvU9XNTWVkpDz74oIwYMULS0tJk586d4ufnJ0uWLGmIKdWLurqcP39eVqxYIUeOHJHMzEzZvn27hIWFyaOPPqo9RnPs8tJLL0lSUpJkZmbKiRMn5KWXXhKdTifffPONiLTMY0Wk9i4t9VhRqX71opZ6vFR3ZxceL7bhguI+W7VqlXTq1EmcnZ2lf//+cujQoYYekkNNnDhRgoKCxNnZWdq3by8TJ06U8+fPa7eXlZXJ7NmzpXXr1uLu7i7jx4+X7OzsBhzx/bF3714BYPUrLi5ORG5fOvbPf/6zBAQEiIuLiwwbNkzS09MtHuPatWsyadIk8fT0FC8vL5k2bZoUFxc3wGzqT21dSktLZcSIEeLn5ydGo1GCg4NlxowZVgvy5tZF1QOAvP/++9o+tvzcXLhwQUaNGiVubm7i6+srixYtklu3bjl4NvWnri5ZWVny6KOPSps2bcTFxUXCw8Nl8eLFUlhYaPE4za3LH/7wBwkODhZnZ2fx8/OTYcOGaYsJkZZ5rIjU3qWlHisq1RcULfV4qe7OLjxebKMTEXHc6yFERERERNSc8BwKIiIiIiKyGxcURERERERkNy4oiIiIiIjIblxQEBERERGR3bigICIiIiIiu3FBQUREREREduOCgoiIiIiI7MYFBRERERER2Y0LCiIiB1q+fDkeeuihhh4G1aONGzfCx8fnnh+noqIC4eHhOHjw4D09RkhICI4cOXLP4yEishUXFEREdZg6dSp0Oh10Oh2MRiMCAgIwfPhwvPfeezCbzffl+40bN67O/RITE6HT6VBQUFAv31en0+Hzzz+vl8dqbAYPHqw9h66uroiIiEBCQgJE5K4eJyQkBCtXrrTYNnHiRPz444/3PMZ169YhNDQUjzzyCACgvLwcv/vd7+Dl5YWIiAh8++23Fvu/+eabeP755y22OTs7Iz4+Hi+++OI9j4eIyFZcUBAR2WDkyJHIzs7GhQsXsGPHDgwZMgTz58/H448/jsrKyoYeHtlgxowZyM7ORnp6OpYsWYJXXnkF69atu+fHdXNzg7+//z09hohg9erVmD59urbtn//8J1JTU5GcnIxnn30WkydP1hZAmZmZ+Ne//oW//vWvVo81ZcoU7N+/H6dPn76nMRER2YoLCiIiG7i4uCAwMBDt27dH79698fLLL2P79u3YsWMHNm7cqO1XUFCAP/7xj/Dz84OXlxeGDh2K48ePWz3e+vXr0bFjR7i7u2PChAkoLCwEcPstUZs2bcL27du1f1FPTEy0uv+FCxcwZMgQAEDr1q2h0+kwdepUALf/ZXvevHnw9/eHq6srBg0ahJSUlLua74ULF6DT6bB161YMGTIE7u7uiIqKQnJyssV+Bw4cwODBg+Hu7o7WrVsjNjYW169ft2kcVa+wfP311+jVqxfc3NwwdOhQ5ObmYseOHejWrRu8vLwwefJklJaWavczm81ISEhAaGgo3NzcEBUVhU8//bTOObm7uyMwMBDBwcGYNm0aIiMjsWvXLu32jIwMjB07FgEBAfD09ES/fv0sXhUYPHgwfvrpJyxYsEB7bgD1W57Wrl2Lzp07w9nZGV27dsW///3vWseWmpqKjIwMjBkzRtt25swZ/PrXv0aPHj0wZ84c/Pzzz8jLywMAzJo1C6+//jq8vLysHqt169YYOHAgNm/eXGcTIqL6wAUFEZGdhg4diqioKGzdulXb9swzz2h/IU5NTUXv3r0xbNgw5Ofna/ucP38eW7ZswRdffIGdO3fi2LFjmD17NgAgPj4eEyZM0F4Ryc7O1t4Cc6eOHTvis88+AwCkp6cjOzsbb7/9NgDgT3/6Ez777DNs2rQJR48eRXh4OGJjYy3GYKulS5ciPj4eaWlpiIiIwKRJk7RXZNLS0jBs2DB0794dycnJ2L9/P5544gmYTKa7Gsfy5cuxevVqHDx4EBcvXsSECROwcuVK/Oc//8FXX32Fb775BqtWrdL2T0hIwAcffIB169bh9OnTWLBgAX77298iKSnJpjmJCPbt24ezZ8/C2dlZ215SUoLRo0dj9+7dOHbsGEaOHIknnngCWVlZAICtW7eiQ4cOWLFihfbcqGzbtg3z58/HokWLcOrUKcycORPTpk3D3r17axzTvn37EBERgVatWmnboqKisH//fpSVleHrr79GUFAQfH198eGHH8LV1RXjx4+v8fH69++Pffv22dSDiOieCRER1SouLk7Gjh2rvG3ixInSrVs3ERHZt2+feHl5yc2bNy326dy5s6xfv15ERJYtWyYGg0EuXbqk3b5jxw7R6/WSnZ1d5/e70969ewWAXL9+XdtWUlIiRqNRPvzwQ21bRUWFtGvXTt54441aHw+AbNu2TUREMjMzBYBs2LBBu/306dMCQM6cOSMiIpMmTZKBAwcqH8uWcVSN/9tvv9X2SUhIEACSkZGhbZs5c6bExsaKiMjNmzfF3d1dDh48aPH9pk+fLpMmTapxbo899pgYjUbx8PAQo9EoAMTV1VUOHDhQa5MePXrIqlWrtK+Dg4PlH//4h8U+77//vnh7e2tfP/LIIzJjxgyLfZ555hkZPXp0jd9n/vz5MnToUIttFRUVMnv2bAkJCZG+ffvKvn375Nq1axIWFiZZWVmydOlS6dy5s4wYMcLieBIRefvttyUkJKTWuRER1Re+QkFEdA9ERHvry/Hjx1FSUoK2bdvC09NT+5WZmYmMjAztPp06dUL79u21r6Ojo2E2m5Genl7j9xk1apT2eD169Khxv4yMDNy6dQsDBw7UthmNRvTv3x9nzpwBADz33HMW46tNZGSk9vugoCAAQG5uLoBfXqGwdxyq7xEQEAB3d3eEhYVZbKv6nufPn0dpaSmGDx9uMYcPPvjAorHKlClTkJaWhgMHDmDUqFFYunSpxas/JSUliI+PR7du3eDj4wNPT0+cOXNGe4XCVmfOnLGYNwAMHDjQat53Kisrg6urq8U2o9GINWvWIDMzEykpKRg0aBAWLVqEefPm4dixY/j8889x/PhxPPzww5g3b57Ffd3c3CzeJkZEdD85NfQAiIiasjNnziA0NBTA7b+QBgUFKc95uNfLim7YsAFlZWUAbv9F816sWLEC8fHxNu175/eqWjhVXdnKzc3tnsZR0/eoPj+dTqd9z5KSEgDAV199ZbEoA26f51Ibb29vhIeHAwC2bNmC8PBwPPzww4iJiQFw++1mu3btwt///neEh4fDzc0NTz/9NCoqKu5tgjbw9fXFyZMna91n7969OH36NDZs2IDFixdj9OjR8PDwwIQJE7B69WqLffPz8+Hn53c/h0xEpOErFEREdtqzZw9OnjyJp556CgDQu3dv5OTkwMnJCeHh4Ra/fH19tftlZWXhypUr2teHDh2CXq9H165dAdy+9GfVeQhV2rdvrz1WcHCwth8Ai32rTgQ+cOCAtu3WrVtISUlB9+7dAQD+/v4WY7NXZGQkdu/erbzNlnHYo3v37nBxcUFWVpZV444dO9r8OJ6enpg/fz7i4+O1KycdOHAAU6dOxfjx49GzZ08EBgbiwoULFvdTPTfVdevWzWLeVY9d27x79eqFs2fP1ngZ25s3b2LOnDlYv349DAYDTCYTbt26BeB21+pjOnXqFHr16lXrOImI6gsXFERENigvL0dOTg4uX76Mo0eP4m9/+xvGjh2Lxx9/HL///e8BADExMYiOjsa4cePwzTff4MKFCzh48CCWLl1q8UFjrq6uiIuLw/Hjx7Fv3z7MmzcPEyZMQGBgIIDbn3Vw4sQJpKenIy8vT/uLY3XBwcHQ6XT48ssv8fPPP6OkpAQeHh6YNWsWFi9ejJ07d+KHH37AjBkzUFpaanFJ0vqwZMkSpKSkYPbs2Thx4gTOnj2LtWvXIi8v776No1WrVoiPj8eCBQuwadMmZGRk4OjRo1i1ahU2bdp0V481c+ZM/Pjjj9rJ7V26dMHWrVuRlpaG48ePY/LkyVafMxISEoLvvvsOly9f1q64VN3ixYuxceNGrF27FufOncNbb72FrVu31vqq0JAhQ1BSUlLjpV7/8pe/YPTo0doiYeDAgdi6dStOnDiB1atXW73Fat++fRgxYoTNLYiI7kkDn8NBRNToxcXFCQABIE5OTuLn5ycxMTHy3nvviclksti3qKhInn/+eWnXrp0YjUbp2LGjTJkyRbKyskTk9knZUVFR8u6770q7du3E1dVVnn76acnPz9ceIzc3V4YPHy6enp4CQPbu3Vvj2FasWCGBgYGi0+kkLi5ORETKysrk+eefF19fX3FxcZGBAwfK999/X+c8oTgp+9ixY9rt169ftxpPYmKiPPLII+Li4iI+Pj4SGxurnSRe1zhUJ5VXP8H5zmZVzGazrFy5Urp27SpGo1H8/PwkNjZWkpKSapzbY489JvPnz7faPnPmTOnRo4eYTCbJzMyUIUOGiJubm3Ts2FFWr15tdb/k5GSJjIwUFxcXqfojVDXmd999V8LCwsRoNEpERIR88MEHNY6tyoQJE+Sll16y2n7y5EkJDw+XkpISbZvJZJJZs2aJl5eX9OvXT86dO6fddvDgQfHx8ZHS0tI6vycRUX3Qidzlx4QSERFRvTtx4gSGDx+OjIyMOk+Wr83EiRMRFRWFl19+uR5HR0RUM77liYiIqBGIjIzE66+/jszMTLsfo6KiAj179sSCBQvqcWRERLXjKxRERERERGQ3vkJBRERERER244KCiIiIiIjsxgUFERERERHZjQsKIiIiIiKyGxcURERERERkNy4oiIiIiIjIblxQEBERERGR3bigICIiIiIiu3FBQUREREREduOCgoiIiIiI7PZ/i9QJo/4y1a0AAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Using, the statsmodels estimate regressions\n",
        "simple_reg = smf.ols(\"debt_to_income ~ interest_rate\", data=loans_cleaned).fit()\n",
        "print(\"Regression Summary:\")\n",
        "print(simple_reg.summary())\n",
        "stargazer = Stargazer([simple_reg])\n",
        "\n",
        "html_output = stargazer.render_html()\n",
        "\n",
        "with open(\"regression_summary.html\", \"w\") as f:\n",
        "    f.write(html_output)\n",
        "\n",
        "print(\"Regression summary saved as regression_summary.html\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ok-BbKNz0Z_l",
        "outputId": "66264e10-47ed-4e89-fd41-387926d58baf"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Regression Summary:\n",
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:         debt_to_income   R-squared:                       0.020\n",
            "Model:                            OLS   Adj. R-squared:                  0.020\n",
            "Method:                 Least Squares   F-statistic:                     204.2\n",
            "Date:                Thu, 15 May 2025   Prob (F-statistic):           7.05e-46\n",
            "Time:                        11:21:11   Log-Likelihood:                -41072.\n",
            "No. Observations:                9976   AIC:                         8.215e+04\n",
            "Df Residuals:                    9974   BIC:                         8.216e+04\n",
            "Df Model:                           1                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "=================================================================================\n",
            "                    coef    std err          t      P>|t|      [0.025      0.975]\n",
            "---------------------------------------------------------------------------------\n",
            "Intercept        14.0252      0.398     35.198      0.000      13.244      14.806\n",
            "interest_rate     0.4253      0.030     14.291      0.000       0.367       0.484\n",
            "==============================================================================\n",
            "Omnibus:                    15162.432   Durbin-Watson:                   2.017\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         16160758.350\n",
            "Skew:                           9.135   Prob(JB):                         0.00\n",
            "Kurtosis:                     199.330   Cond. No.                         36.0\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "Regression summary saved as regression_summary.html\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#(2.2) Visualisation\n",
        "\n",
        "# (c) Boxplot 1\n",
        "sns.set_style(\"white\")\n",
        "sns.set_palette(\"pastel\")\n",
        "\n",
        "# Create the boxplot with 8x6 inches size\n",
        "plt.figure(figsize=(8, 6))\n",
        "\n",
        "# Defining the order of grades\n",
        "grade_order = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"]\n",
        "\n",
        "# Plotting the boxplot with the defined order\n",
        "sns.boxplot(data=loans_cleaned, x=\"grade\", y=\"interest_rate\", color=\"skyblue\", width=0.6, order=grade_order)\n",
        "\n",
        "sns.despine()\n",
        "\n",
        "# Adding labels and title\n",
        "plt.xlabel(\"Loan Grade\", fontsize=14, fontweight=\"bold\")\n",
        "plt.ylabel(\"Interest Rate (%)\", fontsize=14, fontweight=\"bold\")\n",
        "plt.title(\"Interest Rate by Grade\", fontsize=16, fontweight=\"bold\")\n",
        "\n",
        "# Set the y-axis limits and ticks\n",
        "plt.ylim(0, 35)\n",
        "plt.yticks(np.arange(0, 36, 5))\n",
        "\n",
        "# Add gridlines with custom styling\n",
        "plt.grid(True, linestyle=\"--\", alpha=0.4)\n",
        "\n",
        "# Adjust layout\n",
        "plt.tight_layout()\n",
        "\n",
        "# Save the plot as an image\n",
        "plt.savefig(\"Interest_Rate_by_Grade\")\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "s7n88xs03U3e",
        "outputId": "0b876bf5-b698-4bed-a7cc-a1445c93e463"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Sorted grade value add"
      ],
      "metadata": {
        "id": "-F85QdWDmooG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Statastical Interpretation Boxplot 1\n",
        "grade_interest_rate_stats = loans_cleaned[[\"grade\", \"interest_rate\"]]\n",
        "grade_interest_rate_stats = grade_interest_rate_stats.groupby(\"grade\")[\"interest_rate\"].describe().round(2).T\n",
        "grade_interest_rate_stats\n",
        "# Save as CSV\n",
        "grade_interest_rate_stats.to_csv(\"grade_interest_rate_stats.csv\")\n",
        "print(\"Statistics for Interest Rate by Grade\")\n",
        "grade_interest_rate_stats"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "FDj2pErx7quk",
        "outputId": "3bdc858c-3508-4f4e-d34f-04030be76873"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Statistics for Interest Rate by Grade\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "grade        A        B        C        D       E      F      G\n",
              "count  2459.00  3037.00  2653.00  1446.00  335.00  58.00  12.00\n",
              "mean      6.74    10.52    14.18    19.11   25.10  29.40  30.80\n",
              "std       0.90     0.90     1.18     1.58    1.23   0.79   0.04\n",
              "min       5.31     9.43    12.61     6.00   22.90  28.72  30.79\n",
              "25%       6.07     9.92    13.58    18.06   23.88  28.72  30.79\n",
              "50%       6.72    10.42    14.07    19.03   24.85  28.72  30.79\n",
              "75%       7.35    10.91    15.05    20.00   26.30  30.17  30.79\n",
              "max       7.97    11.99    16.02    21.85   26.77  30.75  30.94"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-10c5a946-f18d-4837-aa2e-35d63740577e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>grade</th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>C</th>\n",
              "      <th>D</th>\n",
              "      <th>E</th>\n",
              "      <th>F</th>\n",
              "      <th>G</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>2459.00</td>\n",
              "      <td>3037.00</td>\n",
              "      <td>2653.00</td>\n",
              "      <td>1446.00</td>\n",
              "      <td>335.00</td>\n",
              "      <td>58.00</td>\n",
              "      <td>12.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>6.74</td>\n",
              "      <td>10.52</td>\n",
              "      <td>14.18</td>\n",
              "      <td>19.11</td>\n",
              "      <td>25.10</td>\n",
              "      <td>29.40</td>\n",
              "      <td>30.80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.90</td>\n",
              "      <td>0.90</td>\n",
              "      <td>1.18</td>\n",
              "      <td>1.58</td>\n",
              "      <td>1.23</td>\n",
              "      <td>0.79</td>\n",
              "      <td>0.04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>5.31</td>\n",
              "      <td>9.43</td>\n",
              "      <td>12.61</td>\n",
              "      <td>6.00</td>\n",
              "      <td>22.90</td>\n",
              "      <td>28.72</td>\n",
              "      <td>30.79</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>6.07</td>\n",
              "      <td>9.92</td>\n",
              "      <td>13.58</td>\n",
              "      <td>18.06</td>\n",
              "      <td>23.88</td>\n",
              "      <td>28.72</td>\n",
              "      <td>30.79</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>6.72</td>\n",
              "      <td>10.42</td>\n",
              "      <td>14.07</td>\n",
              "      <td>19.03</td>\n",
              "      <td>24.85</td>\n",
              "      <td>28.72</td>\n",
              "      <td>30.79</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>7.35</td>\n",
              "      <td>10.91</td>\n",
              "      <td>15.05</td>\n",
              "      <td>20.00</td>\n",
              "      <td>26.30</td>\n",
              "      <td>30.17</td>\n",
              "      <td>30.79</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>7.97</td>\n",
              "      <td>11.99</td>\n",
              "      <td>16.02</td>\n",
              "      <td>21.85</td>\n",
              "      <td>26.77</td>\n",
              "      <td>30.75</td>\n",
              "      <td>30.94</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-10c5a946-f18d-4837-aa2e-35d63740577e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-10c5a946-f18d-4837-aa2e-35d63740577e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-10c5a946-f18d-4837-aa2e-35d63740577e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a00b68b1-e7c4-4b14-a1ad-719e3421cd8d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a00b68b1-e7c4-4b14-a1ad-719e3421cd8d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a00b68b1-e7c4-4b14-a1ad-719e3421cd8d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_4adc0bc6-2530-46ec-a7b1-c228d7fc964e\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('grade_interest_rate_stats')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_4adc0bc6-2530-46ec-a7b1-c228d7fc964e button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('grade_interest_rate_stats');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "grade_interest_rate_stats",
              "summary": "{\n  \"name\": \"grade_interest_rate_stats\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"A\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 867.3166730908778,\n        \"min\": 0.9,\n        \"max\": 2459.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.74,\n          6.72,\n          2459.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1070.5101772911496,\n        \"min\": 0.9,\n        \"max\": 3037.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          10.52,\n          10.42,\n          3037.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 933.6103759895545,\n        \"min\": 1.18,\n        \"max\": 2653.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          14.18,\n          14.07,\n          2653.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"D\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 505.9560904702389,\n        \"min\": 1.58,\n        \"max\": 1446.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          19.11,\n          19.03,\n          1446.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"E\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 111.12983885495636,\n        \"min\": 1.23,\n        \"max\": 335.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          25.1,\n          24.85,\n          335.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.30776687782102,\n        \"min\": 0.79,\n        \"max\": 58.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          58.0,\n          29.4,\n          30.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"G\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.91548302479953,\n        \"min\": 0.04,\n        \"max\": 30.94,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          30.8,\n          30.94,\n          0.04\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#(2.2) Visualisation\n",
        "# (c) Boxplot 2\n",
        "sns.set_style(\"white\")\n",
        "sns.set_palette(\"deep\")\n",
        "\n",
        "# Create the boxplot with 8x6 inches size\n",
        "plt.figure(figsize=(8, 6))\n",
        "\n",
        "sns.boxplot(data=loans_cleaned, x=\"verified_income\", y=\"interest_rate\", width=0.6)\n",
        "\n",
        "# Format the plot\n",
        "sns.despine()\n",
        "plt.xlabel(\"Verified Income Status\")\n",
        "plt.ylabel(\"Interest Rate (%)\")\n",
        "plt.title(\"Interest Rate by Verified Income\")\n",
        "plt.ylim(0, 35)\n",
        "plt.yticks(np.arange(0, 36, 5))\n",
        "plt.grid(True, linestyle=\"--\", alpha=0.4)\n",
        "plt.tight_layout()\n",
        "\n",
        "# Set the y-axis limits and ticks\n",
        "plt.ylim(0, 35)\n",
        "plt.yticks(np.arange(0, 36, 5))\n",
        "\n",
        "# Add gridlines with custom styling\n",
        "plt.grid(True, linestyle=\"--\", alpha=0.4)\n",
        "\n",
        "# Adjust layout to prevent clipping and overlapping\n",
        "plt.tight_layout()\n",
        "\n",
        "# Save the plot as an image\n",
        "plt.savefig(\"Interest_Rate_by_Verified_Income\")\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "XSHW_RabCbVX",
        "outputId": "60c4ceec-a3a5-4613-bd26-82f94e6d58ae"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Statastical Interpretation Boxplot 2\n",
        "verified_income_interest_rate_stats = loans_cleaned[[\"verified_income\", \"interest_rate\"]]\n",
        "verified_income_interest_rate_stats = verified_income_interest_rate_stats.groupby(\"verified_income\")[\"interest_rate\"].describe().round(2).T\n",
        "# Save as CSV\n",
        "verified_income_interest_rate_stats.to_csv(\"verified_income_interest_rate_stats.csv\")\n",
        "print(\"Statistics for Interest Rate by Verified Income\")\n",
        "verified_income_interest_rate_stats"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "zqgZsp6QFDWJ",
        "outputId": "d3d41cd6-2760-44f1-c313-5ccb2a03bed1"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Statistics for Interest Rate by Verified Income\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "verified_income  Not Verified  Source Verified  Verified\n",
              "count                 3594.00          4116.00   2290.00\n",
              "mean                    11.10            12.52     14.35\n",
              "std                      4.57             4.74      5.45\n",
              "min                      5.31             5.31      5.31\n",
              "25%                      7.35             9.44     10.41\n",
              "50%                     10.41            11.99     13.59\n",
              "75%                     13.59            15.05     18.06\n",
              "max                     30.79            30.79     30.94"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4e103c33-89e6-4f2b-af24-fd48576a84d6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>verified_income</th>\n",
              "      <th>Not Verified</th>\n",
              "      <th>Source Verified</th>\n",
              "      <th>Verified</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>3594.00</td>\n",
              "      <td>4116.00</td>\n",
              "      <td>2290.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>11.10</td>\n",
              "      <td>12.52</td>\n",
              "      <td>14.35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>4.57</td>\n",
              "      <td>4.74</td>\n",
              "      <td>5.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>5.31</td>\n",
              "      <td>5.31</td>\n",
              "      <td>5.31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>7.35</td>\n",
              "      <td>9.44</td>\n",
              "      <td>10.41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>10.41</td>\n",
              "      <td>11.99</td>\n",
              "      <td>13.59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>13.59</td>\n",
              "      <td>15.05</td>\n",
              "      <td>18.06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>30.79</td>\n",
              "      <td>30.79</td>\n",
              "      <td>30.94</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4e103c33-89e6-4f2b-af24-fd48576a84d6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4e103c33-89e6-4f2b-af24-fd48576a84d6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4e103c33-89e6-4f2b-af24-fd48576a84d6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-c3640b78-a308-47fc-995d-fb40faa2e466\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c3640b78-a308-47fc-995d-fb40faa2e466')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-c3640b78-a308-47fc-995d-fb40faa2e466 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_84acc6a0-9057-48a8-845c-78e8388db1b2\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('verified_income_interest_rate_stats')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_84acc6a0-9057-48a8-845c-78e8388db1b2 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('verified_income_interest_rate_stats');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "verified_income_interest_rate_stats",
              "summary": "{\n  \"name\": \"verified_income_interest_rate_stats\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Not Verified\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1266.4997860808573,\n        \"min\": 4.57,\n        \"max\": 3594.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          11.1,\n          10.41,\n          3594.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Source Verified\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1450.7108873731033,\n        \"min\": 4.74,\n        \"max\": 4116.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.52,\n          11.99,\n          4116.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Verified\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 804.7232579311703,\n        \"min\": 5.31,\n        \"max\": 2290.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          14.35,\n          13.59,\n          2290.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#(2.2) Visualisation\n",
        "# (c) Boxplot 3\n",
        "sns.set_style(\"white\")\n",
        "sns.set_palette(\"muted\")\n",
        "\n",
        "# Create the boxplot with 8x6 inches size\n",
        "plt.figure(figsize=(8, 6))\n",
        "\n",
        "sns.boxplot(data=loans_cleaned, x=\"homeownership\", y=\"interest_rate\", color=\"yellow\",width=0.6)\n",
        "\n",
        "# Format the plot\n",
        "sns.despine()\n",
        "plt.xlabel(\"Homeownership\")\n",
        "plt.ylabel(\"Interest Rate (%)\")\n",
        "plt.title(\"Interest Rate by Homeownership\")\n",
        "plt.ylim(0, 35)\n",
        "plt.yticks(np.arange(0, 36, 5))\n",
        "plt.grid(True, linestyle=\"--\", alpha=0.4)\n",
        "plt.tight_layout()\n",
        "\n",
        "# Set the y-axis limits and ticks\n",
        "plt.ylim(0, 35)\n",
        "plt.yticks(np.arange(0, 36, 5))\n",
        "\n",
        "# Add gridlines with custom styling\n",
        "plt.grid(True, linestyle=\"--\", alpha=0.4)\n",
        "\n",
        "# Adjust layout to prevent clipping and overlapping\n",
        "plt.tight_layout()\n",
        "\n",
        "# Save the plot as an image\n",
        "plt.savefig(\"Interest_Rate_by_Homeownership\")\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "ywczji3uGyTK",
        "outputId": "4beb7db6-b761-4f87-e669-37cc71ad17aa"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Statastical Interpretation Boxplot 3\n",
        "homeownership_interest_rate_stats = loans_cleaned[[\"homeownership\", \"interest_rate\"]]\n",
        "homeownership_interest_rate_stats = homeownership_interest_rate_stats.groupby(\"homeownership\")[\"interest_rate\"].describe().round(2).T\n",
        "# Save as CSV\n",
        "homeownership_interest_rate_stats.to_csv(\"homeownership_interest_rate_stats.csv\")\n",
        "print(\"Statistics for Interest Rate by Homeownership\")\n",
        "homeownership_interest_rate_stats"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "BcFfDgihH3Jc",
        "outputId": "821a8aef-46e2-4868-b687-527ade2e239b"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Statistics for Interest Rate by Homeownership\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "homeownership  MORTGAGE      OWN     RENT\n",
              "count           4789.00  1353.00  3858.00\n",
              "mean              12.06    12.31    12.92\n",
              "std                4.96     4.92     5.04\n",
              "min                5.31     5.31     5.31\n",
              "25%                7.97     7.97     9.44\n",
              "50%               10.91    11.98    11.99\n",
              "75%               15.04    15.05    16.01\n",
              "max               30.94    30.79    30.79"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e2854569-a499-4a9d-8cad-52b778456a14\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>homeownership</th>\n",
              "      <th>MORTGAGE</th>\n",
              "      <th>OWN</th>\n",
              "      <th>RENT</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>4789.00</td>\n",
              "      <td>1353.00</td>\n",
              "      <td>3858.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>12.06</td>\n",
              "      <td>12.31</td>\n",
              "      <td>12.92</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>4.96</td>\n",
              "      <td>4.92</td>\n",
              "      <td>5.04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>5.31</td>\n",
              "      <td>5.31</td>\n",
              "      <td>5.31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>7.97</td>\n",
              "      <td>7.97</td>\n",
              "      <td>9.44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>10.91</td>\n",
              "      <td>11.98</td>\n",
              "      <td>11.99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>15.04</td>\n",
              "      <td>15.05</td>\n",
              "      <td>16.01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>30.94</td>\n",
              "      <td>30.79</td>\n",
              "      <td>30.79</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e2854569-a499-4a9d-8cad-52b778456a14')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e2854569-a499-4a9d-8cad-52b778456a14 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e2854569-a499-4a9d-8cad-52b778456a14');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-d7bb3708-409b-40d1-a893-c9947ea95077\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d7bb3708-409b-40d1-a893-c9947ea95077')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-d7bb3708-409b-40d1-a893-c9947ea95077 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_035bbdf6-06ec-4022-a05b-b38195c60692\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('homeownership_interest_rate_stats')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_035bbdf6-06ec-4022-a05b-b38195c60692 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('homeownership_interest_rate_stats');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "homeownership_interest_rate_stats",
              "summary": "{\n  \"name\": \"homeownership_interest_rate_stats\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"MORTGAGE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1688.783656151352,\n        \"min\": 4.96,\n        \"max\": 4789.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.06,\n          10.91,\n          4789.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OWN\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 473.9673715996402,\n        \"min\": 4.92,\n        \"max\": 1353.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.31,\n          11.98,\n          1353.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RENT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1359.4117930061834,\n        \"min\": 5.04,\n        \"max\": 3858.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.92,\n          11.99,\n          3858.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#(2.3) Derived Variables\n",
        "# (a) Create and Analyse: Credit Utility\n",
        "\n",
        "# Calculate credit utilization\n",
        "# For rows where total_credit_limit is NOT zero, perform the division\n",
        "loans_cleaned.loc[loans_cleaned[\"total_credit_limit\"] != 0, \"credit_util\"] = (\n",
        "    loans_cleaned.loc[loans_cleaned[\"total_credit_limit\"] != 0, \"total_credit_utilized\"] /\n",
        "    loans_cleaned.loc[loans_cleaned[\"total_credit_limit\"] != 0, \"total_credit_limit\"]\n",
        ")\n",
        "\n",
        "# Calculate statistics\n",
        "mean_credit_util = loans_cleaned[\"credit_util\"].mean()\n",
        "prop_non_zero_credit_util = (loans_cleaned[\"credit_util\"] > 0).mean()\n",
        "\n",
        "# Print Credit Utility Results\n",
        "credit_util_stats = pd.DataFrame({\n",
        "    \"Mean\": [round(mean_credit_util, 4)],\n",
        "    \"Proportion\": [round(prop_non_zero_credit_util, 4)]\n",
        "})\n",
        "\n",
        "print(\"Statistics for Credit Utility:\")\n",
        "display(credit_util_stats)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "id": "SblRgGGCIpaU",
        "outputId": "0bf27df2-5909-4c8c-83f3-d8fc47ac9034"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Statistics for Credit Utility:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "     Mean  Proportion\n",
              "0  0.4032      0.9972"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-adacad38-b28d-43df-80a9-5c69189b5282\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Mean</th>\n",
              "      <th>Proportion</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.4032</td>\n",
              "      <td>0.9972</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-adacad38-b28d-43df-80a9-5c69189b5282')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-adacad38-b28d-43df-80a9-5c69189b5282 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-adacad38-b28d-43df-80a9-5c69189b5282');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_08d4ea04-2cd5-4688-909e-cfc94a117ce3\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('credit_util_stats')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_08d4ea04-2cd5-4688-909e-cfc94a117ce3 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('credit_util_stats');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "credit_util_stats",
              "summary": "{\n  \"name\": \"credit_util_stats\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.4032,\n        \"max\": 0.4032,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.4032\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Proportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9972,\n        \"max\": 0.9972,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9972\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check if it has been created correctly\n",
        "\"credit_util\"in loans_cleaned.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5MdlXNbAoLdE",
        "outputId": "8cf805cc-c1b0-482e-ab26-573e198b7241"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#(2.3) Derived Variables\n",
        "# (b) Create and Analyse: Bankruptcy_dummy\n",
        "loans_cleaned.loc[:, \"bankruptcy_dummy\"] = (loans_cleaned[\"public_record_bankrupt\"] >= 1).astype(int)\n",
        "\n",
        "# Calculate statistics\n",
        "mean_bankruptcy = loans_cleaned[\"bankruptcy_dummy\"].mean()\n",
        "prop_non_zero_bankruptcy = (loans_cleaned[\"bankruptcy_dummy\"] > 0).mean()\n",
        "\n",
        "# Print Bankruptcy Dummy Results\n",
        "bankruptcy_stats = pd.DataFrame({\n",
        "    \"Mean\": [round(mean_bankruptcy, 4)],\n",
        "    \"Proportion\": [round(prop_non_zero_bankruptcy, 4)]\n",
        "})\n",
        "\n",
        "print(\"Statistics for Bankruptcy Dummy:\")\n",
        "bankruptcy_stats"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "id": "wGKruMhCojAK",
        "outputId": "945d7cc2-56d8-44c4-fd0c-e1f842c5d2c0"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Statistics for Bankruptcy Dummy:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Mean  Proportion\n",
              "0  0.1215      0.1215"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-58914435-e8b6-492b-b572-72f220190ee5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Mean</th>\n",
              "      <th>Proportion</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.1215</td>\n",
              "      <td>0.1215</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-58914435-e8b6-492b-b572-72f220190ee5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-58914435-e8b6-492b-b572-72f220190ee5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-58914435-e8b6-492b-b572-72f220190ee5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_7ea554c3-c095-47db-81c7-b58c286d548d\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('bankruptcy_stats')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_7ea554c3-c095-47db-81c7-b58c286d548d button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('bankruptcy_stats');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "bankruptcy_stats",
              "summary": "{\n  \"name\": \"bankruptcy_stats\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.1215,\n        \"max\": 0.1215,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.1215\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Proportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.1215,\n        \"max\": 0.1215,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.1215\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check if it has been created correctly\n",
        "\"bankruptcy_dummy\"in loans_cleaned.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0_BhBIWhs6nD",
        "outputId": "a9459e16-e832-4f9d-a7b0-f0c29a68eaa8"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**(3) Part C: Regression Analysis**"
      ],
      "metadata": {
        "id": "tyOzgQc2toqK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#(a) - Model 1: Simple Linear Regression\n",
        "# Simple Linear Regression\n",
        "model_1 = smf.ols(\"interest_rate ~ debt_to_income\", data=loans_cleaned).fit()\n",
        "\n",
        "# Estimated coefficients\n",
        "intercept_estimated = model_1.params[\"Intercept\"]\n",
        "beta_1_estimated = model_1.params[\"debt_to_income\"]\n",
        "\n",
        "# Report regression equation\n",
        "print(\"Estimated Regression Equation:\")\n",
        "print(f\"Interest Rate = {intercept_estimated:.2f} + {beta_1_estimated:.4f} * Debt-to-Income\")\n",
        "\n",
        "# Interpret β₁\n",
        "print(\"Interpretation of β₁ (Debt-to-Income Coefficient):\")\n",
        "print(f\"For every one unit increase in the debt-to-income ratio, the interest rate is estimated to change by {beta_1_estimated:.4f} units, on average.\")\n",
        "\n",
        "# Hypothesis Test for H₀: β₁ = 0\n",
        "print(\"--- Hypothesis Test for H₀: β₁ = 0\")\n",
        "alpha_levels = [0.01, 0.05, 0.1]\n",
        "p_value_beta_1 = model_1.pvalues[\"debt_to_income\"]\n",
        "print(f\"P-value for β₁: {p_value_beta_1:.4f}\")\n",
        "\n",
        "for alpha in alpha_levels:\n",
        "    print(f\"Significance Level (α) = {alpha}\")\n",
        "    if p_value_beta_1 < alpha:\n",
        "        print(\"Reject H₀. There is significant evidence that debt-to-income affects interest rate.\")\n",
        "    else:\n",
        "        print(\"Fail to reject H₀. There is not enough evidence that debt-to-income affects interest rate at this level.\")\n",
        "# Interpreting the values\n",
        "print(\"Statistic\\tValue\\tInterpretation\")\n",
        "#\"Equation Intercept\" refers to the point where the regression line crosses the y-axis.1\n",
        "#\"Beta_1 Coefficient\" tells us the change in the interest rate for a one-unit increase in the debt-to-income ratio.2\n",
        "#\"P-value\" is the result of the hypothesis test.\n",
        "print(\"Equation Intercept\\tBeta_1 Coefficient\\tP-value\")\n",
        "print(f\"{intercept_estimated}\\t{beta_1_estimated}\\t{p_value_beta_1}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0ghZmB7Pt1D1",
        "outputId": "d4dde8f0-cfb1-422d-95f6-15cc2bbbb550"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Estimated Regression Equation:\n",
            "Interest Rate = 11.51 + 0.0472 * Debt-to-Income\n",
            "Interpretation of β₁ (Debt-to-Income Coefficient):\n",
            "For every one unit increase in the debt-to-income ratio, the interest rate is estimated to change by 0.0472 units, on average.\n",
            "--- Hypothesis Test for H₀: β₁ = 0\n",
            "P-value for β₁: 0.0000\n",
            "Significance Level (α) = 0.01\n",
            "Reject H₀. There is significant evidence that debt-to-income affects interest rate.\n",
            "Significance Level (α) = 0.05\n",
            "Reject H₀. There is significant evidence that debt-to-income affects interest rate.\n",
            "Significance Level (α) = 0.1\n",
            "Reject H₀. There is significant evidence that debt-to-income affects interest rate.\n",
            "Statistic\tValue\tInterpretation\n",
            "Equation Intercept\tBeta_1 Coefficient\tP-value\n",
            "11.511445318462588\t0.047182750147895\t7.053786375042715e-46\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#(b) - Model 2: Simple Linear Regression\n",
        "# Simple Linear Regression\n",
        "\n",
        "model_2 = smf.ols(\"interest_rate ~ bankruptcy_dummy\", data=loans_cleaned).fit()\n",
        "\n",
        "# Estimated coefficients\n",
        "intercept_estimated = model_2.params[\"Intercept\"]\n",
        "beta_1_estimated = model_2.params[\"bankruptcy_dummy\"]\n",
        "\n",
        "# Report regression equation\n",
        "print(\"Estimated Regression Equation:\")\n",
        "print(f\"Interest Rate = {intercept_estimated:.2f} + {beta_1_estimated:.4f} * bankruptcy_dummy\")\n",
        "\n",
        "# Interpret β₁\n",
        "print(\"Interpretation of β₁ (bankruptcy_dummy Coefficient):\")\n",
        "print(f\"For every one unit increase in the bankruptcy_dummy ratio, the interest rate is estimated to change by {beta_1_estimated:.4f} units, on average.\")\n",
        "\n",
        "# Hypothesis Test for H₀: β₁ = 0\n",
        "print(\"--- Hypothesis Test for H₀: β₁ = 0\")\n",
        "alpha_levels = [0.01, 0.05, 0.1]\n",
        "p_value_beta_1 = model_2.pvalues[\"bankruptcy_dummy\"]\n",
        "print(f\"P-value for β₁: {p_value_beta_1:.4f}\")\n",
        "\n",
        "for alpha in alpha_levels:\n",
        "    print(f\"Significance Level (α) = {alpha}\")\n",
        "    if p_value_beta_1 < alpha:\n",
        "        print(\"Reject H₀. There is significant evidence that bankruptcy_dummy affects interest rate.\")\n",
        "    else:\n",
        "        print(\"Fail to reject H₀. There is not enough evidence that bankruptcy_dummy affects interest rate at this level.\")\n",
        "# Interpreting the values\n",
        "print(\"Statistic\\tValue\\tInterpretation\")\n",
        "#\"Equation Intercept\" refers to the point where the regression line crosses the y-axis.1\n",
        "#\"Beta_1 Coefficient\" tells us the change in the interest rate for a one-unit increase in the bankruptcy_dummy ratio.2\n",
        "#\"P-value\" is the result of the hypothesis test.\n",
        "print(\"Equation Intercept\\tBeta_1 Coefficient\\tP-value\")\n",
        "print(f\"{intercept_estimated}\\t{beta_1_estimated}\\t{p_value_beta_1}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fYg39Oik-16Y",
        "outputId": "c5f82efb-78b5-4123-dbcf-dbabb4ec41c4"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Estimated Regression Equation:\n",
            "Interest Rate = 12.34 + 0.7368 * bankruptcy_dummy\n",
            "Interpretation of β₁ (bankruptcy_dummy Coefficient):\n",
            "For every one unit increase in the bankruptcy_dummy ratio, the interest rate is estimated to change by 0.7368 units, on average.\n",
            "--- Hypothesis Test for H₀: β₁ = 0\n",
            "P-value for β₁: 0.0000\n",
            "Significance Level (α) = 0.01\n",
            "Reject H₀. There is significant evidence that bankruptcy_dummy affects interest rate.\n",
            "Significance Level (α) = 0.05\n",
            "Reject H₀. There is significant evidence that bankruptcy_dummy affects interest rate.\n",
            "Significance Level (α) = 0.1\n",
            "Reject H₀. There is significant evidence that bankruptcy_dummy affects interest rate.\n",
            "Statistic\tValue\tInterpretation\n",
            "Equation Intercept\tBeta_1 Coefficient\tP-value\n",
            "12.338004553215695\t0.7367855702410788\t1.4673387882777883e-06\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# (c) - Model 3: Categorical Variable Regression\n",
        "\n",
        "# Create dummy variables\n",
        "loans_cleaned[\"verified_yes\"] = (loans_cleaned[\"verified_income\"] == \"Verified\").astype(int)  # Dummy for 'Verified' income (D1)\n",
        "loans_cleaned[\"source_verified_yes\"] = (loans_cleaned[\"verified_income\"] == \"Source Verified\").astype(int)  # Dummy for 'Source Verified' income (D2)\n",
        "# \"not verified\" is the reference category (no explicit dummy)\n",
        "\n",
        "model_3 = smf.ols(\"interest_rate ~ verified_yes + source_verified_yes\", data=loans_cleaned).fit()\n",
        "\n",
        "# Print the OLS summary table\n",
        "print(model_3.summary())\n",
        "\n",
        "# Get the intercept\n",
        "intercept_estimated_3 = model_3.params[\"Intercept\"]\n",
        "\n",
        "# Print the result for unverified borrowers\n",
        "print(\"Average interest rate for unverified borrowers:\", intercept_estimated_3)\n",
        "# Print the coefficients (for interpretation)\n",
        "print(\"Intercept (for'not verified'):\", model_3.params[\"Intercept\"])\n",
        "print(\"Coefficient for Verified (vs. 'not verified'):\", model_3.params[\"verified_yes\"])\n",
        "print(\"Coefficient for Source Verified (vs. 'not verified'):\", model_3.params[\"source_verified_yes\"])\n",
        "\n",
        "# Stargazer Table\n",
        "stargazer_3 = Stargazer([model_3])\n",
        "\n",
        "with open(\"model3_regression_table.html\", \"w\") as f:\n",
        "    f.write(stargazer_3.render_html())\n",
        "\n",
        "print(\"Stargazer regression table saved as model3_regression_table.html\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dl2RTRECBmql",
        "outputId": "5509c0e8-2324-4f30-ec2f-f41eee2880d7"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:          interest_rate   R-squared:                       0.059\n",
            "Model:                            OLS   Adj. R-squared:                  0.059\n",
            "Method:                 Least Squares   F-statistic:                     315.9\n",
            "Date:                Thu, 15 May 2025   Prob (F-statistic):          8.92e-134\n",
            "Time:                        11:22:49   Log-Likelihood:                -29979.\n",
            "No. Observations:               10000   AIC:                         5.996e+04\n",
            "Df Residuals:                    9997   BIC:                         5.999e+04\n",
            "Df Model:                           2                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "=======================================================================================\n",
            "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
            "---------------------------------------------------------------------------------------\n",
            "Intercept              11.0995      0.081    137.180      0.000      10.941      11.258\n",
            "verified_yes            3.2543      0.130     25.091      0.000       3.000       3.509\n",
            "source_verified_yes     1.4160      0.111     12.787      0.000       1.199       1.633\n",
            "==============================================================================\n",
            "Omnibus:                     1006.206   Durbin-Watson:                   1.993\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             1353.013\n",
            "Skew:                           0.834   Prob(JB):                    1.57e-294\n",
            "Kurtosis:                       3.681   Cond. No.                         3.71\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "Average interest rate for unverified borrowers: 11.099457429048417\n",
            "Intercept (for'not verified'): 11.099457429048417\n",
            "Coefficient for Verified (vs. 'not verified'): 3.2542892958424146\n",
            "Coefficient for Source Verified (vs. 'not verified'): 1.4160211909710254\n",
            "Stargazer regression table saved as model3_regression_table.html\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# (d) - Model 4: Multiple Regression\n",
        "# Check if the required columns are in loans_cleaned.columns\n",
        "required_columns = [\"interest_rate\", \"debt_to_income\", \"credit_util\", \"bankruptcy_dummy\"]\n",
        "all_present = all(col in loans_cleaned.columns for col in required_columns)\n",
        "# This will be True if all are present, False otherwise\n",
        "print(all_present)\n",
        "\n",
        "model_4 = smf.ols(\n",
        "    \"interest_rate ~ debt_to_income + credit_util + bankruptcy_dummy\",\n",
        "    data=loans_cleaned,\n",
        ").fit()\n",
        "\n",
        "# Print the OLS summary table to get all the results\n",
        "print(model_4.summary())\n",
        "\n",
        "# Interpretation of coefficients (this part will be more detailed after the model is fit)\n",
        "print(\"\\nInterpretation of Coefficients:\")\n",
        "print(\"Intercept (β0): \", model_4.params['Intercept'])\n",
        "print(\"Debt-to-Income (β1): \", model_4.params['debt_to_income'])\n",
        "print(\"Credit Utilization (β2): \", model_4.params['credit_util'])\n",
        "print(\"Bankruptcy Dummy (β3): \", model_4.params['bankruptcy_dummy'])\n",
        "\n",
        "# Stargazer Table\n",
        "stargazer_4 = Stargazer([model_4])\n",
        "with open(\"model4_regression_table.html\", \"w\") as f:\n",
        "    f.write(stargazer_4.render_html())\n",
        "\n",
        "print(\"Stargazer regression table saved as model4_regression_table.html\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A3WGARxxF4uN",
        "outputId": "0e338373-21a6-46b9-b5fb-5e578bcd3d31"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:          interest_rate   R-squared:                       0.078\n",
            "Model:                            OLS   Adj. R-squared:                  0.078\n",
            "Method:                 Least Squares   F-statistic:                     280.9\n",
            "Date:                Thu, 15 May 2025   Prob (F-statistic):          4.81e-175\n",
            "Time:                        11:22:53   Log-Likelihood:                -29795.\n",
            "No. Observations:                9974   AIC:                         5.960e+04\n",
            "Df Residuals:                    9970   BIC:                         5.963e+04\n",
            "Df Model:                           3                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "====================================================================================\n",
            "                       coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------------\n",
            "Intercept            9.8644      0.102     96.343      0.000       9.664      10.065\n",
            "debt_to_income       0.0366      0.003     11.315      0.000       0.030       0.043\n",
            "credit_util          4.4183      0.180     24.520      0.000       4.065       4.772\n",
            "bankruptcy_dummy     0.5739      0.147      3.900      0.000       0.285       0.862\n",
            "==============================================================================\n",
            "Omnibus:                     1135.520   Durbin-Watson:                   1.982\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             1598.814\n",
            "Skew:                           0.889   Prob(JB):                         0.00\n",
            "Kurtosis:                       3.828   Cond. No.                         98.4\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "\n",
            "Interpretation of Coefficients:\n",
            "Intercept (β0):  9.864419575310585\n",
            "Debt-to-Income (β1):  0.03657256771295062\n",
            "Credit Utilization (β2):  4.418335878377756\n",
            "Bankruptcy Dummy (β3):  0.5738596137285933\n",
            "Stargazer regression table saved as model4_regression_table.html\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# (e) - Model 5: Enhanced Multiple Regression\n",
        "\n",
        "# Select variables for Model 5\n",
        "model_5_vars = [\n",
        "    \"interest_rate\", \"debt_to_income\", \"credit_util\", \"bankruptcy_dummy\",\n",
        "    \"annual_income\", \"loan_amount\", \"term\", \"grade\", \"emp_length\",\n",
        "    \"homeownership\", \"loan_purpose\", \"credit_checks\"\n",
        "]\n",
        "\n",
        "# Subset dataset with selected variables\n",
        "loans_model5 = loans_cleaned[model_5_vars]\n",
        "\n",
        "# Create dummy variables (drop_first=True for k-1 dummies)\n",
        "loans_model5_dummies = pd.get_dummies(loans_model5, drop_first=True)\n",
        "\n",
        "\n",
        "formula = \"interest_rate ~ \" + \" + \".join(loans_model5_dummies.columns.drop(\"interest_rate\"))\n",
        "model_5 = smf.ols(formula, data=loans_model5_dummies).fit()\n",
        "\n",
        "\n",
        "print(model_5.summary())\n",
        "\n",
        "# Reference categories\n",
        "print(\"\\nReference Categories (baseline groups):\")\n",
        "print(\"term:\", loans_cleaned[\"term\"].unique()[0])\n",
        "print(\"grade:\", loans_cleaned[\"grade\"].unique()[0])\n",
        "print(\"emp_length:\", loans_cleaned[\"emp_length\"].unique()[0])\n",
        "print(\"homeownership:\", loans_cleaned[\"homeownership\"].unique()[0])\n",
        "print(\"loan_purpose:\", loans_cleaned[\"loan_purpose\"].unique()[0])\n",
        "\n",
        "# Compute residuals for the first 5 observations\n",
        "residuals = model_5.resid.head()\n",
        "print(\"\\nResiduals for first 5 observations:\")\n",
        "print(residuals)\n",
        "# Stargazer Table\n",
        "stargazer_5 = Stargazer([model_5])\n",
        "with open(\"model5_regression_table.html\", \"w\") as f:\n",
        "    f.write(stargazer_5.render_html())\n",
        "\n",
        "print(\"Stargazer regression table saved as model5_regression_table.html\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4jkCDT7vcFoc",
        "outputId": "3d4f91e9-f689-4308-e76e-ea83d55123f5"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:          interest_rate   R-squared:                       0.952\n",
            "Model:                            OLS   Adj. R-squared:                  0.952\n",
            "Method:                 Least Squares   F-statistic:                     6724.\n",
            "Date:                Thu, 15 May 2025   Prob (F-statistic):               0.00\n",
            "Time:                        11:22:57   Log-Likelihood:                -13872.\n",
            "No. Observations:                9181   AIC:                         2.780e+04\n",
            "Df Residuals:                    9153   BIC:                         2.800e+04\n",
            "Df Model:                          27                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "===========================================================================================================\n",
            "                                              coef    std err          t      P>|t|      [0.025      0.975]\n",
            "-----------------------------------------------------------------------------------------------------------\n",
            "Intercept                                   6.3292      0.118     53.735      0.000       6.098       6.560\n",
            "grade_B[T.True]                             3.6833      0.032    114.172      0.000       3.620       3.747\n",
            "grade_C[T.True]                             7.2784      0.035    208.497      0.000       7.210       7.347\n",
            "grade_D[T.True]                            12.1567      0.042    288.491      0.000      12.074      12.239\n",
            "grade_E[T.True]                            18.1422      0.071    254.921      0.000      18.003      18.282\n",
            "grade_F[T.True]                            22.3790      0.151    147.944      0.000      22.082      22.675\n",
            "grade_G[T.True]                            23.7767      0.333     71.330      0.000      23.123      24.430\n",
            "homeownership_OWN[T.True]                   0.0011      0.038      0.029      0.977      -0.073       0.075\n",
            "homeownership_RENT[T.True]                  0.0193      0.030      0.638      0.524      -0.040       0.079\n",
            "loan_purpose_credit_card[T.True]           -0.0561      0.106     -0.531      0.595      -0.263       0.151\n",
            "loan_purpose_debt_consolidation[T.True]     0.0409      0.104      0.393      0.694      -0.163       0.245\n",
            "loan_purpose_home_improvement[T.True]      -0.1257      0.112     -1.121      0.262      -0.346       0.094\n",
            "loan_purpose_house[T.True]                 -0.0316      0.139     -0.228      0.820      -0.303       0.240\n",
            "loan_purpose_major_purchase[T.True]        -0.0260      0.122     -0.214      0.831      -0.265       0.213\n",
            "loan_purpose_medical[T.True]                0.0044      0.139      0.031      0.975      -0.268       0.277\n",
            "loan_purpose_moving[T.True]                -0.0456      0.168     -0.271      0.786      -0.375       0.284\n",
            "loan_purpose_other[T.True]                  0.0055      0.109      0.050      0.960      -0.209       0.220\n",
            "loan_purpose_renewable_energy[T.True]       0.3586      0.362      0.990      0.322      -0.351       1.069\n",
            "loan_purpose_small_business[T.True]         0.0556      0.143      0.387      0.699      -0.226       0.337\n",
            "loan_purpose_vacation[T.True]               0.1297      0.180      0.719      0.472      -0.224       0.483\n",
            "debt_to_income                              0.0030      0.001      3.452      0.001       0.001       0.005\n",
            "credit_util                                 0.3309      0.052      6.317      0.000       0.228       0.434\n",
            "bankruptcy_dummy                            0.0239      0.036      0.662      0.508      -0.047       0.095\n",
            "annual_income                           -4.178e-07   1.92e-07     -2.172      0.030   -7.95e-07   -4.07e-08\n",
            "loan_amount                             -2.499e-06    1.3e-06     -1.928      0.054   -5.04e-06    4.23e-08\n",
            "term                                        0.0077      0.001      6.343      0.000       0.005       0.010\n",
            "emp_length                                 -0.0006      0.003     -0.198      0.843      -0.007       0.006\n",
            "credit_checks                               0.0316      0.005      6.394      0.000       0.022       0.041\n",
            "==============================================================================\n",
            "Omnibus:                      754.005   Durbin-Watson:                   2.013\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             4508.136\n",
            "Skew:                          -0.105   Prob(JB):                         0.00\n",
            "Kurtosis:                       6.427   Cond. No.                     3.74e+06\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 3.74e+06. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n",
            "\n",
            "Reference Categories (baseline groups):\n",
            "term: 60\n",
            "grade: C\n",
            "emp_length: 3.0\n",
            "homeownership: MORTGAGE\n",
            "loan_purpose: moving\n",
            "\n",
            "Residuals for first 5 observations:\n",
            "0   -0.271460\n",
            "1   -1.421336\n",
            "2   -2.083808\n",
            "3    0.023619\n",
            "4   -0.343659\n",
            "dtype: float64\n",
            "Stargazer regression table saved as model5_regression_table.html\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**(4) Part D: Presentation and Discussion**"
      ],
      "metadata": {
        "id": "Rp62OXGbeIi-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Oragnising Regression Results in a comprehensive table\n",
        "from statsmodels.iolib.summary2 import summary_col\n",
        "\n",
        "models = [model_1, model_2, model_3, model_4, model_5]\n",
        "print(\"\\n Regression Coefficients for Models 1 to 5 \\n\")\n",
        "\n",
        "\n",
        "# Regression coefficient table\n",
        "summary = summary_col(\n",
        "    models,\n",
        "    stars=True,\n",
        "    float_format='%0.3f',\n",
        "    model_names=[\"Model 1\", \"Model 2\", \"Model 3\", \"Model 4\", \"Model 5\"]\n",
        ")\n",
        "print(summary)\n",
        "\n",
        "# Creating goodness-of-fit table\n",
        "gof_stats = pd.DataFrame({\n",
        "    'Model': [\"Model 1\", \"Model 2\", \"Model 3\", \"Model 4\", \"Model 5\"],\n",
        "    'R-squared': [round(m.rsquared, 3) for m in models],\n",
        "    'Sample Size (N)': [int(m.nobs) for m in models],\n",
        "    'F-statistic': [round(m.fvalue, 2) for m in models]\n",
        "})\n",
        "\n",
        "print(\"\\nGoodness-of-Fit Statistics:\")\n",
        "gof_stats"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "lWsEfePajBUO",
        "outputId": "c8def5ed-b542-41ed-87f3-d7d79869ea04"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Regression Coefficients for Models 1 to 5 \n",
            "\n",
            "\n",
            "========================================================================================\n",
            "                                         Model 1   Model 2   Model 3  Model 4   Model 5 \n",
            "----------------------------------------------------------------------------------------\n",
            "Intercept                               11.511*** 12.338*** 11.099*** 9.864*** 6.329*** \n",
            "                                        (0.081)   (0.053)   (0.081)   (0.102)  (0.118)  \n",
            "debt_to_income                          0.047***                      0.037*** 0.003*** \n",
            "                                        (0.003)                       (0.003)  (0.001)  \n",
            "bankruptcy_dummy                                  0.737***            0.574*** 0.024    \n",
            "                                                  (0.153)             (0.147)  (0.036)  \n",
            "verified_yes                                                3.254***                    \n",
            "                                                            (0.130)                     \n",
            "source_verified_yes                                         1.416***                    \n",
            "                                                            (0.111)                     \n",
            "credit_util                                                           4.418*** 0.331*** \n",
            "                                                                      (0.180)  (0.052)  \n",
            "grade_B[T.True]                                                                3.683*** \n",
            "                                                                               (0.032)  \n",
            "grade_C[T.True]                                                                7.278*** \n",
            "                                                                               (0.035)  \n",
            "grade_D[T.True]                                                                12.157***\n",
            "                                                                               (0.042)  \n",
            "grade_E[T.True]                                                                18.142***\n",
            "                                                                               (0.071)  \n",
            "grade_F[T.True]                                                                22.379***\n",
            "                                                                               (0.151)  \n",
            "grade_G[T.True]                                                                23.777***\n",
            "                                                                               (0.333)  \n",
            "homeownership_OWN[T.True]                                                      0.001    \n",
            "                                                                               (0.038)  \n",
            "homeownership_RENT[T.True]                                                     0.019    \n",
            "                                                                               (0.030)  \n",
            "loan_purpose_credit_card[T.True]                                               -0.056   \n",
            "                                                                               (0.106)  \n",
            "loan_purpose_debt_consolidation[T.True]                                        0.041    \n",
            "                                                                               (0.104)  \n",
            "loan_purpose_home_improvement[T.True]                                          -0.126   \n",
            "                                                                               (0.112)  \n",
            "loan_purpose_house[T.True]                                                     -0.032   \n",
            "                                                                               (0.139)  \n",
            "loan_purpose_major_purchase[T.True]                                            -0.026   \n",
            "                                                                               (0.122)  \n",
            "loan_purpose_medical[T.True]                                                   0.004    \n",
            "                                                                               (0.139)  \n",
            "loan_purpose_moving[T.True]                                                    -0.046   \n",
            "                                                                               (0.168)  \n",
            "loan_purpose_other[T.True]                                                     0.005    \n",
            "                                                                               (0.109)  \n",
            "loan_purpose_renewable_energy[T.True]                                          0.359    \n",
            "                                                                               (0.362)  \n",
            "loan_purpose_small_business[T.True]                                            0.056    \n",
            "                                                                               (0.143)  \n",
            "loan_purpose_vacation[T.True]                                                  0.130    \n",
            "                                                                               (0.180)  \n",
            "annual_income                                                                  -0.000** \n",
            "                                                                               (0.000)  \n",
            "loan_amount                                                                    -0.000*  \n",
            "                                                                               (0.000)  \n",
            "term                                                                           0.008*** \n",
            "                                                                               (0.001)  \n",
            "emp_length                                                                     -0.001   \n",
            "                                                                               (0.003)  \n",
            "credit_checks                                                                  0.032*** \n",
            "                                                                               (0.005)  \n",
            "R-squared                               0.020     0.002     0.059     0.078    0.952    \n",
            "R-squared Adj.                          0.020     0.002     0.059     0.078    0.952    \n",
            "========================================================================================\n",
            "Standard errors in parentheses.\n",
            "* p<.1, ** p<.05, ***p<.01\n",
            "\n",
            "Goodness-of-Fit Statistics:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Model  R-squared  Sample Size (N)  F-statistic\n",
              "0  Model 1      0.020             9976       204.23\n",
              "1  Model 2      0.002            10000        23.22\n",
              "2  Model 3      0.059            10000       315.94\n",
              "3  Model 4      0.078             9974       280.90\n",
              "4  Model 5      0.952             9181      6723.93"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c28f21f7-1716-4b93-a2a9-9772867e3096\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model</th>\n",
              "      <th>R-squared</th>\n",
              "      <th>Sample Size (N)</th>\n",
              "      <th>F-statistic</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Model 1</td>\n",
              "      <td>0.020</td>\n",
              "      <td>9976</td>\n",
              "      <td>204.23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Model 2</td>\n",
              "      <td>0.002</td>\n",
              "      <td>10000</td>\n",
              "      <td>23.22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Model 3</td>\n",
              "      <td>0.059</td>\n",
              "      <td>10000</td>\n",
              "      <td>315.94</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Model 4</td>\n",
              "      <td>0.078</td>\n",
              "      <td>9974</td>\n",
              "      <td>280.90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Model 5</td>\n",
              "      <td>0.952</td>\n",
              "      <td>9181</td>\n",
              "      <td>6723.93</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c28f21f7-1716-4b93-a2a9-9772867e3096')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c28f21f7-1716-4b93-a2a9-9772867e3096 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c28f21f7-1716-4b93-a2a9-9772867e3096');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-27229de3-6972-487e-a176-4314cf77e689\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-27229de3-6972-487e-a176-4314cf77e689')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-27229de3-6972-487e-a176-4314cf77e689 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_1cda0b32-7011-4ff1-b715-d6451d84a6fb\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('gof_stats')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_1cda0b32-7011-4ff1-b715-d6451d84a6fb button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('gof_stats');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "gof_stats",
              "summary": "{\n  \"name\": \"gof_stats\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Model 2\",\n          \"Model 5\",\n          \"Model 3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"R-squared\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.409087032304863,\n        \"min\": 0.002,\n        \"max\": 0.952,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.002,\n          0.952,\n          0.059\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sample Size (N)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 360,\n        \"min\": 9181,\n        \"max\": 10000,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          10000,\n          9181,\n          9976\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F-statistic\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2917.0653732012934,\n        \"min\": 23.22,\n        \"max\": 6723.93,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          23.22,\n          6723.93,\n          315.94\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    }
  ]
}